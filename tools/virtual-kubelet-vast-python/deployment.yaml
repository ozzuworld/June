---
# Enhanced ServiceAccount with proper permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: virtual-kubelet-vast-enhanced
  namespace: kube-system

---
# Enhanced ClusterRole with comprehensive permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: virtual-kubelet-vast-enhanced
rules:
# Pod management
- apiGroups: [""]
  resources: ["pods", "pods/status", "pods/log"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Node management  
- apiGroups: [""]
  resources: ["nodes", "nodes/status"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Secret access for environment variables
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list", "watch"]
# Event creation for debugging
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
# Lease management for leader election
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Metrics access
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: virtual-kubelet-vast-enhanced
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: virtual-kubelet-vast-enhanced
subjects:
- kind: ServiceAccount
  name: virtual-kubelet-vast-enhanced
  namespace: kube-system

---
# ConfigMap for additional configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: virtual-kubelet-vast-config
  namespace: kube-system
data:
  default-gpu-type: "RTX 4060"
  region-preference: "US" 
  rate-limit-rpm: "30"
  max-instances: "1"  # Development limit
  log-level: "info"

---
# Enhanced Deployment with improved configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: virtual-kubelet-vast-enhanced
  namespace: kube-system
  labels:
    app: virtual-kubelet-vast
    component: virtual-kubelet
    provider: vast-ai
spec:
  replicas: 1
  selector:
    matchLabels:
      app: virtual-kubelet-vast
  template:
    metadata:
      labels:
        app: virtual-kubelet-vast
        component: virtual-kubelet
        provider: vast-ai
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10255"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: virtual-kubelet-vast-enhanced
      restartPolicy: Always
      containers:
      - name: virtual-kubelet-vast
        image: ghcr.io/ozzuworld/virtual-kubelet-vast:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 10255
          name: http
          protocol: TCP
        env:
        # Required configuration
        - name: VAST_API_KEY
          valueFrom:
            secretKeyRef:
              name: vast-api-credentials
              key: api-key
        - name: NODE_NAME
          value: "vast-gpu-node-python"
        
        # Enhanced configuration
        - name: MAX_INSTANCES
          valueFrom:
            configMapKeyRef:
              name: virtual-kubelet-vast-config
              key: max-instances
        - name: RATE_LIMIT_RPM
          valueFrom:
            configMapKeyRef:
              name: virtual-kubelet-vast-config
              key: rate-limit-rpm
        - name: DEFAULT_GPU_TYPE
          valueFrom:
            configMapKeyRef:
              name: virtual-kubelet-vast-config
              key: default-gpu-type
        - name: REGION_PREFERENCE
          valueFrom:
            configMapKeyRef:
              name: virtual-kubelet-vast-config
              key: region-preference
        
        # Optional overrides (uncomment to use)
        # - name: FORCE_GPU_TYPE
        #   value: "RTX 4070"
        # - name: FORCE_IMAGE  
        #   value: "pytorch/pytorch:2.2.0-cuda12.1-cudnn8-devel"
        # - name: FORCE_PRICE_MAX
        #   value: "0.50"
        
        # Kubernetes API configuration
        - name: KUBELET_PORT
          value: "10255"
        - name: TAINT_KEY
          value: "virtual-kubelet.io/provider"
        - name: TAINT_VALUE
          value: "vast-ai"
        - name: TAINT_EFFECT
          value: "NoSchedule"
        
        # Logging and debugging
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: virtual-kubelet-vast-config
              key: log-level
              optional: true
        - name: PYTHONUNBUFFERED
          value: "1"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10255
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /readyz
            port: 10255
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 2
        
        # Resource limits for the virtual kubelet itself
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        
        # Temporary directories
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: home
          mountPath: /home/vk
        - name: vast-config
          mountPath: /home/vk/.vastai_api_key
          subPath: api-key
          readOnly: true
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: home
        emptyDir: {}
      - name: vast-config
        secret:
          secretName: vast-api-credentials
          defaultMode: 0600
      
      # Node selection and tolerations
      nodeSelector:
        kubernetes.io/os: linux
      
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: node-role.kubernetes.io/control-plane
        effect: NoSchedule
      
      # Anti-affinity to avoid running multiple instances on same node
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: virtual-kubelet-vast
              topologyKey: kubernetes.io/hostname

---
# Service for health checks and metrics
apiVersion: v1
kind: Service
metadata:
  name: virtual-kubelet-vast
  namespace: kube-system
  labels:
    app: virtual-kubelet-vast
spec:
  type: ClusterIP
  ports:
  - port: 10255
    targetPort: 10255
    protocol: TCP
    name: http
  selector:
    app: virtual-kubelet-vast

---
# Secret template (needs to be created manually)
apiVersion: v1
kind: Secret
metadata:
  name: vast-api-credentials
  namespace: kube-system
type: Opaque
data:
  # Base64 encoded Vast.ai API key
  # Create with: kubectl create secret generic vast-api-credentials --from-literal=api-key=YOUR_API_KEY -n kube-system
  api-key: ""  # Replace with base64 encoded API key

---
# Sample GPU workload for testing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-gpu-workload
  namespace: default
  labels:
    app: sample-gpu-workload
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sample-gpu-workload
  template:
    metadata:
      labels:
        app: sample-gpu-workload
      annotations:
        # Vast.ai configuration annotations
        vast.ai/gpu-type: "RTX 4060"
        vast.ai/gpu-fallbacks: "RTX 3060, RTX 4070"
        vast.ai/price-max: "0.25"
        vast.ai/region: "US"
        vast.ai/disk: "50"
        vast.ai/image: "pytorch/pytorch:2.2.0-cuda12.1-cudnn8-devel"
        vast.ai/env: "-p 8000:8000 -p 8001:8001"
    spec:
      # Schedule to our virtual node
      nodeName: vast-gpu-node-python
      
      # Tolerate the virtual kubelet taint
      tolerations:
      - key: "virtual-kubelet.io/provider"
        operator: "Equal"
        value: "vast-ai"
        effect: "NoSchedule"
      
      containers:
      - name: gpu-workload
        image: ozzuworld/june-multi-gpu:latest
        ports:
        - containerPort: 8000
          name: api
        - containerPort: 8001
          name: stt-api
        env:
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: NVIDIA_VISIBLE_DEVICES
          value: "all"
        resources:
          requests:
            nvidia.com/gpu: 1
            memory: "8Gi"
            cpu: "2"
          limits:
            nvidia.com/gpu: 1
            memory: "16Gi"
            cpu: "4"