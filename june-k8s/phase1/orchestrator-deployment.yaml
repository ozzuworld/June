apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-orchestrator
  namespace: june-services
  labels:
    app: june-orchestrator
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: june-orchestrator
  template:
    metadata:
      labels:
        app: june-orchestrator
    spec:
      containers:
        - name: app
          image: us-central1-docker.pkg.dev/main-buffer-469817-v7/june/june-orchestrator:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"
              ephemeral-storage: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
              ephemeral-storage: "1Gi"
          env:
            # ---------- OIDC / Keycloak: use the real issuer ----------
            - name: OIDC_ISSUER
              value: "https://idp.allsafe.world/realms/allsafe"
            - name: OIDC_AUDIENCE
              value: "june-orchestrator"
            # Optional but explicit; if provided, code can skip discovery:
            - name: OIDC_JWKS_URL
              value: "https://idp.allsafe.world/realms/allsafe/protocol/openid-connect/certs"
            - name: OIDC_CACHE_TTL_SECONDS
              value: "3600"

            # Legacy vars (safe to keep if other code paths still read them)
            - name: KEYCLOAK_URL
              value: "https://idp.allsafe.world"
            - name: KEYCLOAK_REALM
              value: "allsafe"
            - name: KEYCLOAK_ISSUER
              value: "https://idp.allsafe.world/realms/allsafe"
            - name: KEYCLOAK_BASE_URL
              value: "https://idp.allsafe.world"
            - name: REALM
              value: "allsafe"
            - name: ISSUER
              value: "https://idp.allsafe.world/realms/allsafe"
            - name: JWKS_URL
              value: "https://idp.allsafe.world/realms/allsafe/protocol/openid-connect/certs"

            # --------- Client creds for service-to-service, if used ----------
            - name: ORCHESTRATOR_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: june-idp-secret
                  key: ORCHESTRATOR_CLIENT_ID
            - name: ORCHESTRATOR_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: june-idp-secret
                  key: ORCHESTRATOR_CLIENT_SECRET

            # (duplicate mapping for any code paths using KEYCLOAK_CLIENT_ID/SECRET)
            - name: KEYCLOAK_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: june-idp-secret
                  key: ORCHESTRATOR_CLIENT_ID
            - name: KEYCLOAK_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: june-idp-secret
                  key: ORCHESTRATOR_CLIENT_SECRET

            # -------------------- App secrets --------------------
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: june-idp-secret
                  key: DATABASE_URL
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: june-idp-secret
                  key: DB_PASSWORD
            - name: GEMINI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: june-idp-secret
                  key: GEMINI_API_KEY
            - name: JWT_SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: june-idp-secret
                  key: JWT_SIGNING_KEY

          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 20
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: june-orchestrator
  namespace: june-services
  labels:
    app: june-orchestrator
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
    cloud.google.com/backend-config: '{"default":"june-backend-config"}'
spec:
  selector:
    app: june-orchestrator
  ports:
    - name: http
      port: 80
      targetPort: 8080
