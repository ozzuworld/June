# cloudbuild.yaml (repo root)
substitutions:
  _REGION: "us-central1"
  _GKE_CLUSTER_NAME: "june"
  _GKE_ZONE: "us-central1-a"
  _FIREBASE_PROJECT_ID: "main-buffer-469817-v7"

  _REPO: "us-central1-docker.pkg.dev/main-buffer-469817-v7/june"
  _API_HOST: "api.allsafe.world"
  _FIREBASE_WEB_API_KEY: ""
<<<<<<< HEAD
  _KEYCLOAK_HOST: "keycloak.allsafe.world"
  _KEYCLOAK_ADMIN: ""
  _KEYCLOAK_ADMIN_PASSWORD: ""
=======
>>>>>>> 32e347a7ab2331d2178f80faa0422dc2f442ae79
options:
  logging: CLOUD_LOGGING_ONLY

# Make the secret available to steps, but do NOT expose it by default.
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_NUMBER/secrets/keycloak-admin-password/versions/latest
      env: KEYCLOAK_ADMIN_PASSWORD
    - versionName: projects/$PROJECT_NUMBER/secrets/keycloak-admin-username/versions/latest
      env: KEYCLOAK_ADMIN_USERNAME
    - versionName: projects/$PROJECT_NUMBER/secrets/firebase-web-api-key/versions/latest
      env: FIREBASE_WEB_API_KEY

images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/june/orchestrator:${BUILD_ID}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/june/stt:${BUILD_ID}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/june/tts:${BUILD_ID}'

steps:
  # Build & push orchestrator
  - name: 'gcr.io/cloud-builders/docker'
    dir: 'services/june-orchestrator'
    args: ['build', '-t', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/june/orchestrator:${BUILD_ID}', '.']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/june/orchestrator:${BUILD_ID}']

  # Build & push STT
  - name: 'gcr.io/cloud-builders/docker'
    dir: 'services/june-stt'
    args: ['build', '-t', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/june/stt:${BUILD_ID}', '.']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/june/stt:${BUILD_ID}']

  # Build & push TTS
  - name: 'gcr.io/cloud-builders/docker'
    dir: 'services/june-tts'
    args: ['build', '-t', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/june/tts:${BUILD_ID}', '.']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/june/tts:${BUILD_ID}']

  # Helm deploy (injects the secret only into this step)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - -ceu
      - |
        set -euo pipefail
        echo ">> ensure Secret Manager secret firebase-web-api-key exists"
        if gcloud secrets describe firebase-web-api-key --project="${PROJECT_ID}" >/dev/null 2>&1; then
          echo "Secret already exists."
        else
          if [[ -n "${_FIREBASE_WEB_API_KEY:-}" ]]; then
            echo "Creating secret firebase-web-api-key from _FIREBASE_WEB_API_KEY"
            gcloud secrets create firebase-web-api-key --replication-policy="automatic" --project="${PROJECT_ID}"
            printf '%s' "${_FIREBASE_WEB_API_KEY}" | gcloud secrets versions add firebase-web-api-key --data-file=- --project="${PROJECT_ID}"
          else
            echo "ERROR: Secret firebase-web-api-key is missing and no bootstrap value provided."
            echo "Set _FIREBASE_WEB_API_KEY in the trigger temporarily or create the secret manually in Secret Manager."
            exit 1
          fi
        fi
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
<<<<<<< HEAD
    args:
      - -ceu
      - |
        set -euo pipefail
        echo ">> ensure Secret Manager secrets for Keycloak admin exist"
        if ! gcloud secrets describe keycloak-admin-username --project="${PROJECT_ID}" >/dev/null 2>&1; then
          if [[ -n "${_KEYCLOAK_ADMIN:-}" ]]; then
            gcloud secrets create keycloak-admin-username --replication-policy="automatic" --project="${PROJECT_ID}"
            printf '%s' "${_KEYCLOAK_ADMIN}" | gcloud secrets versions add keycloak-admin-username --data-file=- --project="${PROJECT_ID}"
          else
            echo "ERROR: _KEYCLOAK_ADMIN not provided and secret missing"; exit 1
          fi
        fi
        if ! gcloud secrets describe keycloak-admin-password --project="${PROJECT_ID}" >/dev/null 2>&1; then
          if [[ -n "${_KEYCLOAK_ADMIN_PASSWORD:-}" ]]; then
            gcloud secrets create keycloak-admin-password --replication-policy="automatic" --project="${PROJECT_ID}"
            printf '%s' "${_KEYCLOAK_ADMIN_PASSWORD}" | gcloud secrets versions add keycloak-admin-password --data-file=- --project="${PROJECT_ID}"
          else
            echo "ERROR: _KEYCLOAK_ADMIN_PASSWORD not provided and secret missing"; exit 1
          fi
        fi
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
=======
>>>>>>> 32e347a7ab2331d2178f80faa0422dc2f442ae79
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_GKE_ZONE}'
    secretEnv:
      - KEYCLOAK_ADMIN_USERNAME
      - KEYCLOAK_ADMIN_PASSWORD
      - FIREBASE_WEB_API_KEY
    args:
      - -ceu
      - |
        set -euo pipefail
        REPO="${_REGION}-docker.pkg.dev/${PROJECT_ID}/june"

        echo ">> get GKE credentials"
        gcloud container clusters get-credentials "${_GKE_CLUSTER_NAME}" --zone "${_GKE_ZONE}" --project "${PROJECT_ID}"

        echo ">> install helm"
        if ! command -v helm >/dev/null 2>&1; then
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        fi

        echo ">> ensure namespace"
        kubectl get ns apps || kubectl create ns apps

        echo ">> sync orchestrator secret from Secret Manager"
        kubectl -n apps create secret generic june-orchestrator-secrets \
          --from-literal=FIREBASE_PROJECT_ID="${_FIREBASE_PROJECT_ID}" \
          --from-literal=FIREBASE_WEB_API_KEY="$$FIREBASE_WEB_API_KEY" \
<<<<<<< HEAD
          --dry-run=client -o yaml | kubectl apply -f -

        echo ">> sync keycloak admin secret"
        kubectl -n apps create secret generic keycloak-admin \
          --from-literal=admin-username="$$KEYCLOAK_ADMIN_USERNAME" \
          --from-literal=admin-password="$$KEYCLOAK_ADMIN_PASSWORD" \
=======
>>>>>>> 32e347a7ab2331d2178f80faa0422dc2f442ae79
          --dry-run=client -o yaml | kubectl apply -f -

        echo ">> helm upgrade"
        helm upgrade --install june app/helm/june-stack -n apps --create-namespace \
          --set "june-orchestrator.image.repository=${_REPO}/orchestrator" --set "june-orchestrator.image.tag=${BUILD_ID}" \
          --set "june-stt.image.repository=${_REPO}/stt"               --set "june-stt.image.tag=${BUILD_ID}" \
          --set "june-tts.image.repository=${_REPO}/tts"               --set "june-tts.image.tag=${BUILD_ID}" \

          --set "june-orchestrator.ingress.enabled=true" \
          --set "june-orchestrator.ingress.className=nginx" \
<<<<<<< HEAD
          --set "june-orchestrator.ingress.host=${_API_HOST}" \
          --set "keycloak.enabled=true" \
          --set "keycloak.ingress.enabled=true" \
          --set "keycloak.ingress.ingressClassName=nginx" \
          --set "keycloak.ingress.hostname=${_KEYCLOAK_HOST}" \
          --set "keycloak.auth.existingSecret=keycloak-admin" \
=======
          --set "june-orchestrator.ingress.host=${_API_HOST}" 
>>>>>>> 32e347a7ab2331d2178f80faa0422dc2f442ae79
        echo ">> wait for rollout"
        kubectl -n apps rollout status deploy/june-june-orchestrator --timeout=5m