--- /mnt/data/June_repo/June/complete-deploy.sh
+++ /mnt/data/June_repo/June/complete-deploy.sh
@@ -21,7 +21,6 @@
 CLUSTER_NAME="${CLUSTER_NAME:-june-unified-cluster}"
 DOMAIN="${DOMAIN:-allsafe.world}"
 API_DOMAIN="api.${DOMAIN}"
-HARBOR_DOMAIN="harbor.${DOMAIN}"
 AUTH_DOMAIN="auth.${DOMAIN}"
 
 # Required secrets - prompt user if not set
@@ -78,7 +77,6 @@
 project_id = "$PROJECT_ID"
 region = "$REGION"
 cluster_name = "$CLUSTER_NAME"
-harbor_domain = "$HARBOR_DOMAIN"
 EOF
 
 log "Running Terraform plan..."
@@ -95,12 +93,10 @@
 # Get infrastructure outputs
 POSTGRES_IP=$(terraform output -raw postgres_connection_name | cut -d: -f1)
 REDIS_HOST=$(terraform output -raw redis_host)
-HARBOR_BUCKET=$(terraform output -raw harbor_registry_bucket)
 
 log "Infrastructure outputs:"
 log "  PostgreSQL IP: $POSTGRES_IP"
 log "  Redis Host: $REDIS_HOST"
-log "  Harbor Bucket: $HARBOR_BUCKET"
 
 # Step 2: Configure kubectl
 log "üîß Step 2: Configuring kubectl..."
@@ -109,20 +105,12 @@
 
 success "kubectl configured"
 
-# Step 3: Install Harbor
-log "üì¶ Step 3: Installing Harbor registry..."
-
-helm repo add harbor https://helm.goharbor.io
+
 helm repo update
 
-# Create harbor namespace
-kubectl create namespace harbor --dry-run=client -o yaml | kubectl apply -f -
 
 # Get database password from terraform output
-HARBOR_DB_PASSWORD=$(terraform output -raw harbor_db_password)
-
-# Create Harbor values
-cat > /tmp/harbor-values.yaml << EOF
+
 expose:
   type: loadBalancer
   loadBalancer:
@@ -130,18 +118,13 @@
   tls:
     enabled: false  # We'll handle SSL via ingress
     
-externalURL: https://$HARBOR_DOMAIN
-
-harborAdminPassword: "Harbor12345"
+
 
 database:
   type: external
   external:
     host: "$POSTGRES_IP"
     port: "5432"
-    username: "harbor"
-    password: "$HARBOR_DB_PASSWORD"
-    coreDatabase: "harbor"
     sslmode: "require"
     
 redis:
@@ -152,7 +135,6 @@
 registry:
   storage:
     gcs:
-      bucket: "$HARBOR_BUCKET"
       
 # Autopilot resource requirements
 core:
@@ -194,35 +176,20 @@
 
 serviceAccount:
   create: false
-  name: "harbor"
 EOF
 
-# Install Harbor
-log "Installing Harbor (this may take 10-15 minutes)..."
-helm upgrade --install harbor harbor/harbor \
-  --namespace harbor \
-  --values /tmp/harbor-values.yaml \
   --timeout 20m \
   --wait
 
-# Get Harbor LoadBalancer IP
-log "‚è≥ Waiting for Harbor LoadBalancer IP..."
-HARBOR_IP=""
 for i in {1..30}; do
-  HARBOR_IP=$(kubectl get service harbor -n harbor -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
-  if [[ -n "$HARBOR_IP" && "$HARBOR_IP" != "null" ]]; then
     break
   fi
   sleep 10
   echo "Waiting for LoadBalancer IP... ($i/30)"
 done
 
-if [[ -z "$HARBOR_IP" ]]; then
-    error "Harbor LoadBalancer IP not available after 5 minutes"
-fi
-
-success "Harbor installed at IP: $HARBOR_IP"
-rm -f /tmp/harbor-values.yaml
+fi
+
 
 # Step 4: Create application secrets
 log "üîê Step 4: Creating application secrets..."
@@ -245,19 +212,12 @@
 success "Application secrets created"
 
 # Step 5: Build and push images (need to go to project root)
-log "üê≥ Step 5: Building and pushing images to Harbor..."
 
 # Go back to project root
 cd ../..
 
-# Setup Docker for Harbor
-HARBOR_URL="$HARBOR_IP"
-docker login $HARBOR_URL -u admin -p Harbor12345
-
-# Create Harbor project
-curl -k -X POST "http://$HARBOR_URL/api/v2.0/projects" \
+
   -H "Content-Type: application/json" \
-  -u "admin:Harbor12345" \
   -d '{"project_name":"june","public":true}' || true
 
 # Build and push each service
@@ -277,14 +237,11 @@
   fi
   
   log "Building $SERVICE from $SERVICE_PATH..."
-  IMAGE_TAG="$HARBOR_URL/june/$SERVICE:latest"
-  COMMIT_SHA_TAG="$HARBOR_URL/june/$SERVICE:$(git rev-parse --short HEAD 2>/dev/null || echo 'manual')"
   
   docker build -t "$IMAGE_TAG" -t "$COMMIT_SHA_TAG" "$SERVICE_PATH"
   docker push "$IMAGE_TAG"
   docker push "$COMMIT_SHA_TAG"
   
-  success "$SERVICE pushed to Harbor"
 done
 
 # Step 6: Deploy June services
@@ -320,7 +277,6 @@
     spec:
       containers:
       - name: june-orchestrator
-        image: HARBOR_URL/june/june-orchestrator:latest
         ports:
         - containerPort: 8080
         env:
@@ -348,9 +304,6 @@
 MANIFEST_EOF
 fi
 
-# Update manifests with Harbor URL and database info
-find k8s/june-services -name "*.yaml" -exec sed -i.bak "s|harbor\.yourdomain\.com|$HARBOR_URL|g" {} \;
-find k8s/june-services -name "*.yaml" -exec sed -i.bak "s|HARBOR_URL|$HARBOR_URL|g" {} \;
 find k8s/june-services -name "*.yaml" -exec sed -i.bak "s|api\.yourdomain\.com|$API_DOMAIN|g" {} \;
 find k8s/june-services -name "*.yaml" -exec sed -i.bak "s|POSTGRES_HOST|$POSTGRES_IP|g" {} \;
 
@@ -405,7 +358,6 @@
 log ""
 log "üìã Deployment Summary:"
 log "  üèóÔ∏è  GKE Cluster: $CLUSTER_NAME"
-log "  üì¶ Harbor Registry: http://$HARBOR_IP (admin/Harbor12345)"  
 log "  üåê API Static IP: $API_STATIC_IP"
 log "  üîê Auth Domain: $AUTH_DOMAIN"
 log "  üì° API Domain: $API_DOMAIN"
@@ -413,7 +365,6 @@
 log "üîß IMPORTANT - Configure Cloudflare DNS:"
 log "  1. Add A record: api.$DOMAIN ‚Üí $API_STATIC_IP (Proxied)"
 log "  2. Add A record: auth.$DOMAIN ‚Üí $API_STATIC_IP (Proxied)"  
-log "  3. Add A record: harbor.$DOMAIN ‚Üí $HARBOR_IP (DNS Only)"
 log ""
 log "üîë Generated Secrets (save these!):"
 log "  ORCHESTRATOR_CLIENT_SECRET: $ORCHESTRATOR_CLIENT_SECRET"
@@ -437,12 +388,10 @@
 
 Static IPs:
 - API: $API_STATIC_IP
-- Harbor: $HARBOR_IP
 
 Domains:
 - API: $API_DOMAIN
 - Auth: $AUTH_DOMAIN  
-- Harbor: $HARBOR_DOMAIN
 
 Generated Secrets:
 - ORCHESTRATOR_CLIENT_SECRET: $ORCHESTRATOR_CLIENT_SECRET

--- /mnt/data/June_repo/June/deploy-oracle-enterprise.sh
+++ /mnt/data/June_repo/June/deploy-oracle-enterprise.sh
@@ -22,11 +22,6 @@
 CLUSTER_NAME="${CLUSTER_NAME:-june-unified-cluster}"
 
 # Oracle connection details
-HARBOR_DB_HOST="adb.us-ashburn-1.oraclecloud.com"
-HARBOR_DB_PORT="1522"
-HARBOR_DB_SERVICE="ga342747dd21cdf_harbordb_high.adb.oraclecloud.com"
-HARBOR_DB_USER="harbor_user"
-HARBOR_DB_PASSWORD="HarborPass123!@#"
 
 KEYCLOAK_DB_HOST="adb.us-ashburn-1.oraclecloud.com"
 KEYCLOAK_DB_PORT="1522"
@@ -104,12 +99,10 @@
 log "üîê Step 3: Setting up namespaces and Oracle secrets..."
 
 # Create namespaces
-kubectl create namespace harbor --dry-run=client -o yaml | kubectl apply -f -
 kubectl create namespace june-services --dry-run=client -o yaml | kubectl apply -f -
 
 # Create Oracle wallet secrets
 kubectl create secret generic oracle-wallet \
-  --namespace=harbor \
   --from-file=oracle-wallet/ \
   --dry-run=client -o yaml | kubectl apply -f -
 
@@ -120,12 +113,6 @@
 
 # Create Oracle database credentials
 kubectl create secret generic oracle-credentials \
-  --namespace=harbor \
-  --from-literal=HARBOR_DB_HOST="$HARBOR_DB_HOST" \
-  --from-literal=HARBOR_DB_PORT="$HARBOR_DB_PORT" \
-  --from-literal=HARBOR_DB_SERVICE="$HARBOR_DB_SERVICE" \
-  --from-literal=HARBOR_DB_USER="$HARBOR_DB_USER" \
-  --from-literal=HARBOR_DB_PASSWORD="$HARBOR_DB_PASSWORD" \
   --dry-run=client -o yaml | kubectl apply -f -
 
 kubectl create secret generic oracle-credentials \
@@ -152,28 +139,16 @@
 
 success "Oracle secrets and application secrets created"
 
-# Step 4: Install Harbor with Oracle backend
-log "üì¶ Step 4: Installing Harbor with Oracle backend..."
-
-# Add Harbor repository
-helm repo add harbor https://helm.goharbor.io
+
 helm repo update
 
-# Install Harbor with Oracle configuration
-helm upgrade --install harbor harbor/harbor \
-  --namespace harbor \
-  --values k8s/june-services/harbor-values.yaml \
   --timeout 20m \
   --wait
 
-# Wait for Harbor to be ready
-log "‚è≥ Waiting for Harbor to be ready..."
-kubectl wait --namespace harbor \
   --for=condition=available deployment \
   --all \
   --timeout=600s
 
-success "Harbor deployed with Oracle backend"
 
 # Step 5: Deploy Keycloak with Oracle backend
 log "üîê Step 5: Deploying Keycloak with Oracle backend..."
@@ -267,7 +242,6 @@
 log "  ‚ö° Orchestrator LB: $ORCHESTRATOR_LB_IP"
 log ""
 log "üè¢ Oracle Enterprise Features:"
-log "  ‚úÖ Harbor Registry ‚Üí Oracle Autonomous DB"
 log "  ‚úÖ Keycloak IDP ‚Üí Oracle Autonomous DB"
 log "  ‚úÖ SSL/TLS encrypted connections"
 log "  ‚úÖ Separate databases for isolation"
@@ -284,7 +258,6 @@
 log "üìÑ Next Steps:"
 log "  1. Configure DNS to point to $STATIC_IP"
 log "  2. Setup SSL certificates for production"
-log "  3. Configure Harbor projects and users"
 log "  4. Setup monitoring and alerting"
 log "  5. Create Keycloak realms and clients"
 

--- /mnt/data/June_repo/June/setup-oracle-wallets.sh
+++ /mnt/data/June_repo/June/setup-oracle-wallets.sh
@@ -1,178 +1,38 @@
 #!/bin/bash
 # setup-oracle-wallets.sh
-# Script to download and combine Oracle wallet files for dual database setup
+# Simplified: prepare Oracle wallet for Keycloak only
 
 set -euo pipefail
 
-# Colors for output
-GREEN='\033[0;32m'
-YELLOW='\033[1;33m'
-BLUE='\033[0;34m'
-RED='\033[0;31m'
-NC='\033[0m'
-
+GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; RED='\033[0;31m'; NC='\033[0m'
 log() { echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"; }
 success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
 warning() { echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"; }
 error() { echo -e "${RED}‚ùå $1${NC}"; exit 1; }
 
-log "üîó Oracle Dual Wallet Setup for June Platform"
+# Inputs
+WALLET_ZIP="${1:-keycloakdb_wallet.zip}"
 
-# Check if wallet zip files exist
-if [[ ! -f "harbordb_wallet.zip" ]]; then
-    error "harbordb_wallet.zip not found. Please download Harbor database wallet first."
+if [[ ! -f "$WALLET_ZIP" ]]; then
+  error "Wallet ZIP not found: $WALLET_ZIP"
 fi
 
-if [[ ! -f "keycloakdb_wallet.zip" ]]; then
-    error "keycloakdb_wallet.zip not found. Please download Keycloak database wallet first."
+# Reset dir
+rm -rf oracle-wallet
+mkdir -p oracle-wallet temp-keycloak
+
+log "üì¶ Extracting wallet files..."
+unzip -q "$WALLET_ZIP" -d temp-keycloak/
+
+# Copy to oracle-wallet
+cp temp-keycloak/* oracle-wallet/
+
+# Verify tnsnames contains keycloakdb
+if grep -qi "keycloakdb" oracle-wallet/tnsnames.ora; then
+  success "Wallet prepared at ./oracle-wallet (contains keycloakdb entries)"
+else
+  warning "tnsnames.ora does not include keycloakdb_* aliases ‚Äî please add the correct wallet."
 fi
 
-log "üì• Found both wallet files"
-
-# Clean up any existing oracle-wallet directory
-if [[ -d "oracle-wallet" ]]; then
-    warning "Removing existing oracle-wallet directory"
-    rm -rf oracle-wallet
-fi
-
-# Create directories
-mkdir -p oracle-wallet temp-harbor temp-keycloak
-
-log "üì¶ Extracting wallet files..."
-
-# Extract both wallets
-unzip -q harbordb_wallet.zip -d temp-harbor/
-unzip -q keycloakdb_wallet.zip -d temp-keycloak/
-
-# Check if wallets are identical (common for same Oracle Cloud instance)
-if diff -q temp-harbor/cwallet.sso temp-keycloak/cwallet.sso >/dev/null 2>&1; then
-    log "üéØ Wallets are from same Oracle Cloud instance - using single wallet approach"
-    
-    # Copy all files from harbor wallet (either would work)
-    cp temp-harbor/* oracle-wallet/
-    
-    # Verify both databases are in tnsnames.ora
-    if grep -q "harbordb" oracle-wallet/tnsnames.ora && grep -q "keycloakdb" oracle-wallet/tnsnames.ora; then
-        success "Both databases found in single wallet file"
-    else
-        warning "Single wallet doesn't contain both databases - will merge manually"
-        
-        # Merge tnsnames.ora files
-        cat temp-harbor/tnsnames.ora > oracle-wallet/tnsnames.ora
-        echo "" >> oracle-wallet/tnsnames.ora
-        cat temp-keycloak/tnsnames.ora >> oracle-wallet/tnsnames.ora
-        
-        success "Merged tnsnames.ora files"
-    fi
-else
-    log "üîó Wallets are different - merging manually"
-    
-    # Use harbor wallet as base
-    cp temp-harbor/* oracle-wallet/
-    
-    # Merge tnsnames.ora files
-    cat temp-harbor/tnsnames.ora > oracle-wallet/tnsnames.ora
-    echo "" >> oracle-wallet/tnsnames.ora
-    cat temp-keycloak/tnsnames.ora >> oracle-wallet/tnsnames.ora
-    
-    success "Combined different wallet files"
-fi
-
-# Clean up temporary directories
-rm -rf temp-harbor temp-keycloak
-
-log "üß™ Verifying combined wallet..."
-
-# Check required files exist
-REQUIRED_FILES=("cwallet.sso" "ewallet.p12" "tnsnames.ora" "sqlnet.ora")
-for file in "${REQUIRED_FILES[@]}"; do
-    if [[ -f "oracle-wallet/$file" ]]; then
-        success "$file ‚úì"
-    else
-        error "$file missing from wallet"
-    fi
-done
-
-# Verify both databases are in tnsnames.ora
-log "üîç Checking database entries in tnsnames.ora..."
-
-if grep -q "harbordb_high" oracle-wallet/tnsnames.ora; then
-    success "Harbor database entry found"
-else
-    error "Harbor database entry missing from tnsnames.ora"
-fi
-
-if grep -q "keycloakdb_high" oracle-wallet/tnsnames.ora; then
-    success "Keycloak database entry found"
-else
-    error "Keycloak database entry missing from tnsnames.ora"
-fi
-
-# Show database entries
-log "üìã Available database connections:"
-grep -E "^[a-zA-Z].*=" oracle-wallet/tnsnames.ora | sed 's/ =.*//' | while read -r db; do
-    success "  $db"
-done
-
-# Test connections if sqlplus is available
-if command -v sqlplus >/dev/null 2>&1; then
-    log "üß™ Testing database connections..."
-    
-    export TNS_ADMIN="$(pwd)/oracle-wallet"
-    
-    # Test Harbor DB
-    log "Testing Harbor database..."
-    if echo "SELECT 'Harbor DB OK' FROM DUAL;" | sqlplus -S harbor_user/HarborPass123!@#@harbordb_high >/dev/null 2>&1; then
-        success "Harbor database connection successful"
-    else
-        warning "Harbor database connection failed (check credentials)"
-    fi
-    
-    # Test Keycloak DB
-    log "Testing Keycloak database..."
-    if echo "SELECT 'Keycloak DB OK' FROM DUAL;" | sqlplus -S keycloak_user/KeycloakPass123!@#@keycloakdb_high >/dev/null 2>&1; then
-        success "Keycloak database connection successful"
-    else
-        warning "Keycloak database connection failed (check credentials)"
-    fi
-else
-    warning "sqlplus not available - skipping connection tests"
-fi
-
-# Create GitHub Actions secrets (base64 encoded)
-log "üîê Creating GitHub Actions secrets format..."
-
-cat > oracle-secrets.txt << EOF
-# Add these to your GitHub repository secrets:
-
-ORACLE_CWALLET_SSO="$(base64 -w 0 oracle-wallet/cwallet.sso)"
-ORACLE_EWALLET_P12="$(base64 -w 0 oracle-wallet/ewallet.p12)"
-ORACLE_TNSNAMES_ORA="$(base64 -w 0 oracle-wallet/tnsnames.ora)"
-ORACLE_SQLNET_ORA="$(base64 -w 0 oracle-wallet/sqlnet.ora)"
-
-# Database credentials
-HARBOR_DB_PASSWORD="HarborPass123!@#"
-KEYCLOAK_DB_PASSWORD="KeycloakPass123!@#"
-EOF
-
-success "GitHub Actions secrets saved to oracle-secrets.txt"
-
-# Final summary
-log ""
-success "üéâ Oracle wallet setup completed successfully!"
-log ""
-log "üìÅ Files created:"
-log "  oracle-wallet/          - Combined wallet directory"
-log "  oracle-secrets.txt      - GitHub Actions secrets"
-log ""
-log "üöÄ Next steps:"
-log "  1. Review oracle-wallet/ directory contents"
-log "  2. Add secrets from oracle-secrets.txt to GitHub"
-log "  3. Run: ./deploy-oracle-enterprise.sh"
-log ""
-log "üìã Wallet contains connections to:"
-grep -E "^[a-zA-Z].*=" oracle-wallet/tnsnames.ora | sed 's/ =.*//' | while read -r db; do
-    log "  ‚úì $db"
-done
-
-success "‚úÖ Ready for enterprise deployment!"+# Clean up
+rm -rf temp-keycloak

--- /mnt/data/June_repo/June/oracle-secrets.txt
+++ /mnt/data/June_repo/June/oracle-secrets.txt
@@ -6,5 +6,4 @@
 ORACLE_SQLNET_ORA="V0FMTEVUX0xPQ0FUSU9OID0gKFNPVVJDRSA9IChNRVRIT0QgPSBmaWxlKSAoTUVUSE9EX0RBVEEgPSAoRElSRUNUT1JZPSI/L25ldHdvcmsvYWRtaW4iKSkpClNTTF9TRVJWRVJfRE5fTUFUQ0g9eWVz"
 
 # Database credentials
-HARBOR_DB_PASSWORD="HarborPass123!@#"
 KEYCLOAK_DB_PASSWORD="KeycloakPass123!@#"

--- /mnt/data/June_repo/June/.github/workflows/deploy-gke.yml
+++ /mnt/data/June_repo/June/.github/workflows/deploy-gke.yml
@@ -128,7 +128,6 @@
 
       - name: Create namespaces
         run: |
-          kubectl create namespace harbor --dry-run=client -o yaml | kubectl apply -f -
           kubectl create namespace june-services --dry-run=client -o yaml | kubectl apply -f -
 
       - name: Setup Oracle wallet secret
@@ -144,7 +143,6 @@
           
           # Create wallet secrets for both namespaces
           kubectl create secret generic oracle-wallet \
-            --namespace=harbor \
             --from-file=cwallet.sso=cwallet.sso \
             --from-file=ewallet.p12=ewallet.p12 \
             --from-file=tnsnames.ora=tnsnames.ora \
@@ -166,12 +164,6 @@
         run: |
           # Create Oracle database credentials
           kubectl create secret generic oracle-credentials \
-            --namespace=harbor \
-            --from-literal=HARBOR_DB_HOST="adb.us-ashburn-1.oraclecloud.com" \
-            --from-literal=HARBOR_DB_PORT="1522" \
-            --from-literal=HARBOR_DB_SERVICE="ga342747dd21cdf_harbordb_high.adb.oraclecloud.com" \
-            --from-literal=HARBOR_DB_USER="harbor_user" \
-            --from-literal=HARBOR_DB_PASSWORD="${{ secrets.HARBOR_DB_PASSWORD }}" \
             --dry-run=client -o yaml | kubectl apply -f -
 
           kubectl create secret generic oracle-credentials \
@@ -252,49 +244,6 @@
           
           echo "‚úÖ Successfully pushed ${{ matrix.service }}"
 
-  # Deploy Harbor
-  deploy-harbor:
-    name: Deploy Harbor Registry
-    runs-on: ubuntu-latest
-    needs: [deploy-infrastructure, setup-oracle-secrets]
-    permissions:
-      contents: read
-      id-token: write
-    
-    steps:
-      - name: Checkout code
-        uses: actions/checkout@v4
-
-      - name: Authenticate to Google Cloud
-        uses: google-github-actions/auth@v2
-        with:
-          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
-          service_account: ${{ secrets.DEPLOYER_SA }}
-          project_id: ${{ env.PROJECT_ID }}
-
-      - name: Set up Cloud SDK
-        uses: google-github-actions/setup-gcloud@v2
-
-      - name: Configure kubectl
-        run: |
-          gcloud container clusters get-credentials ${{ needs.deploy-infrastructure.outputs.cluster_name }} \
-            --region=${{ env.REGION }} \
-            --project=${{ env.PROJECT_ID }}
-
-      - name: Install Harbor
-        run: |
-          # Add Harbor Helm repository
-          helm repo add harbor https://helm.goharbor.io
-          helm repo update
-          
-          # Install Harbor with Oracle configuration
-          helm upgrade --install harbor harbor/harbor \
-            --namespace harbor \
-            --values k8s/june-services/harbor-values.yaml \
-            --timeout 20m \
-            --wait
-
-  # Deploy Keycloak
   deploy-keycloak:
     name: Deploy Keycloak IDP
     runs-on: ubuntu-latest
@@ -336,7 +285,6 @@
   deploy-services:
     name: Deploy June Services
     runs-on: ubuntu-latest
-    needs: [deploy-infrastructure, setup-oracle-secrets, build-images, deploy-harbor, deploy-keycloak]
     permissions:
       contents: read
       id-token: write
@@ -405,11 +353,10 @@
           echo "‚úÖ Enterprise Benefits:"
           echo "  ‚Ä¢ Oracle Autonomous Database backend"
           echo "  ‚Ä¢ SSL/TLS encrypted connections"
-          echo "  ‚Ä¢ Separate databases for Harbor and Keycloak"
           echo "  ‚Ä¢ GKE Autopilot managed infrastructure"
           echo "  ‚Ä¢ Enterprise container registry"
           echo ""
           echo "üîß Next Steps:"
           echo "  1. Configure DNS to point to ${{ needs.deploy-infrastructure.outputs.static_ip }}"
           echo "  2. SSL certificates will auto-provision"
-          echo "  3. Test services via LoadBalancer IPs"+          echo "  3. Test services via LoadBalancer IPs"

--- /mnt/data/June_repo/June/scripts/deploy-gke-unified.sh
+++ /mnt/data/June_repo/June/scripts/deploy-gke-unified.sh
@@ -1,5 +1,4 @@
 #!/bin/bash
-# scripts/deploy-gke-unified.sh - Deploy Harbor + June Services to GKE Autopilot
 
 set -euo pipefail
 
@@ -63,7 +62,6 @@
 # Get outputs from Terraform
 POSTGRES_CONNECTION=$(terraform output -raw postgres_connection_name)
 REDIS_HOST=$(terraform output -raw redis_host)
-HARBOR_BUCKET=$(terraform output -raw harbor_registry_bucket)
 
 cd ../..
 
@@ -82,7 +80,6 @@
 kubectl create namespace june-services --dry-run=client -o yaml | kubectl apply -f -
 
 # Get database passwords from Secret Manager
-HARBOR_DB_PASSWORD=$(gcloud secrets versions access latest --secret="harbor-db-password" --project="$PROJECT_ID")
 ORCHESTRATOR_DB_PASSWORD=$(gcloud secrets versions access latest --secret="june_orchestrator-db-password" --project="$PROJECT_ID")
 IDP_DB_PASSWORD=$(gcloud secrets versions access latest --secret="june_idp-db-password" --project="$PROJECT_ID")
 
@@ -102,15 +99,9 @@
 
 success "Kubernetes secrets created"
 
-# Step 4: Install Harbor
-log "üì¶ Step 4: Installing Harbor registry..."
-
-# Add Harbor Helm repository
-helm repo add harbor https://helm.goharbor.io
+
 helm repo update
 
-# Create Harbor values with actual connection info
-cat > /tmp/harbor-values.yaml << EOF
 expose:
   type: loadBalancer
   loadBalancer:
@@ -118,9 +109,7 @@
   tls:
     enabled: false  # We'll use ingress for SSL
 
-externalURL: http://harbor.${CLUSTER_NAME}.svc.cluster.local
-
-harborAdminPassword: "Harbor12345"
+
 
 # Use external PostgreSQL
 database:
@@ -128,9 +117,6 @@
   external:
     host: "${POSTGRES_CONNECTION}"
     port: "5432"
-    username: "harbor"
-    password: "${HARBOR_DB_PASSWORD}"
-    coreDatabase: "harbor"
     sslmode: "require"
 
 # Use external Redis
@@ -143,7 +129,6 @@
 registry:
   storage:
     gcs:
-      bucket: "${HARBOR_BUCKET}"
       # We'll use Workload Identity instead of keyfile
       
 # Resource limits for Autopilot
@@ -196,46 +181,26 @@
 # Use Workload Identity
 serviceAccount:
   create: false
-  name: "harbor"
 EOF
 
-# Install Harbor
-kubectl create namespace harbor --dry-run=client -o yaml | kubectl apply -f -
-
-helm upgrade --install harbor harbor/harbor \
-  --namespace harbor \
-  --values /tmp/harbor-values.yaml \
+
   --timeout 15m \
   --wait
 
 # Clean up values file
-rm -f /tmp/harbor-values.yaml
-
-success "Harbor installed successfully!"
-
-# Step 5: Build and push images to Harbor
+
+
 log "üê≥ Step 5: Building and pushing images..."
 
-# Get Harbor URL
-HARBOR_URL="http://$(kubectl get service harbor -n harbor -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
-if [[ "$HARBOR_URL" == "http://" ]]; then
   # Fallback to port-forward if LoadBalancer not ready
   warning "LoadBalancer not ready, using port-forward"
-  kubectl port-forward -n harbor svc/harbor 8080:80 &
   PORT_FORWARD_PID=$!
-  HARBOR_URL="http://localhost:8080"
   sleep 10
 fi
 
-log "Harbor URL: $HARBOR_URL"
-
-# Login to Harbor (insecure for local development)
-docker login $HARBOR_URL -u admin -p Harbor12345 --insecure
-
-# Create Harbor project
-curl -k -X POST "$HARBOR_URL/api/v2.0/projects" \
+
+
   -H "Content-Type: application/json" \
-  -u "admin:Harbor12345" \
   -d '{"project_name":"june","public":true}' || true
 
 # Build and push images
@@ -250,12 +215,10 @@
   fi
   
   log "Building $SERVICE..."
-  IMAGE_TAG="$HARBOR_URL/june/$SERVICE:latest"
   
   docker build -t "$IMAGE_TAG" "$SERVICE_PATH"
   docker push "$IMAGE_TAG"
   
-  success "$SERVICE image pushed to Harbor"
 done
 
 # Kill port-forward if we started it
@@ -266,9 +229,6 @@
 # Step 6: Deploy June services
 log "üöÄ Step 6: Deploying June services to Kubernetes..."
 
-# Update K8s manifests with actual Harbor URL
-HARBOR_REGISTRY_URL=$(echo $HARBOR_URL | sed 's|http://||')
-sed -i "s|harbor.yourdomain.com|$HARBOR_REGISTRY_URL|g" k8s/june-services/*.yaml
 
 # Update postgres connection in june-idp manifest
 POSTGRES_HOST=$(echo $POSTGRES_CONNECTION | cut -d: -f1)
@@ -329,7 +289,6 @@
 
 log "üìã Deployment Summary:"
 log "  Cluster: $CLUSTER_NAME"
-log "  Harbor: $HARBOR_URL"
 log "  Static IP: $STATIC_IP"
 log "  Domain: $DOMAIN (configure DNS)"
 
@@ -337,11 +296,9 @@
 log "  1. Configure DNS: $DOMAIN -> $STATIC_IP"
 log "  2. Wait for SSL certificate provisioning"
 log "  3. Test external access"
-log "  4. Configure Harbor projects and users"
 log "  5. Update CI/CD pipelines"
 
 log "üîß Useful commands:"
 log "  kubectl get pods -n june-services"
-log "  kubectl get pods -n harbor"
 log "  kubectl logs -n june-services deployment/june-orchestrator"
 log "  gcloud container clusters get-credentials $CLUSTER_NAME --region=$REGION"
--- /mnt/data/June_repo/June/k8s/june-services/harbor-values.yaml
+++ /mnt/data/June_repo/June/k8s/june-services/harbor-values.yaml (deleted)
@@
-<file removed>
+<deleted>
