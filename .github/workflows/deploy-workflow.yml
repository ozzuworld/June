name: 🚀 June Services Deploy (GPU-Aware)

on:
  push:
    branches: [ main, develop ]
    paths-ignore: [ 'README.md', 'docs/**', '.gitignore' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_images:
        description: '🔨 Build Docker images?'
        required: true
        default: true
        type: boolean
      deploy_services:
        description: '🚀 Deploy to Kubernetes?'
        required: true
        default: true
        type: boolean
      services:
        description: '📦 Services to build/deploy (comma-separated, or "all")'
        required: false
        default: 'all'
        type: string
      force_gpu_restart:
        description: '🔄 Force restart GPU services (clears GPU slots)?'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io/${{ secrets.DOCKERHUB_USERNAME }}
  NAMESPACE: june-services

permissions:
  contents: read
  packages: write

jobs:
  # ============================================================================
  # DETERMINE WHAT TO BUILD/DEPLOY
  # ============================================================================
  
  setup:
    name: 📋 Setup Build Matrix
    runs-on: self-hosted
    outputs:
      build_images: ${{ steps.config.outputs.build_images }}
      deploy_services: ${{ steps.config.outputs.deploy_services }}
      services: ${{ steps.config.outputs.services }}
      force_gpu_restart: ${{ steps.config.outputs.force_gpu_restart }}
    steps:
      - name: 📝 Configure workflow
        id: config
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUILD="${{ github.event.inputs.build_images }}"
            DEPLOY="${{ github.event.inputs.deploy_services }}"
            SERVICES="${{ github.event.inputs.services }}"
            FORCE_GPU="${{ github.event.inputs.force_gpu_restart }}"
          else
            BUILD="true"
            DEPLOY="true"
            SERVICES="all"
            FORCE_GPU="false"
          fi
          
          echo "build_images=$BUILD" >> $GITHUB_OUTPUT
          echo "deploy_services=$DEPLOY" >> $GITHUB_OUTPUT
          echo "services=$SERVICES" >> $GITHUB_OUTPUT
          echo "force_gpu_restart=$FORCE_GPU" >> $GITHUB_OUTPUT
          
          echo "📋 Configuration:"
          echo "  Build images: $BUILD"
          echo "  Deploy services: $DEPLOY"
          echo "  Services: $SERVICES"
          echo "  Force GPU restart: $FORCE_GPU"

  # ============================================================================
  # BUILD IMAGES (Separated by service)
  # ============================================================================

  build-stt:
    name: 🔨 Build june-stt
    runs-on: self-hosted
    needs: setup
    if: needs.setup.outputs.build_images == 'true' && (needs.setup.outputs.services == 'all' || contains(needs.setup.outputs.services, 'stt'))
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📝 Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/june-stt
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: 🏗️ Build and push june-stt
        uses: docker/build-push-action@v5
        with:
          context: ./June/services/june-stt
          file: ./June/services/june-stt/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=stt
          cache-to: type=gha,mode=max,scope=stt
          platforms: linux/amd64

  build-tts:
    name: 🔨 Build june-tts
    runs-on: self-hosted
    needs: setup
    if: needs.setup.outputs.build_images == 'true' && (needs.setup.outputs.services == 'all' || contains(needs.setup.outputs.services, 'tts'))
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📝 Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/june-tts
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: 🏗️ Build and push june-tts
        uses: docker/build-push-action@v5
        with:
          context: ./June/services/june-tts
          file: ./June/services/june-tts/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=tts
          cache-to: type=gha,mode=max,scope=tts
          platforms: linux/amd64

  build-orchestrator:
    name: 🔨 Build june-orchestrator
    runs-on: self-hosted
    needs: setup
    if: needs.setup.outputs.build_images == 'true' && (needs.setup.outputs.services == 'all' || contains(needs.setup.outputs.services, 'orchestrator'))
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📝 Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/june-orchestrator
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: 🏗️ Build and push june-orchestrator
        uses: docker/build-push-action@v5
        with:
          context: ./June/services/june-orchestrator
          file: ./June/services/june-orchestrator/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=orchestrator
          cache-to: type=gha,mode=max,scope=orchestrator
          platforms: linux/amd64

  build-idp:
    name: 🔨 Build june-idp
    runs-on: self-hosted
    needs: setup
    if: needs.setup.outputs.build_images == 'true' && (needs.setup.outputs.services == 'all' || contains(needs.setup.outputs.services, 'idp'))
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📝 Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/june-idp
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: 🏗️ Build and push june-idp
        uses: docker/build-push-action@v5
        with:
          context: ./June/services/june-idp
          file: ./June/services/june-idp/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=idp
          cache-to: type=gha,mode=max,scope=idp
          platforms: linux/amd64

  # ============================================================================
  # GPU RESOURCE MANAGEMENT (NEW!)
  # ============================================================================
  
  manage-gpu-resources:
    name: 🎮 Manage GPU Resources
    runs-on: self-hosted
    needs: [setup, build-stt, build-tts, build-orchestrator, build-idp]
    if: |
      always() && 
      needs.setup.outputs.deploy_services == 'true' &&
      (needs.build-stt.result == 'success' || needs.build-stt.result == 'skipped') &&
      (needs.build-tts.result == 'success' || needs.build-tts.result == 'skipped')
    outputs:
      gpu_available: ${{ steps.check_gpu.outputs.available }}
      
    steps:
      - name: 📊 Check GPU Availability
        id: check_gpu
        run: |
          echo "🔍 Checking GPU resources..."
          
          # Get GPU capacity and allocation
          GPU_CAPACITY=$(kubectl get nodes -o json | jq -r '.items[0].status.allocatable."nvidia.com/gpu" // "0"')
          GPU_ALLOCATED=$(kubectl get pods -n $NAMESPACE -o json | \
            jq '[.items[] | select(.spec.containers[].resources.requests."nvidia.com/gpu" != null) | 
            .spec.containers[].resources.requests."nvidia.com/gpu" // "0" | tonumber] | add // 0')
          
          GPU_AVAILABLE=$((GPU_CAPACITY - GPU_ALLOCATED))
          
          echo "📊 GPU Status:"
          echo "  Capacity: $GPU_CAPACITY"
          echo "  Allocated: $GPU_ALLOCATED"
          echo "  Available: $GPU_AVAILABLE"
          
          # Check if we have enough GPUs for deployment (need 2: one for STT, one for TTS)
          if [ "$GPU_AVAILABLE" -ge 2 ]; then
            echo "✅ Sufficient GPU resources available"
            echo "available=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Insufficient GPU resources (need 2, have $GPU_AVAILABLE)"
            echo "available=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 🔄 Free GPU Resources (if needed)
        if: steps.check_gpu.outputs.available == 'false' || needs.setup.outputs.force_gpu_restart == 'true'
        run: |
          echo "🔄 Freeing GPU resources by scaling down GPU services..."
          
          # Scale down GPU services to 0
          for service in june-stt june-tts; do
            if kubectl get deployment $service -n $NAMESPACE &>/dev/null; then
              echo "⬇️ Scaling down $service..."
              kubectl scale deployment $service -n $NAMESPACE --replicas=0
            fi
          done
          
          # Wait for pods to terminate and GPU to be freed
          echo "⏳ Waiting for GPU pods to terminate..."
          kubectl wait --for=delete pod \
            -l 'app in (june-stt,june-tts)' \
            -n $NAMESPACE \
            --timeout=120s || echo "⚠️ Some pods taking longer to terminate"
          
          # Give extra time for GPU to be completely freed
          sleep 15
          
          # Verify GPU is free
          GPU_ALLOCATED=$(kubectl get pods -n $NAMESPACE -o json | \
            jq '[.items[] | select(.spec.containers[].resources.requests."nvidia.com/gpu" != null) | 
            .spec.containers[].resources.requests."nvidia.com/gpu" // "0" | tonumber] | add // 0')
          
          echo "✅ GPU freed. Currently allocated: $GPU_ALLOCATED"

  # ============================================================================
  # DEPLOYMENT WITH GPU-AWARE ORDERING
  # ============================================================================

  deploy:
    name: 🚀 Deploy to Kubernetes
    runs-on: self-hosted
    needs: [setup, build-stt, build-tts, build-orchestrator, build-idp, manage-gpu-resources]
    if: |
      always() && 
      needs.setup.outputs.deploy_services == 'true' &&
      (needs.build-stt.result == 'success' || needs.build-stt.result == 'skipped') &&
      (needs.build-tts.result == 'success' || needs.build-tts.result == 'skipped') &&
      (needs.build-orchestrator.result == 'success' || needs.build-orchestrator.result == 'skipped') &&
      (needs.build-idp.result == 'success' || needs.build-idp.result == 'skipped')

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Verify Kubernetes
        run: |
          echo "🔍 Checking Kubernetes cluster..."
          kubectl cluster-info
          kubectl get nodes -o wide

      - name: 🏗️ Create Namespace
        run: |
          kubectl get ns $NAMESPACE || kubectl create ns $NAMESPACE

      - name: 🔐 Create Secrets
        run: |
          # Docker Hub secret
          kubectl create secret docker-registry dockerhub-secret \
            --docker-server=docker.io \
            --docker-username='${{ secrets.DOCKERHUB_USERNAME }}' \
            --docker-password='${{ secrets.DOCKERHUB_TOKEN }}' \
            --docker-email='${{ secrets.DOCKERHUB_EMAIL }}' \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # June secrets
          kubectl create secret generic june-secrets \
            --from-literal=gemini-api-key='${{ secrets.GEMINI_API_KEY }}' \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: 🎮 Label GPU Nodes
        run: |
          echo "🏷️ Labeling nodes for GPU workloads..."
          for node in $(kubectl get nodes -o name); do
            kubectl label $node gpu=true --overwrite || true
          done

      - name: 🗄️ Deploy PostgreSQL
        run: |
          echo "🗄️ Deploying PostgreSQL..."
          if ! kubectl get statefulset postgresql -n $NAMESPACE &>/dev/null; then
            kubectl apply -f k8s/postgresql-deployment.yaml
          else
            echo "✅ PostgreSQL already exists"
          fi
          
          echo "⏳ Waiting for PostgreSQL..."
          kubectl wait --for=condition=ready pod -l app=postgresql -n $NAMESPACE --timeout=180s || {
            echo "⚠️ PostgreSQL not ready yet"
          }

      - name: 🚀 Deploy Non-GPU Services First
        run: |
          echo "🚀 Deploying non-GPU services (IDP, Orchestrator)..."
          
          # Deploy IDP
          kubectl apply -f k8s/june-idp-deployment.yaml || echo "⚠️ IDP deployment had issues"
          
          # Deploy Orchestrator
          kubectl apply -f k8s/june-orchestrator-deployment.yaml || echo "⚠️ Orchestrator deployment had issues"
          
          echo "⏳ Waiting for non-GPU services to be ready..."
          kubectl wait --for=condition=available deployment/june-idp -n $NAMESPACE --timeout=300s || echo "⚠️ IDP taking longer"
          kubectl wait --for=condition=available deployment/june-orchestrator -n $NAMESPACE --timeout=300s || echo "⚠️ Orchestrator taking longer"

      - name: 🎮 Deploy GPU Services Sequentially
        run: |
          echo "🎮 Deploying GPU services one at a time..."
          
          # Deploy STT first
          echo "📥 Deploying june-stt..."
          kubectl apply -f k8s/june-stt-deployment.yaml
          
          echo "⏳ Waiting for STT to acquire GPU and be ready..."
          kubectl wait --for=condition=available deployment/june-stt -n $NAMESPACE --timeout=300s || {
            echo "⚠️ STT deployment taking longer than expected"
            kubectl describe pod -l app=june-stt -n $NAMESPACE | tail -20
          }
          
          # Small delay to ensure GPU is properly allocated
          sleep 10
          
          # Deploy TTS second
          echo "🔊 Deploying june-tts..."
          kubectl apply -f k8s/june-tts-deployment.yaml
          
          echo "⏳ Waiting for TTS to acquire GPU and be ready..."
          kubectl wait --for=condition=available deployment/june-tts -n $NAMESPACE --timeout=300s || {
            echo "⚠️ TTS deployment taking longer than expected"
            kubectl describe pod -l app=june-tts -n $NAMESPACE | tail -20
          }

      - name: 🌐 Apply Ingress
        run: |
          echo "🌐 Applying ingress..."
          kubectl apply -f k8s/ingress.yaml
          echo "✅ Ingress applied"

      - name: 🔐 Monitor Certificate
        run: |
          echo "🔐 Monitoring Let's Encrypt certificate..."
          sleep 20
          
          for i in {1..20}; do
            if ! kubectl get certificate allsafe-tls -n $NAMESPACE &>/dev/null; then
              echo "⏳ Waiting for certificate resource... ($i/20)"
              sleep 15
              continue
            fi
            
            STATUS=$(kubectl get certificate allsafe-tls -n $NAMESPACE \
              -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "Unknown")
            
            if [ "$STATUS" = "True" ]; then
              echo "✅ Certificate issued!"
              kubectl get certificate allsafe-tls -n $NAMESPACE
              break
            else
              MESSAGE=$(kubectl get certificate allsafe-tls -n $NAMESPACE \
                -o jsonpath='{.status.conditions[?(@.type=="Ready")].message}' 2>/dev/null || echo "Processing")
              echo "⏳ $MESSAGE ($i/20)"
              sleep 15
            fi
          done

      - name: 📊 Deployment Summary
        if: always()
        run: |
          echo ""
          echo "======================================================"
          echo "📊 Deployment Status"
          echo "======================================================"
          echo ""
          echo "🚀 Deployments:"
          kubectl get deployments -n $NAMESPACE -o wide
          echo ""
          echo "📦 Pods:"
          kubectl get pods -n $NAMESPACE -o wide
          echo ""
          echo "🎮 GPU Allocation:"
          kubectl describe nodes | grep -A 10 "Allocated resources:" | grep nvidia || echo "No GPU info"
          echo ""
          echo "🌐 Services:"
          kubectl get services -n $NAMESPACE
          echo ""
          echo "🔐 Ingress:"
          kubectl get ingress -n $NAMESPACE
          echo ""
          echo "🔒 Certificates:"
          kubectl get certificate -n $NAMESPACE
          echo ""
          echo "======================================================"
          
          # Check for pending pods
          PENDING=$(kubectl get pods -n $NAMESPACE --field-selector=status.phase=Pending --no-headers 2>/dev/null | wc -l)
          if [ "$PENDING" -gt 0 ]; then
            echo "⚠️ WARNING: $PENDING pod(s) still pending"
            kubectl get pods -n $NAMESPACE --field-selector=status.phase=Pending
            echo ""
            echo "Describing pending pods:"
            kubectl describe pods -n $NAMESPACE --field-selector=status.phase=Pending | grep -A 10 "Events:"
          fi