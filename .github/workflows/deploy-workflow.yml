name: 🚀 June Services CI/CD (Fixed - Simple Certificates)

on:
  push:
    branches: [ main, develop ]
    paths-ignore: [ 'README.md', 'docs/**', '.gitignore' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io/${{ secrets.DOCKERHUB_USERNAME }}
  NAMESPACE: june-services
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: 🔨 Build & Push Images
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        service: [june-stt, june-tts, june-orchestrator, june-idp]
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: 🏗️ Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    name: 🚀 Deploy to K8s
    runs-on: self-hosted
    needs: build-and-push
    if: always() && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped')

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Verify Kubernetes
        run: |
          echo "🔍 Checking Kubernetes cluster..."
          kubectl cluster-info
          kubectl get nodes -o wide

      - name: 🏗️ Create Namespace
        run: |
          kubectl get ns $NAMESPACE || kubectl create ns $NAMESPACE

      - name: 🔐 Create Secrets
        run: |
          # Docker Hub secret
          kubectl create secret docker-registry dockerhub-secret \
            --docker-server=docker.io \
            --docker-username='${{ secrets.DOCKERHUB_USERNAME }}' \
            --docker-password='${{ secrets.DOCKERHUB_TOKEN }}' \
            --docker-email='${{ secrets.DOCKERHUB_EMAIL }}' \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # June secrets
          kubectl create secret generic june-secrets \
            --from-literal=gemini-api-key='${{ secrets.GEMINI_API_KEY }}' \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: 🎮 Label GPU Nodes
        run: |
          echo "🏷️  Labeling nodes for GPU workloads..."
          for node in $(kubectl get nodes -o name); do
            kubectl label $node gpu=true --overwrite || true
          done

      - name: 🗄️ Deploy PostgreSQL
        run: |
          echo "🗄️ Deploying PostgreSQL..."
          if ! kubectl get statefulset postgresql -n $NAMESPACE &>/dev/null; then
            kubectl apply -f k8s/postgresql-deployment.yaml
          else
            echo "✅ PostgreSQL already exists"
          fi
          
          echo "⏳ Waiting for PostgreSQL..."
          kubectl wait --for=condition=ready pod -l app=postgresql -n $NAMESPACE --timeout=180s || {
            echo "⚠️ PostgreSQL not ready yet"
          }

      - name: 🚀 Deploy Services
        run: |
          echo "🚀 Deploying June services..."
          kubectl apply -f k8s/complete-manifests.yaml

      - name: 🌐 Apply Ingress (SIMPLE - Let's Encrypt handles the rest)
        run: |
          echo "🌐 Applying ingress with automatic Let's Encrypt..."
          
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: june-ingress
            namespace: $NAMESPACE
            annotations:
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
              kubernetes.io/ingress.class: "nginx"
              nginx.ingress.kubernetes.io/ssl-redirect: "false"
              nginx.ingress.kubernetes.io/enable-cors: "true"
              nginx.ingress.kubernetes.io/cors-allow-origin: "*"
              nginx.ingress.kubernetes.io/proxy-body-size: "100m"
              nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
              nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
          spec:
            ingressClassName: nginx
            tls:
            - hosts:
              - api.allsafe.world
              - idp.allsafe.world
              - stt.allsafe.world
              - tts.allsafe.world
              secretName: allsafe-tls
            rules:
            - host: api.allsafe.world
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: june-orchestrator
                      port:
                        number: 8080
            - host: idp.allsafe.world
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: june-idp
                      port:
                        number: 8080
            - host: stt.allsafe.world
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: june-stt
                      port:
                        number: 8080
            - host: tts.allsafe.world
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: june-tts
                      port:
                        number: 8000
          EOF
          
          echo "✅ Ingress applied - cert-manager will handle certificates"

      - name: ⏳ Wait for Deployments
        run: |
          echo "⏳ Waiting for deployments to be ready..."
          for deployment in $(kubectl get deployments -n $NAMESPACE -o jsonpath='{.items[*].metadata.name}'); do
            kubectl rollout status deployment/$deployment -n $NAMESPACE --timeout=300s || {
              echo "⚠️ $deployment taking longer than expected"
            }
          done

      - name: 🔐 Monitor Certificate Issuance
        run: |
          echo "🔐 Monitoring Let's Encrypt certificate issuance..."
          echo ""
          echo "This happens automatically via cert-manager:"
          echo "1. cert-manager sees the ingress"
          echo "2. Requests certificate from Let's Encrypt"
          echo "3. Let's Encrypt validates via HTTP-01 challenge"
          echo "4. Certificate issued and stored in allsafe-tls secret"
          echo ""
          
          # Give cert-manager time to start
          sleep 20
          
          # Monitor for up to 5 minutes
          for i in {1..20}; do
            if ! kubectl get certificate allsafe-tls -n $NAMESPACE &>/dev/null; then
              echo "⏳ Waiting for certificate resource... ($i/20)"
              sleep 15
              continue
            fi
            
            STATUS=$(kubectl get certificate allsafe-tls -n $NAMESPACE \
              -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "Unknown")
            
            if [ "$STATUS" = "True" ]; then
              echo "✅ Certificate successfully issued!"
              echo ""
              kubectl get certificate allsafe-tls -n $NAMESPACE
              echo ""
              
              ISSUER=$(kubectl get certificate allsafe-tls -n $NAMESPACE -o jsonpath='{.spec.issuerRef.name}')
              NOT_AFTER=$(kubectl get certificate allsafe-tls -n $NAMESPACE -o jsonpath='{.status.notAfter}')
              
              echo "📋 Certificate Details:"
              echo "   Issuer: $ISSUER"
              echo "   Valid until: $NOT_AFTER"
              echo "   Auto-renews: Yes"
              break
            else
              MESSAGE=$(kubectl get certificate allsafe-tls -n $NAMESPACE \
                -o jsonpath='{.status.conditions[?(@.type=="Ready")].message}' 2>/dev/null || echo "Processing")
              echo "⏳ Certificate status: $MESSAGE ($i/20)"
              sleep 15
            fi
          done
          
          # Show final status regardless
          echo ""
          echo "📊 Final Certificate Status:"
          kubectl get certificate -n $NAMESPACE || echo "No certificates yet"
          echo ""
          echo "🔍 If certificate is pending, check:"
          echo "   kubectl describe certificate allsafe-tls -n $NAMESPACE"
          echo "   kubectl get challenge -n $NAMESPACE"
          echo "   kubectl logs -n cert-manager deploy/cert-manager"

      - name: 📊 Final Status
        if: always()
        run: |
          echo ""
          echo "======================================================"
          echo "📊 Deployment Summary"
          echo "======================================================"
          echo ""
          echo "🚀 Deployments:"
          kubectl get deployments -n $NAMESPACE -o wide || true
          echo ""
          echo "📦 Pods:"
          kubectl get pods -n $NAMESPACE -o wide || true
          echo ""
          echo "🌐 Services:"
          kubectl get services -n $NAMESPACE || true
          echo ""
          echo "🔐 Ingress:"
          kubectl get ingress -n $NAMESPACE || true
          echo ""
          echo "🔒 Certificates:"
          kubectl get certificate -n $NAMESPACE || true
          echo ""
          echo "======================================================"
          echo "✅ Deployment Complete!"
          echo ""
          echo "🌍 Your services are available at:"
          echo "   • https://idp.allsafe.world (Keycloak)"
          echo "   • https://api.allsafe.world (Orchestrator)"
          echo "   • https://stt.allsafe.world (Speech-to-Text)"
          echo "   • https://tts.allsafe.world (Text-to-Speech)"
          echo ""
          echo "⏳ If certificate is still pending:"
          echo "   • This is normal, can take 2-5 minutes"
          echo "   • cert-manager is working automatically"
          echo "   • Check: kubectl get certificate -n $NAMESPACE -w"
          echo "======================================================"