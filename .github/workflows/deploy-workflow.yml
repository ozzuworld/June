# .github/workflows/deploy-workflow.yml
name: 🚀 Deploy June Services

on:
  push:
    branches: [master, main]
    paths:
      - 'services/**'
      - '.github/workflows/**'
  pull_request:
    branches: [master, main]
    paths:
      - 'services/**'
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (orchestrator, stt, tts, or all)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - orchestrator
          - stt
          - tts

env:
  GCP_PROJECT_ID: main-buffer-469817-v7
  GCP_REGION: us-central1
  GKE_CLUSTER: autopilot-cluster-1
  GKE_NAMESPACE: june-services

jobs:
  # 🔍 Detect which services changed
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      orchestrator: ${{ steps.filter.outputs.orchestrator }}
      stt: ${{ steps.filter.outputs.stt }}
      tts: ${{ steps.filter.outputs.tts }}
      deploy_orchestrator: ${{ steps.should-deploy.outputs.orchestrator }}
      deploy_stt: ${{ steps.should-deploy.outputs.stt }}
      deploy_tts: ${{ steps.should-deploy.outputs.tts }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check path filters
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            orchestrator:
              - 'services/june-orchestrator/**'
              - '.github/workflows/deploy-workflow.yml'
            stt:
              - 'services/june-stt/**'
              - 'services/shared/**'
              - '.github/workflows/deploy-workflow.yml'
            tts:
              - 'services/june-tts/**'
              - 'services/shared/**'
              - '.github/workflows/deploy-workflow.yml'

      - name: 🎯 Determine deployment targets
        id: should-deploy
        run: |
          # Manual dispatch - deploy specified service(s)
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            SERVICE="${{ github.event.inputs.service }}"
            if [ "$SERVICE" == "all" ]; then
              echo "orchestrator=true" >> $GITHUB_OUTPUT
              echo "stt=true" >> $GITHUB_OUTPUT
              echo "tts=true" >> $GITHUB_OUTPUT
            else
              echo "orchestrator=$( [ '$SERVICE' == 'orchestrator' ] && echo 'true' || echo 'false' )" >> $GITHUB_OUTPUT
              echo "stt=$( [ '$SERVICE' == 'stt' ] && echo 'true' || echo 'false' )" >> $GITHUB_OUTPUT
              echo "tts=$( [ '$SERVICE' == 'tts' ] && echo 'true' || echo 'false' )" >> $GITHUB_OUTPUT
            fi
          else
            # Automatic - deploy only changed services
            echo "orchestrator=${{ steps.filter.outputs.orchestrator }}" >> $GITHUB_OUTPUT
            echo "stt=${{ steps.filter.outputs.stt }}" >> $GITHUB_OUTPUT
            echo "tts=${{ steps.filter.outputs.tts }}" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Summary
        run: |
          echo "### 🔍 Change Detection Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Changed | Will Deploy |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Orchestrator | ${{ steps.filter.outputs.orchestrator }} | ${{ steps.should-deploy.outputs.orchestrator }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎤 STT | ${{ steps.filter.outputs.stt }} | ${{ steps.should-deploy.outputs.stt }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔊 TTS | ${{ steps.filter.outputs.tts }} | ${{ steps.should-deploy.outputs.tts }} |" >> $GITHUB_STEP_SUMMARY

  # 🎯 Build and Push Orchestrator
  build-orchestrator:
    name: 🎯 Build Orchestrator
    needs: detect-changes
    if: needs.detect-changes.outputs.deploy_orchestrator == 'true'
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ozzuworld/june-orchestrator
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./services/june-orchestrator
          file: ./services/june-orchestrator/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: ✅ Build summary
        run: |
          echo "### 🎯 Orchestrator Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY

  # 🎤 Build and Push STT
  build-stt:
    name: 🎤 Build STT
    needs: detect-changes
    if: needs.detect-changes.outputs.deploy_stt == 'true'
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ozzuworld/june-stt
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./services/june-stt
          file: ./services/june-stt/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: ✅ Build summary
        run: |
          echo "### 🎤 STT Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY

  # 🔊 Build and Push TTS
  build-tts:
    name: 🔊 Build TTS
    needs: detect-changes
    if: needs.detect-changes.outputs.deploy_tts == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 120  # TTS build takes longer
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ozzuworld/june-tts
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./services/june-tts
          file: ./services/june-tts/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: ✅ Build summary
        run: |
          echo "### 🔊 TTS Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY

  # 🚀 Deploy to GKE
  deploy-to-gke:
    name: 🚀 Deploy to GKE
    needs: [detect-changes, build-orchestrator, build-stt, build-tts]
    if: |
      always() && 
      github.ref == 'refs/heads/master' &&
      (needs.build-orchestrator.result == 'success' ||
       needs.build-stt.result == 'success' ||
       needs.build-tts.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ☁️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🔧 Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: 🎯 Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --region ${{ env.GCP_REGION }} \
            --project ${{ env.GCP_PROJECT_ID }}

      - name: 🔄 Update image tags in deployments
        run: |
          echo "### 🚀 Deployment Updates" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Update Orchestrator
          if [ "${{ needs.build-orchestrator.result }}" == "success" ]; then
            echo "🎯 Updating Orchestrator deployment..." | tee -a $GITHUB_STEP_SUMMARY
            kubectl set image deployment/june-orchestrator \
              orchestrator=ozzuworld/june-orchestrator:${{ github.sha }} \
              -n ${{ env.GKE_NAMESPACE }}
            echo "✅ Orchestrator image updated" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Update STT
          if [ "${{ needs.build-stt.result }}" == "success" ]; then
            echo "🎤 Updating STT deployment..." | tee -a $GITHUB_STEP_SUMMARY
            kubectl set image deployment/june-stt \
              stt=ozzuworld/june-stt:${{ github.sha }} \
              -n ${{ env.GKE_NAMESPACE }}
            echo "✅ STT image updated" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Update TTS
          if [ "${{ needs.build-tts.result }}" == "success" ]; then
            echo "🔊 Updating TTS deployment..." | tee -a $GITHUB_STEP_SUMMARY
            kubectl set image deployment/june-tts \
              tts=ozzuworld/june-tts:${{ github.sha }} \
              -n ${{ env.GKE_NAMESPACE }}
            echo "✅ TTS image updated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ⏳ Wait for rollouts
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⏳ Waiting for Rollouts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Wait for Orchestrator
          if [ "${{ needs.build-orchestrator.result }}" == "success" ]; then
            echo "🎯 Waiting for Orchestrator rollout..."
            if kubectl rollout status deployment/june-orchestrator -n ${{ env.GKE_NAMESPACE }} --timeout=5m; then
              echo "✅ Orchestrator deployed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Orchestrator deployment failed" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          fi
          
          # Wait for STT
          if [ "${{ needs.build-stt.result }}" == "success" ]; then
            echo "🎤 Waiting for STT rollout..."
            if kubectl rollout status deployment/june-stt -n ${{ env.GKE_NAMESPACE }} --timeout=10m; then
              echo "✅ STT deployed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ STT deployment failed" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          fi
          
          # Wait for TTS
          if [ "${{ needs.build-tts.result }}" == "success" ]; then
            echo "🔊 Waiting for TTS rollout..."
            if kubectl rollout status deployment/june-tts -n ${{ env.GKE_NAMESPACE }} --timeout=10m; then
              echo "✅ TTS deployed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ TTS deployment failed" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          fi

      - name: 🏥 Health checks
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏥 Health Check Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get pod status
          echo "#### Pod Status" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          kubectl get pods -n ${{ env.GKE_NAMESPACE }} >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Check services
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Service Status" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          kubectl get svc -n ${{ env.GKE_NAMESPACE }} >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 📊 Deployment summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Final Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Build | Deploy |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Orchestrator | ${{ needs.build-orchestrator.result }} | $([ '${{ needs.build-orchestrator.result }}' == 'success' ] && echo '✅' || echo '⏭️') |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎤 STT | ${{ needs.build-stt.result }} | $([ '${{ needs.build-stt.result }}' == 'success' ] && echo '✅' || echo '⏭️') |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔊 TTS | ${{ needs.build-tts.result }} | $([ '${{ needs.build-tts.result }}' == 'success' ] && echo '✅' || echo '⏭️') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Git SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

  # 🧪 Integration Tests (Optional)
  integration-tests:
    name: 🧪 Integration Tests
    needs: [deploy-to-gke]
    if: |
      always() &&
      needs.deploy-to-gke.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ☁️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🎯 Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --region ${{ env.GCP_REGION }} \
            --project ${{ env.GCP_PROJECT_ID }}

      - name: 🧪 Run health checks
        run: |
          echo "### 🧪 Service Health Checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test Orchestrator
          echo "Testing Orchestrator..."
          if kubectl exec -n ${{ env.GKE_NAMESPACE }} deployment/june-orchestrator -- \
            curl -sf http://localhost:8080/healthz > /dev/null; then
            echo "✅ Orchestrator: Healthy" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Orchestrator: Unhealthy" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test STT
          echo "Testing STT..."
          if kubectl exec -n ${{ env.GKE_NAMESPACE }} deployment/june-stt -- \
            curl -sf http://localhost:8080/healthz > /dev/null; then
            echo "✅ STT: Healthy" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ STT: Unhealthy" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test TTS
          echo "Testing TTS..."
          if kubectl exec -n ${{ env.GKE_NAMESPACE }} deployment/june-tts -- \
            curl -sf http://localhost:8000/healthz > /dev/null; then
            echo "✅ TTS: Healthy" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ TTS: Unhealthy" >> $GITHUB_STEP_SUMMARY
          fi

  # 🔔 Notify on failure
  notify-failure:
    name: 🔔 Notify Failure
    needs: [build-orchestrator, build-stt, build-tts, deploy-to-gke]
    if: |
      always() &&
      (needs.build-orchestrator.result == 'failure' ||
       needs.build-stt.result == 'failure' ||
       needs.build-tts.result == 'failure' ||
       needs.deploy-to-gke.result == 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: 📧 Create failure summary
        run: |
          echo "# ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "One or more jobs failed. Please check the workflow logs." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Failed Jobs:**" >> $GITHUB_STEP_SUMMARY
          [ "${{ needs.build-orchestrator.result }}" == "failure" ] && echo "- 🎯 Orchestrator Build" >> $GITHUB_STEP_SUMMARY
          [ "${{ needs.build-stt.result }}" == "failure" ] && echo "- 🎤 STT Build" >> $GITHUB_STEP_SUMMARY
          [ "${{ needs.build-tts.result }}" == "failure" ] && echo "- 🔊 TTS Build" >> $GITHUB_STEP_SUMMARY
          [ "${{ needs.deploy-to-gke.result }}" == "failure" ] && echo "- 🚀 GKE Deployment" >> $GITHUB_STEP_SUMMARY