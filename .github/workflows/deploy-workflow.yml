name: üöÄ June Services Deploy (Optimized)

on:
  push:
    branches: [ master, develop ]
    paths-ignore: [ 'README.md', 'docs/**', '.gitignore' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      build_images:
        description: 'üî® Build Docker images?'
        required: true
        default: true
        type: boolean
      deploy_services:
        description: 'üöÄ Deploy to Kubernetes?'
        required: true
        default: true
        type: boolean
      services:
        description: 'üì¶ Services to build/deploy (comma-separated, or "all")'
        required: false
        default: 'all'
        type: string

env:
  REGISTRY: docker.io/${{ secrets.DOCKERHUB_USERNAME }}
  NAMESPACE: june-services

permissions:
  contents: read
  packages: write

jobs:
  # ============================================================================
  # SETUP
  # ============================================================================
  
  setup:
    name: üìã Setup Build Matrix
    runs-on: self-hosted
    outputs:
      build_images: ${{ steps.config.outputs.build_images }}
      deploy_services: ${{ steps.config.outputs.deploy_services }}
      services: ${{ steps.config.outputs.services }}
    steps:
      - name: üìù Configure workflow
        id: config
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUILD="${{ github.event.inputs.build_images }}"
            DEPLOY="${{ github.event.inputs.deploy_services }}"
            SERVICES="${{ github.event.inputs.services }}"
          else
            BUILD="true"
            DEPLOY="true"
            SERVICES="all"
          fi
          
          echo "build_images=$BUILD" >> $GITHUB_OUTPUT
          echo "deploy_services=$DEPLOY" >> $GITHUB_OUTPUT
          echo "services=$SERVICES" >> $GITHUB_OUTPUT
          
          echo "üìã Configuration:"
          echo "  Build images: $BUILD"
          echo "  Deploy services: $DEPLOY"
          echo "  Services: $SERVICES"

  # ============================================================================
  # BUILD IMAGES
  # ============================================================================

  build-stt:
    name: üî® Build june-stt
    runs-on: self-hosted
    needs: setup
    if: needs.setup.outputs.build_images == 'true' && (needs.setup.outputs.services == 'all' || contains(needs.setup.outputs.services, 'stt'))
    steps:
      - name: üì¶ Checkout
        uses: actions/checkout@v4

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üìù Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/june-stt
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: üèóÔ∏è Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./June/services/june-stt
          file: ./June/services/june-stt/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=stt
          cache-to: type=gha,mode=max,scope=stt
          platforms: linux/amd64

  build-tts:
    name: üî® Build june-tts
    runs-on: self-hosted
    needs: setup
    if: needs.setup.outputs.build_images == 'true' && (needs.setup.outputs.services == 'all' || contains(needs.setup.outputs.services, 'tts'))
    steps:
      - name: üì¶ Checkout
        uses: actions/checkout@v4

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üìù Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/june-tts
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: üèóÔ∏è Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./June/services/june-tts
          file: ./June/services/june-tts/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=tts
          cache-to: type=gha,mode=max,scope=tts
          platforms: linux/amd64

  build-orchestrator:
    name: üî® Build june-orchestrator
    runs-on: self-hosted
    needs: setup
    if: needs.setup.outputs.build_images == 'true' && (needs.setup.outputs.services == 'all' || contains(needs.setup.outputs.services, 'orchestrator'))
    steps:
      - name: üì¶ Checkout
        uses: actions/checkout@v4

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üìù Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/june-orchestrator
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: üèóÔ∏è Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./June/services/june-orchestrator
          file: ./June/services/june-orchestrator/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=orchestrator
          cache-to: type=gha,mode=max,scope=orchestrator
          platforms: linux/amd64

  build-idp:
    name: üî® Build june-idp
    runs-on: self-hosted
    needs: setup
    if: needs.setup.outputs.build_images == 'true' && (needs.setup.outputs.services == 'all' || contains(needs.setup.outputs.services, 'idp'))
    steps:
      - name: üì¶ Checkout
        uses: actions/checkout@v4

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üìù Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/june-idp
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: üèóÔ∏è Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./June/services/june-idp
          file: ./June/services/june-idp/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=idp
          cache-to: type=gha,mode=max,scope=idp
          platforms: linux/amd64

  # ============================================================================
  # DEPLOYMENT (UNIFIED APPROACH)
  # ============================================================================

  deploy:
    name: üöÄ Deploy to Kubernetes
    runs-on: self-hosted
    needs: [setup, build-stt, build-tts, build-orchestrator, build-idp]
    if: |
      always() && 
      needs.setup.outputs.deploy_services == 'true' &&
      (needs.build-stt.result == 'success' || needs.build-stt.result == 'skipped') &&
      (needs.build-tts.result == 'success' || needs.build-tts.result == 'skipped') &&
      (needs.build-orchestrator.result == 'success' || needs.build-orchestrator.result == 'skipped') &&
      (needs.build-idp.result == 'success' || needs.build-idp.result == 'skipped')

    steps:
      - name: üì¶ Checkout
        uses: actions/checkout@v4

      # ========================================================================
      # Quick Infrastructure Check
      # ========================================================================
      
      - name: üîç Quick Infrastructure Check
        run: |
          echo "üîç Checking infrastructure readiness..."
          
          if ! kubectl cluster-info &>/dev/null; then
            echo "‚ùå Cannot connect to Kubernetes cluster!"
            exit 1
          fi
          
          if ! kubectl get ns $NAMESPACE &>/dev/null; then
            echo "‚ùå Namespace '$NAMESPACE' doesn't exist!"
            exit 1
          fi
          
          echo "‚úÖ Basic infrastructure ready"

      # ========================================================================
      # Generate Manifests with Domain Configuration
      # ========================================================================
      
      - name: üåê Generate Deployment Manifests
        run: |
          echo "üåê Generating deployment manifests..."
          
          # Load domain config
          if [ -f "/root/.june-config/domain-config.env" ]; then
            source /root/.june-config/domain-config.env
            echo "‚úÖ Using configured domains"
          else
            echo "‚ö†Ô∏è  No domain config found, using defaults"
            PRIMARY_DOMAIN="allsafe.world"
            API_DOMAIN="api.allsafe.world"
            IDP_DOMAIN="idp.allsafe.world"
            STT_DOMAIN="stt.allsafe.world"
            TTS_DOMAIN="tts.allsafe.world"
            TURN_DOMAIN="turn.allsafe.world"
            CERT_SECRET_NAME="allsafe-wildcard-tls"
            STUNNER_USERNAME="june-user"
            STUNNER_PASSWORD="Pokemon123!"
          fi
          
          # Generate June services manifest
          cp k8s/complete-manifests.yaml /tmp/june-services.yaml
          
          # Replace domain placeholders
          sed -i "s/allsafe-wildcard-tls/${CERT_SECRET_NAME}/g" /tmp/june-services.yaml
          sed -i "s/\*.allsafe.world/*.${PRIMARY_DOMAIN}/g" /tmp/june-services.yaml
          sed -i "s/api.allsafe.world/${API_DOMAIN}/g" /tmp/june-services.yaml
          sed -i "s/idp.allsafe.world/${IDP_DOMAIN}/g" /tmp/june-services.yaml
          sed -i "s/stt.allsafe.world/${STT_DOMAIN}/g" /tmp/june-services.yaml
          sed -i "s/tts.allsafe.world/${TTS_DOMAIN}/g" /tmp/june-services.yaml
          
          # Replace WebRTC placeholders
          sed -i "s/TURN_DOMAIN_PLACEHOLDER/${TURN_DOMAIN}/g" /tmp/june-services.yaml
          sed -i "s/STUNNER_USERNAME_PLACEHOLDER/${STUNNER_USERNAME}/g" /tmp/june-services.yaml
          sed -i "s/STUNNER_PASSWORD_PLACEHOLDER/${STUNNER_PASSWORD}/g" /tmp/june-services.yaml
          
          # Generate STUNner manifest (FIXED - no gateway resource)
          if kubectl get namespace stunner &>/dev/null; then
            echo "‚úÖ STUNner namespace found, deploying STUNner resources"
            
            if [ -f "k8s/stunner-manifests.yaml" ]; then
              cp k8s/stunner-manifests.yaml /tmp/stunner-resources.yaml
              sed -i "s/STUNNER_REALM_PLACEHOLDER/${TURN_DOMAIN}/g" /tmp/stunner-resources.yaml
              sed -i "s/STUNNER_USERNAME_PLACEHOLDER/${STUNNER_USERNAME}/g" /tmp/stunner-resources.yaml
              sed -i "s/STUNNER_PASSWORD_PLACEHOLDER/${STUNNER_PASSWORD}/g" /tmp/stunner-resources.yaml
              echo "‚úÖ STUNner manifest ready"
            else
              echo "‚ö†Ô∏è  STUNner manifest not found, skipping STUNner deployment"
            fi
          else
            echo "‚ö†Ô∏è  STUNner not installed, skipping STUNner deployment"
          fi
          
          echo "‚úÖ Manifests generated"

      # ========================================================================
      # Update Application Secrets
      # ========================================================================
      
      - name: üîê Update Application Secrets
        run: |
          echo "üîê Updating application secrets..."
          
          if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
            echo "‚ùå ERROR: GEMINI_API_KEY not set in GitHub secrets!"
            exit 1
          fi
          
          kubectl create secret generic june-secrets \
            --from-literal=gemini-api-key='${{ secrets.GEMINI_API_KEY }}' \
            --from-literal=keycloak-client-secret='PLACEHOLDER' \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "‚úÖ Application secrets updated"

      # ========================================================================
      # Deploy STUNner (Gateway API - Operator Managed)
      # ========================================================================
      
      - name: üîó Deploy STUNner Gateway Resources
        run: |
          echo "üîó Deploying STUNner Gateway API resources..."
          
          # Check if operator is installed
          if ! kubectl get deployment stunner-gateway-operator -n stunner-system &>/dev/null; then
            echo "‚ùå STUNner operator not installed!"
            echo "Run: helm install stunner-gateway-operator stunner/stunner-gateway-operator --namespace stunner-system"
            exit 1
          fi
          
          # Apply Gateway API resources
          if [ -f "/tmp/stunner-resources.yaml" ]; then
            kubectl apply -f /tmp/stunner-resources.yaml
            
            echo "‚è≥ Waiting for Gateway to be Programmed..."
            kubectl wait --for=condition=Programmed gateway/june-stunner-gateway \
              -n stunner --timeout=300s || {
              echo "‚ö†Ô∏è  Gateway taking longer than expected"
              kubectl describe gateway june-stunner-gateway -n stunner
            }
            
            # Get Gateway address
            GATEWAY_ADDR=$(kubectl get gateway june-stunner-gateway -n stunner \
              -o jsonpath='{.status.addresses[0].value}' 2>/dev/null || echo "pending")
            
            echo "‚úÖ STUNner Gateway deployed"
            echo "   Address: $GATEWAY_ADDR:3478"
          else
            echo "‚ö†Ô∏è  STUNner manifest not found"
          fi

      # ========================================================================
      # Deploy June Services
      # ========================================================================
      
      - name: üöÄ Deploy June Services
        run: |
          echo "üöÄ Deploying June services..."
          kubectl apply -f /tmp/june-services.yaml
          echo "‚úÖ June services deployed"

      # ========================================================================
      # Wait for Services
      # ========================================================================
      
      - name: ‚è≥ Wait for Services
        run: |
          echo "‚è≥ Waiting for services to be ready..."
          
          echo "Waiting for PostgreSQL..."
          kubectl wait --for=condition=ready pod -l app=postgresql -n $NAMESPACE --timeout=180s || {
            echo "‚ö†Ô∏è  PostgreSQL taking longer than expected"
            kubectl get pods -l app=postgresql -n $NAMESPACE
          }
          
          echo "Waiting for Keycloak (IDP)..."
          kubectl rollout status deployment/june-idp -n $NAMESPACE --timeout=300s || true
          
          echo "Waiting for Orchestrator..."
          kubectl rollout status deployment/june-orchestrator -n $NAMESPACE --timeout=180s || true
          
          echo "Waiting for GPU services..."
          kubectl rollout status deployment/june-stt -n $NAMESPACE --timeout=600s || true
          kubectl rollout status deployment/june-tts -n $NAMESPACE --timeout=600s || true
          
          echo "‚úÖ Service deployment complete"

      # ========================================================================
      # Deployment Summary
      # ========================================================================
      
      - name: üìä Deployment Summary
        if: always()
        run: |
          # Load domain config for summary
          if [ -f "/root/.june-config/domain-config.env" ]; then
            source /root/.june-config/domain-config.env
          else
            API_DOMAIN="api.allsafe.world"
            IDP_DOMAIN="idp.allsafe.world"
            STT_DOMAIN="stt.allsafe.world"
            TTS_DOMAIN="tts.allsafe.world"
            TURN_DOMAIN="turn.allsafe.world"
          fi
          
          echo ""
          echo "======================================================"
          echo "üìä June Platform Deployment Summary"
          echo "======================================================"
          echo ""
          
          echo "üåê Service Endpoints:"
          echo "  API: https://${API_DOMAIN}"
          echo "  Identity Provider: https://${IDP_DOMAIN}"
          echo "  Speech-to-Text: https://${STT_DOMAIN}"
          echo "  Text-to-Speech: https://${TTS_DOMAIN}"
          
          if kubectl get namespace stunner &>/dev/null; then
            echo "  STUN/TURN Server: ${TURN_DOMAIN}:3478"
          fi
          echo ""
          
          echo "üì¶ Service Status:"
          kubectl get deployments -n $NAMESPACE -o wide
          echo ""
          
          echo "üîç Pod Status:"
          kubectl get pods -n $NAMESPACE -o wide
          echo ""
          
          # Check for issues
          PENDING=$(kubectl get pods -n $NAMESPACE --field-selector=status.phase=Pending --no-headers 2>/dev/null | wc -l)
          FAILED=$(kubectl get pods -n $NAMESPACE --field-selector=status.phase=Failed --no-headers 2>/dev/null | wc -l)
          RUNNING=$(kubectl get pods -n $NAMESPACE --field-selector=status.phase=Running --no-headers 2>/dev/null | wc -l)
          
          echo "üìà Summary:"
          echo "  Running: $RUNNING pods"
          echo "  Pending: $PENDING pods"
          echo "  Failed: $FAILED pods"
          
          if [ "$FAILED" -gt 0 ]; then
            echo ""
            echo "‚ùå Deployment completed with failures!"
            kubectl get pods -n $NAMESPACE --field-selector=status.phase=Failed
            exit 1
          elif [ "$PENDING" -gt 0 ]; then
            echo ""
            echo "‚ö†Ô∏è  Some pods still pending (may need more time)"
          else
            echo ""
            echo "‚úÖ Deployment successful!"
          fi
          
          echo ""
          echo "üöÄ Next Steps:"
          echo "  1. Test API: curl -k https://${API_DOMAIN}/healthz"
          echo "  2. Access IDP: https://${IDP_DOMAIN}"
          echo "  3. Monitor: kubectl get pods -n $NAMESPACE -w"
          if kubectl get namespace stunner &>/dev/null; then
            echo "  4. Test TURN: python3 scripts/test-turn-server.py"
          fi
          echo "======================================================"