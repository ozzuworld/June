name: 🚀 June Services Deploy (Dynamic Domain Support)

on:
  push:
    branches: [ main, develop ]
    paths-ignore: [ 'README.md', 'docs/**', '.gitignore' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_images:
        description: '🔨 Build Docker images?'
        required: true
        default: true
        type: boolean
      deploy_services:
        description: '🚀 Deploy to Kubernetes?'
        required: true
        default: true
        type: boolean
      services:
        description: '📦 Services to build/deploy (comma-separated, or "all")'
        required: false
        default: 'all'
        type: string

env:
  REGISTRY: docker.io/${{ secrets.DOCKERHUB_USERNAME }}
  NAMESPACE: june-services

permissions:
  contents: read
  packages: write

jobs:
  # ============================================================================
  # SETUP
  # ============================================================================
  
  setup:
    name: 📋 Setup Build Matrix
    runs-on: self-hosted
    outputs:
      build_images: ${{ steps.config.outputs.build_images }}
      deploy_services: ${{ steps.config.outputs.deploy_services }}
      services: ${{ steps.config.outputs.services }}
      primary_domain: ${{ steps.domain.outputs.primary_domain }}
      api_domain: ${{ steps.domain.outputs.api_domain }}
      idp_domain: ${{ steps.domain.outputs.idp_domain }}
      stt_domain: ${{ steps.domain.outputs.stt_domain }}
      tts_domain: ${{ steps.domain.outputs.tts_domain }}
      cert_secret_name: ${{ steps.domain.outputs.cert_secret_name }}
    steps:
      - name: 📝 Configure workflow
        id: config
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUILD="${{ github.event.inputs.build_images }}"
            DEPLOY="${{ github.event.inputs.deploy_services }}"
            SERVICES="${{ github.event.inputs.services }}"
          else
            BUILD="true"
            DEPLOY="true"
            SERVICES="all"
          fi
          
          # Set GitHub outputs first
          echo "build_images=$BUILD" >> $GITHUB_OUTPUT
          echo "deploy_services=$DEPLOY" >> $GITHUB_OUTPUT
          echo "services=$SERVICES" >> $GITHUB_OUTPUT
          
          echo "📋 Configuration:"
          echo "  Build images: $BUILD"
          echo "  Deploy services: $DEPLOY"
          echo "  Services: $SERVICES"
      
      - name: 🌐 Load Domain Configuration
        id: domain
        run: |
          DOMAIN_CONFIG="/root/.june-config/domain-config.env"
          
          if [ -f "$DOMAIN_CONFIG" ]; then
            echo "✅ Found domain configuration"
            source "$DOMAIN_CONFIG"
            
            echo "primary_domain=$PRIMARY_DOMAIN" >> $GITHUB_OUTPUT
            echo "api_domain=$API_DOMAIN" >> $GITHUB_OUTPUT
            echo "idp_domain=$IDP_DOMAIN" >> $GITHUB_OUTPUT
            echo "stt_domain=$STT_DOMAIN" >> $GITHUB_OUTPUT
            echo "tts_domain=$TTS_DOMAIN" >> $GITHUB_OUTPUT
            echo "cert_secret_name=$CERT_SECRET_NAME" >> $GITHUB_OUTPUT
            
            echo "🌐 Domain Configuration:"
            echo "  Primary: $PRIMARY_DOMAIN"
            echo "  API: $API_DOMAIN"
            echo "  IDP: $IDP_DOMAIN"
            echo "  STT: $STT_DOMAIN"
            echo "  TTS: $TTS_DOMAIN"
            echo "  Cert Secret: $CERT_SECRET_NAME"
          else
            echo "⚠️  No domain configuration found, using defaults"
            echo "primary_domain=allsafe.world" >> $GITHUB_OUTPUT
            echo "api_domain=api.allsafe.world" >> $GITHUB_OUTPUT
            echo "idp_domain=idp.allsafe.world" >> $GITHUB_OUTPUT
            echo "stt_domain=stt.allsafe.world" >> $GITHUB_OUTPUT
            echo "tts_domain=tts.allsafe.world" >> $GITHUB_OUTPUT
            echo "cert_secret_name=allsafe-wildcard-tls" >> $GITHUB_OUTPUT
          fi

  # ============================================================================
  # BUILD IMAGES
  # ============================================================================

  build-stt:
    name: 🔨 Build june-stt
    runs-on: self-hosted
    needs: setup
    if: needs.setup.outputs.build_images == 'true' && (needs.setup.outputs.services == 'all' || contains(needs.setup.outputs.services, 'stt'))
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📝 Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/june-stt
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: 🏗️ Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./June/services/june-stt
          file: ./June/services/june-stt/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=stt
          cache-to: type=gha,mode=max,scope=stt
          platforms: linux/amd64

  build-tts:
    name: 🔨 Build june-tts
    runs-on: self-hosted
    needs: setup
    if: needs.setup.outputs.build_images == 'true' && (needs.setup.outputs.services == 'all' || contains(needs.setup.outputs.services, 'tts'))
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📝 Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/june-tts
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: 🏗️ Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./June/services/june-tts
          file: ./June/services/june-tts/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=tts
          cache-to: type=gha,mode=max,scope=tts
          platforms: linux/amd64

  build-orchestrator:
    name: 🔨 Build june-orchestrator
    runs-on: self-hosted
    needs: setup
    if: needs.setup.outputs.build_images == 'true' && (needs.setup.outputs.services == 'all' || contains(needs.setup.outputs.services, 'orchestrator'))
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📝 Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/june-orchestrator
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: 🏗️ Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./June/services/june-orchestrator
          file: ./June/services/june-orchestrator/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=orchestrator
          cache-to: type=gha,mode=max,scope=orchestrator
          platforms: linux/amd64

  build-idp:
    name: 🔨 Build june-idp
    runs-on: self-hosted
    needs: setup
    if: needs.setup.outputs.build_images == 'true' && (needs.setup.outputs.services == 'all' || contains(needs.setup.outputs.services, 'idp'))
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📝 Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/june-idp
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: 🏗️ Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./June/services/june-idp
          file: ./June/services/june-idp/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=idp
          cache-to: type=gha,mode=max,scope=idp
          platforms: linux/amd64

  # ============================================================================
  # DEPLOYMENT (WITH DYNAMIC DOMAIN CONFIGURATION + GEMINI API KEY)
  # ============================================================================

  deploy:
    name: 🚀 Deploy to Kubernetes
    runs-on: self-hosted
    needs: [setup, build-stt, build-tts, build-orchestrator, build-idp]
    if: |
      always() && 
      needs.setup.outputs.deploy_services == 'true' &&
      (needs.build-stt.result == 'success' || needs.build-stt.result == 'skipped') &&
      (needs.build-tts.result == 'success' || needs.build-tts.result == 'skipped') &&
      (needs.build-orchestrator.result == 'success' || needs.build-orchestrator.result == 'skipped') &&
      (needs.build-idp.result == 'success' || needs.build-idp.result == 'skipped')

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      # ========================================================================
      # Infrastructure Validation
      # ========================================================================
      
      - name: 🔍 Verify Infrastructure Prerequisites
        run: |
          echo "🔍 Running comprehensive infrastructure validation..."
          
          ERRORS=0
          WARNINGS=0
          
          echo ""
          echo "1️⃣ Checking cluster connectivity..."
          if kubectl cluster-info &>/dev/null; then
            echo "✅ Cluster is accessible"
          else
            echo "❌ Cannot connect to Kubernetes cluster!"
            exit 1
          fi
          
          echo ""
          echo "2️⃣ Checking namespace..."
          if kubectl get ns $NAMESPACE &>/dev/null; then
            echo "✅ Namespace '$NAMESPACE' exists"
          else
            echo "❌ Namespace '$NAMESPACE' doesn't exist!"
            ((ERRORS++))
          fi
          
          echo ""
          echo "3️⃣ Checking StorageClass..."
          if kubectl get sc local-storage &>/dev/null; then
            echo "✅ StorageClass 'local-storage' exists"
          else
            echo "❌ StorageClass 'local-storage' doesn't exist!"
            ((ERRORS++))
          fi
          
          echo ""
          echo "4️⃣ Checking PersistentVolumes..."
          if kubectl get pv postgresql-pv &>/dev/null; then
            echo "✅ PersistentVolume 'postgresql-pv' exists"
          else
            echo "❌ PersistentVolume 'postgresql-pv' doesn't exist!"
            ((ERRORS++))
          fi
          
          echo ""
          echo "5️⃣ Checking storage directories..."
          STORAGE_DIRS=("/opt/june-postgresql-data" "/opt/june-stt-models" "/opt/june-tts-models")
          for dir in "${STORAGE_DIRS[@]}"; do
            if [ -d "$dir" ]; then
              echo "✅ Storage directory $dir exists"
            else
              echo "⚠️  Storage directory $dir doesn't exist (will be created)"
              mkdir -p "$dir"
              chmod 755 "$dir"
              ((WARNINGS++))
            fi
          done
          
          echo ""
          echo "6️⃣ Checking ingress controller..."
          if kubectl get pods -n ingress-nginx -l app.kubernetes.io/component=controller 2>/dev/null | grep -q Running; then
            echo "✅ Ingress controller is running"
          else
            echo "❌ Ingress controller not running!"
            ((ERRORS++))
          fi
          
          echo ""
          echo "7️⃣ Checking cert-manager..."
          if kubectl get pods -n cert-manager 2>/dev/null | grep -q Running; then
            echo "✅ cert-manager is running"
          else
            echo "❌ cert-manager not running!"
            ((ERRORS++))
          fi
          
          echo ""
          echo "8️⃣ Checking GPU availability..."
          GPU_ALLOCATABLE=$(kubectl get nodes -o json | jq -r '.items[].status.allocatable."nvidia.com/gpu" // "0"' | head -1)
          
          if [ "$GPU_ALLOCATABLE" -ge 2 ]; then
            echo "✅ GPU time-slicing active: $GPU_ALLOCATABLE virtual GPUs available"
          elif [ "$GPU_ALLOCATABLE" -eq 1 ]; then
            echo "⚠️  Only 1 GPU available (time-slicing may not be active)"
            ((WARNINGS++))
          else
            echo "❌ No GPUs available!"
            ((ERRORS++))
          fi
          
          echo ""
          echo "9️⃣ Checking node labels..."
          GPU_LABELED=$(kubectl get nodes -l gpu=true --no-headers 2>/dev/null | wc -l)
          if [ "$GPU_LABELED" -gt 0 ]; then
            echo "✅ Found $GPU_LABELED node(s) labeled with gpu=true"
          else
            echo "⚠️  No nodes labeled with gpu=true"
            kubectl label nodes --all gpu=true --overwrite
            ((WARNINGS++))
          fi
          
          echo ""
          echo "🔟 Checking domain configuration..."
          if [ -f "/root/.june-config/domain-config.env" ]; then
            echo "✅ Domain configuration exists"
            source /root/.june-config/domain-config.env
            echo "   Primary Domain: $PRIMARY_DOMAIN"
          else
            echo "⚠️  No domain configuration found (using defaults)"
            ((WARNINGS++))
          fi
          
          echo ""
          echo "========================================"
          echo "📊 Validation Summary"
          echo "========================================"
          echo "Errors: $ERRORS"
          echo "Warnings: $WARNINGS"
          echo ""
          
          if [ "$ERRORS" -gt 0 ]; then
            echo "❌ FAILED: $ERRORS critical error(s) found!"
            echo "   Run: sudo ./scripts/install-k8s/stage2-install-k8s-ubuntu.sh"
            exit 1
          elif [ "$WARNINGS" -gt 0 ]; then
            echo "⚠️  PASSED with $WARNINGS warning(s)"
          else
            echo "✅ PASSED: All checks successful!"
          fi

      # ========================================================================
      # Generate Manifest with Domain Configuration
      # ========================================================================
      
      - name: 🌐 Generate Deployment Manifest with Domain Config
        run: |
          echo "🌐 Generating manifest with domain configuration..."
          
          # Load domain config
          if [ -f "/root/.june-config/domain-config.env" ]; then
            source /root/.june-config/domain-config.env
            echo "✅ Using configured domains:"
            echo "   Primary: $PRIMARY_DOMAIN"
            echo "   API: $API_DOMAIN"
            echo "   IDP: $IDP_DOMAIN"
            echo "   STT: $STT_DOMAIN"
            echo "   TTS: $TTS_DOMAIN"
            echo "   Cert Secret: $CERT_SECRET_NAME"
          else
            echo "⚠️  No domain config found, using defaults"
            PRIMARY_DOMAIN="allsafe.world"
            API_DOMAIN="api.allsafe.world"
            IDP_DOMAIN="idp.allsafe.world"
            STT_DOMAIN="stt.allsafe.world"
            TTS_DOMAIN="tts.allsafe.world"
            CERT_SECRET_NAME="allsafe-wildcard-tls"
          fi
          
          # Create a temporary manifest with domain substitution
          cp k8s/complete-manifests.yaml /tmp/deployment-manifest.yaml
          
          # Replace domain placeholders
          sed -i "s/KC_HOSTNAME_VALUE/${IDP_DOMAIN}/g" /tmp/deployment-manifest.yaml || true
          sed -i "s/allsafe-wildcard-tls/${CERT_SECRET_NAME}/g" /tmp/deployment-manifest.yaml
          sed -i "s/\*.allsafe.world/*.${PRIMARY_DOMAIN}/g" /tmp/deployment-manifest.yaml
          sed -i "s/api.allsafe.world/${API_DOMAIN}/g" /tmp/deployment-manifest.yaml
          sed -i "s/idp.allsafe.world/${IDP_DOMAIN}/g" /tmp/deployment-manifest.yaml
          sed -i "s/stt.allsafe.world/${STT_DOMAIN}/g" /tmp/deployment-manifest.yaml
          sed -i "s/tts.allsafe.world/${TTS_DOMAIN}/g" /tmp/deployment-manifest.yaml
          
          echo "✅ Manifest generated with configured domains"

      # ========================================================================
      # Update Application Secrets (INCLUDING GEMINI API KEY)
      # ========================================================================
      
      - name: 🔐 Update Application Secrets
        run: |
          echo "🔐 Updating application secrets with Gemini API key..."
          
          # Verify we have the Gemini API key from GitHub secrets
          if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
            echo "❌ ERROR: GEMINI_API_KEY not set in GitHub secrets!"
            echo ""
            echo "To fix this:"
            echo "  1. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "  2. Click 'New repository secret'"
            echo "  3. Name: GEMINI_API_KEY"
            echo "  4. Value: Your actual Gemini API key from https://makersuite.google.com/app/apikey"
            echo "  5. Click 'Add secret'"
            echo ""
            exit 1
          fi
          
          # Validate key length (basic check)
          KEY_LENGTH=$(echo -n "${{ secrets.GEMINI_API_KEY }}" | wc -c)
          if [ "$KEY_LENGTH" -lt 20 ]; then
            echo "⚠️  WARNING: Gemini API key seems too short ($KEY_LENGTH characters)"
            echo "   Please verify your key is correct"
          else
            echo "✅ Gemini API key validated ($KEY_LENGTH characters)"
          fi
          
          # Update the shared june-secrets (used by orchestrator)
          kubectl create secret generic june-secrets \
            --from-literal=gemini-api-key='${{ secrets.GEMINI_API_KEY }}' \
            --from-literal=keycloak-client-secret='PLACEHOLDER' \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "✅ Application secrets updated with Gemini API key"
          
          # Verify the secret was created correctly
          echo ""
          echo "🔍 Verifying secret..."
          if kubectl get secret june-secrets -n $NAMESPACE &>/dev/null; then
            echo "✅ june-secrets exists"
            
            # Check if gemini-api-key is present (without showing the value)
            STORED_KEY=$(kubectl get secret june-secrets -n $NAMESPACE -o jsonpath='{.data.gemini-api-key}' | base64 -d 2>/dev/null || echo "")
            STORED_LENGTH=${#STORED_KEY}
            
            if [ "$STORED_LENGTH" -ge 20 ]; then
              echo "✅ gemini-api-key is present in secret ($STORED_LENGTH characters)"
              echo "   Masked key: ${STORED_KEY:0:6}...${STORED_KEY: -4}"
            else
              echo "❌ gemini-api-key is missing or invalid (length: $STORED_LENGTH)!"
              exit 1
            fi
          else
            echo "❌ june-secrets not found!"
            exit 1
          fi

      # ========================================================================
      # Deploy All Services
      # ========================================================================
      
      - name: 🚀 Deploy All Services
        run: |
          echo "🚀 Deploying all June services..."
          
          # Apply the generated manifest with domain config
          kubectl apply -f /tmp/deployment-manifest.yaml
          
          echo "✅ All services deployed"
          echo ""
          
          # Wait for PostgreSQL
          echo "⏳ Waiting for PostgreSQL to be ready..."
          kubectl wait --for=condition=ready pod -l app=postgresql -n $NAMESPACE --timeout=180s || {
            echo "⚠️ PostgreSQL not ready yet, checking status..."
            kubectl get pods -l app=postgresql -n $NAMESPACE
            kubectl describe pod -l app=postgresql -n $NAMESPACE | tail -20
          }
          
          echo "✅ PostgreSQL is ready"

      # ========================================================================
      # Wait for Deployments
      # ========================================================================
      
      - name: ⏳ Wait for Deployments
        run: |
          echo "⏳ Waiting for deployments to be ready..."
          
          wait_for_deployment() {
            local deployment=$1
            local timeout=$2
            local description=$3
            
            echo ""
            echo "Waiting for $description ($deployment)..."
            
            if kubectl rollout status deployment/$deployment -n $NAMESPACE --timeout=${timeout}s; then
              echo "✅ $description is ready"
              return 0
            else
              echo "⚠️ $description taking longer than expected"
              kubectl get deployment $deployment -n $NAMESPACE
              kubectl get pods -l app=$deployment -n $NAMESPACE
              
              PENDING=$(kubectl get pods -l app=$deployment -n $NAMESPACE --field-selector=status.phase=Pending --no-headers 2>/dev/null | wc -l)
              if [ "$PENDING" -gt 0 ]; then
                echo "❌ Found $PENDING pending pod(s) for $deployment"
                kubectl describe pods -l app=$deployment -n $NAMESPACE | grep -A 10 "Events:"
              fi
              
              return 1
            fi
          }
          
          # Wait for non-GPU services
          wait_for_deployment "june-idp" 300 "Identity Provider (Keycloak)" || true
          wait_for_deployment "june-orchestrator" 180 "Orchestrator" || true
          
          # Wait for GPU services
          wait_for_deployment "june-stt" 600 "Speech-to-Text (GPU service)" || true
          wait_for_deployment "june-tts" 600 "Text-to-Speech (GPU service)" || true

      # ========================================================================
      # Verify Gemini API Key in Orchestrator
      # ========================================================================
      
      - name: ✅ Verify Gemini API Key Configuration
        run: |
          echo "🔍 Verifying Gemini API key in june-orchestrator..."
          echo ""
          
          # Wait a bit for orchestrator to start
          sleep 10
          
          # Check orchestrator logs for Gemini initialization
          echo "Checking orchestrator logs..."
          LOGS=$(kubectl logs -l app=june-orchestrator -n $NAMESPACE --tail=100 2>/dev/null || echo "")
          
          if echo "$LOGS" | grep -q "✅ Gemini AI service ready"; then
            echo "✅ SUCCESS: Gemini AI service is ready and configured!"
            echo ""
            echo "   Gemini API key is working correctly"
          elif echo "$LOGS" | grep -q "❌ GEMINI_API_KEY not set"; then
            echo "❌ ERROR: Gemini API key not detected in orchestrator!"
            echo ""
            echo "Recent logs:"
            echo "$LOGS" | tail -20
            echo ""
            echo "This deployment will continue, but orchestrator won't work properly."
            echo "Please check GitHub secrets configuration."
          elif echo "$LOGS" | grep -q "⚠️ Gemini AI service not ready"; then
            echo "⚠️  WARNING: Gemini initialization in progress or failed"
            echo ""
            echo "Recent logs:"
            echo "$LOGS" | tail -20
          else
            echo "⚠️  Could not determine Gemini status from logs"
            echo ""
            echo "Recent logs:"
            echo "$LOGS" | tail -20
          fi
          
          echo ""
          echo "📋 Full orchestrator status:"
          kubectl describe pod -l app=june-orchestrator -n $NAMESPACE | grep -A 5 "Environment:"

      # ========================================================================
      # Deployment Summary
      # ========================================================================
      
      - name: 📊 Deployment Summary
        if: always()
        run: |
          # Load domain config for summary
          if [ -f "/root/.june-config/domain-config.env" ]; then
            source /root/.june-config/domain-config.env
          else
            PRIMARY_DOMAIN="allsafe.world"
            API_DOMAIN="api.allsafe.world"
            IDP_DOMAIN="idp.allsafe.world"
            STT_DOMAIN="stt.allsafe.world"
            TTS_DOMAIN="tts.allsafe.world"
          fi
          
          echo ""
          echo "======================================================"
          echo "📊 Deployment Status Report"
          echo "======================================================"
          echo ""
          
          echo "🌐 Deployed Domains:"
          echo "  API: https://${API_DOMAIN}"
          echo "  IDP: https://${IDP_DOMAIN}"
          echo "  STT: https://${STT_DOMAIN}"
          echo "  TTS: https://${TTS_DOMAIN}"
          echo ""
          
          echo "🔑 API Keys Status:"
          GEMINI_CONFIGURED=$(kubectl get secret june-secrets -n $NAMESPACE -o jsonpath='{.data.gemini-api-key}' 2>/dev/null | base64 -d 2>/dev/null | wc -c)
          if [ "$GEMINI_CONFIGURED" -ge 20 ]; then
            echo "  ✅ Gemini API Key: Configured ($GEMINI_CONFIGURED chars)"
          else
            echo "  ❌ Gemini API Key: Missing or invalid"
          fi
          echo ""
          
          echo "🚀 Deployments:"
          kubectl get deployments -n $NAMESPACE -o wide
          echo ""
          
          echo "📦 Pods:"
          kubectl get pods -n $NAMESPACE -o wide
          echo ""
          
          echo "🔍 Issue Detection:"
          PENDING=$(kubectl get pods -n $NAMESPACE -o json | jq -r '.items[] | select(.status.phase=="Pending") | .metadata.name' | wc -l)
          FAILED=$(kubectl get pods -n $NAMESPACE -o json | jq -r '.items[] | select(.status.phase=="Failed") | .metadata.name' | wc -l)
          
          if [ "$PENDING" -gt 0 ]; then
            echo "⚠️ $PENDING pod(s) pending"
          fi
          
          if [ "$FAILED" -gt 0 ]; then
            echo "❌ $FAILED pod(s) failed"
            exit 1
          fi
          
          echo ""
          echo "🎮 GPU Status:"
          GPU_TOTAL=$(kubectl get nodes -o json | jq -r '.items[].status.allocatable."nvidia.com/gpu" // "0"' | head -1)
          GPU_USED=$(kubectl get pods -n $NAMESPACE -o json | jq '[.items[].spec.containers[].resources.requests."nvidia.com/gpu" // "0" | tonumber] | add')
          echo "  Total available: $GPU_TOTAL virtual GPUs"
          echo "  Currently used: $GPU_USED"
          echo "  Remaining: $((GPU_TOTAL - GPU_USED))"
          echo ""
          
          echo "🌐 Services:"
          kubectl get services -n $NAMESPACE
          echo ""
          
          echo "🔐 Ingress:"
          kubectl get ingress -n $NAMESPACE
          echo ""
          
          echo "======================================================"
          TOTAL_DEPLOYMENTS=$(kubectl get deployments -n $NAMESPACE --no-headers | wc -l)
          READY_DEPLOYMENTS=$(kubectl get deployments -n $NAMESPACE -o json | jq '[.items[] | select(.status.readyReplicas == .spec.replicas)] | length')
          RUNNING_PODS=$(kubectl get pods -n $NAMESPACE --field-selector=status.phase=Running --no-headers | wc -l)
          TOTAL_PODS=$(kubectl get pods -n $NAMESPACE --no-headers | wc -l)
          
          echo "📈 Summary:"
          echo "  Deployments: $READY_DEPLOYMENTS/$TOTAL_DEPLOYMENTS ready"
          echo "  Pods: $RUNNING_PODS/$TOTAL_PODS running"
          echo "  Pending: $PENDING"
          echo "  Failed: $FAILED"
          echo "======================================================"
          
          if [ "$FAILED" -gt 0 ]; then
            echo ""
            echo "❌ Deployment completed with errors!"
            exit 1
          elif [ "$PENDING" -gt 0 ]; then
            echo ""
            echo "⚠️  Deployment completed with pending pods"
          else
            echo ""
            echo "✅ Deployment successful!"
          fi
