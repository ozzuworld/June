name: üöÄ Complete June Services CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore: [ 'README.md', 'docs/**', '.gitignore' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options: [production, staging, development]
      services:
        description: 'Services to deploy (comma-separated, empty for all)'
        required: false
        default: ''
        type: string
      force_restart:
        description: 'Force restart deployments'
        required: false
        default: false
        type: boolean
      build_images:
        description: 'Build and push Docker images'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: docker.io/${{ secrets.DOCKERHUB_USERNAME }}
  KUBE_NAMESPACE: june-services
  IMAGE_TAG: ${{ github.event.inputs.image_tag || github.sha }}

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: üî® Build & Push Images
    runs-on: self-hosted
    if: github.event.inputs.build_images != 'false'
    strategy:
      fail-fast: false
      matrix:
        service: [june-stt, june-tts, june-orchestrator, june-idp, june-web, june-dark]
    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üìù Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ env.IMAGE_TAG }}

      - name: üèóÔ∏è Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    name: üöÄ Deploy to K8s
    runs-on: self-hosted
    needs: build-and-push
    if: always() && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped')

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      # Light check for old 'namespace: june' (won't mutate repo)
      - name: üîç Verify k8s manifest files
        run: |
          set -e
          echo "üîç Verifying k8s manifest files..."
          ls -la k8s || true
          test -f k8s/namespace.yaml || echo "‚ö†Ô∏è k8s/namespace.yaml not found; will create namespace with kubectl"
          if grep -RIl --include='*.yaml' 'namespace:\s*june\b' k8s ; then
            echo "‚ö†Ô∏è Found some files still with 'namespace: june' (will be fixed in temp copies)."
          fi

      # ‚úÖ Ingress is installed by your install script ‚Äî just verify it's healthy
      - name: ‚úÖ Verify existing ingress-nginx (no install in CI)
        run: |
          set -e
          kubectl get ns ingress-nginx >/dev/null 2>&1 || (echo "‚ùå ingress-nginx namespace not found. Run your install script on the VM first." && exit 1)
          echo "üîé ingress-nginx controller pods:"
          kubectl -n ingress-nginx get pods -l app.kubernetes.io/component=controller -o wide
          kubectl -n ingress-nginx wait --for=condition=ready pod -l app.kubernetes.io/component=controller --timeout=180s

      - name: üîç Verify Kubernetes connection
        run: |
          echo "üîç Testing Kubernetes connection..."
          kubectl cluster-info
          kubectl get nodes -o wide

      - name: üèóÔ∏è Create/Apply Namespace FIRST (very important)
        run: |
          if [ -f k8s/namespace.yaml ]; then
            echo "üèóÔ∏è Applying k8s/namespace.yaml..."
            kubectl apply -f k8s/namespace.yaml
          else
            echo "üèóÔ∏è Creating namespace $KUBE_NAMESPACE (no file present)..."
            kubectl get ns "$KUBE_NAMESPACE" >/dev/null 2>&1 || kubectl create ns "$KUBE_NAMESPACE"
          fi
          echo "üìä Namespace status:"
          kubectl get ns "$KUBE_NAMESPACE" -o yaml | sed -n '1,80p'

      - name: üîê Create/Update Docker Registry Secret (image pulls)
        run: |
          kubectl create secret docker-registry dockerhub-secret \
            --docker-server=docker.io \
            --docker-username='${{ secrets.DOCKERHUB_USERNAME }}' \
            --docker-password='${{ secrets.DOCKERHUB_TOKEN }}' \
            --docker-email='${{ secrets.DOCKERHUB_EMAIL }}' \
            --namespace="$KUBE_NAMESPACE" \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n "$KUBE_NAMESPACE" patch serviceaccount default \
            -p '{"imagePullSecrets":[{"name":"dockerhub-secret"}]}' \
            --type merge || true

      - name: üîß Prepare manifests in /tmp and update image tags
        run: |
          set -e
          echo "üìÅ Copying k8s/* to /tmp/k8s-updated and updating image tags to: $IMAGE_TAG"
          mkdir -p /tmp/k8s-updated
          cp -r k8s/* /tmp/k8s-updated/ || true
          for service in june-stt june-tts june-orchestrator june-idp june-web june-dark; do
            if [ -f "/tmp/k8s-updated/${service}-deployment.yaml" ]; then
              sed -i "s|image: $REGISTRY/${service}:.*|image: $REGISTRY/${service}:$IMAGE_TAG|g" "/tmp/k8s-updated/${service}-deployment.yaml" || true
            elif [ -f "/tmp/k8s-updated/complete-manifests.yaml" ]; then
              sed -i "s|image: ozzuworld/${service}:.*|image: $REGISTRY/${service}:$IMAGE_TAG|g" "/tmp/k8s-updated/complete-manifests.yaml" || true
            fi
          done

      # üßΩ Hard-enforce namespaces on the TEMP copies only
      - name: üßΩ Normalize namespaces in temp manifests (enforce KUBE_NAMESPACE)
        run: |
          set -e
          echo "üßπ Normalizing metadata.namespace to '${KUBE_NAMESPACE}' in /tmp/k8s-updated ‚Ä¶"
          # 1) collapse any accidental repeats like june-services-services-...
          find /tmp/k8s-updated -type f -name "*.yaml" -print0 \
            | xargs -0 sed -i -E 's/\b(june-services)(-services)+\b/\1/g'
          # 2) replace legacy 'namespace: june' to target
          find /tmp/k8s-updated -type f -name "*.yaml" -print0 \
            | xargs -0 sed -i -E "s/^( *namespace:\s*)june\b/\\1${KUBE_NAMESPACE}/g"
          # 3) enforce any namespace line to exactly KUBE_NAMESPACE (skips files without a namespace line)
          find /tmp/k8s-updated -type f -name "*.yaml" -print0 \
            | xargs -0 sed -i -E "s/^( *namespace:\s*).*/\\1${KUBE_NAMESPACE}/"
          echo "üîé Namespaces after normalization:"
          grep -RIn --include='*.yaml' '^[[:space:]]*namespace:' /tmp/k8s-updated || true

      - name: üèóÔ∏è Apply base configuration
        run: |
          echo "üèóÔ∏è Applying base Kubernetes resources..."
          [ -f "/tmp/k8s-updated/configmap.yaml" ] && kubectl apply -n "$KUBE_NAMESPACE" -f /tmp/k8s-updated/configmap.yaml || true
          [ -f "/tmp/k8s-updated/secrets.yaml" ]   && kubectl apply -n "$KUBE_NAMESPACE" -f /tmp/k8s-updated/secrets.yaml || true
          echo "‚ÑπÔ∏è Storage is owned by the install script; skipping here."
          [ -f "k8s-base-config-complete.yaml" ] && kubectl apply -f k8s-base-config-complete.yaml || true
           
# Add this step in your .github/workflows/deploy-workflow.yml
# Insert it AFTER the "Apply base configuration" step and BEFORE the "Deploy services" step
# Around line 140 in your current workflow

      - name: üóÑÔ∏è Deploy PostgreSQL first (required for IDP)
        run: |
          echo "üóÑÔ∏è Deploying PostgreSQL for june-idp..."
          if kubectl get statefulset postgresql -n "$KUBE_NAMESPACE" &>/dev/null; then
            echo "‚úÖ PostgreSQL StatefulSet already exists"
          else
            kubectl apply -f k8s/postgresql-deployment.yaml
          fi
          
          echo "‚è≥ Waiting for PostgreSQL pod to be created..."
          for i in {1..30}; do
            POD_NAME=$(kubectl get pods -n "$KUBE_NAMESPACE" -l app=postgresql -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
            if [ -n "$POD_NAME" ]; then
              echo "‚úÖ PostgreSQL pod created: $POD_NAME"
              break
            fi
            echo "  Waiting for pod... ($i/30)"
            sleep 2
          done
          
          echo "‚è≥ Waiting for PostgreSQL to be ready..."
          kubectl wait --for=condition=ready pod -l app=postgresql -n "$KUBE_NAMESPACE" --timeout=180s || {
            echo "‚ö†Ô∏è PostgreSQL not ready yet, checking status..."
            kubectl get pods -n "$KUBE_NAMESPACE" -l app=postgresql
            kubectl describe pod -n "$KUBE_NAMESPACE" -l app=postgresql | tail -30
          }
          
          echo "‚úÖ PostgreSQL is ready"
          kubectl get pods -n "$KUBE_NAMESPACE" -l app=postgresql

      - name: üöÄ Deploy services
        run: |
          echo "üöÄ Deploying services..."
          SERVICES_INPUT="${{ github.event.inputs.services }}"
          ALL_SERVICES=("june-stt" "june-tts" "june-orchestrator" "june-idp" "june-web" "june-dark")

          if [ -z "$SERVICES_INPUT" ]; then
            SERVICES_TO_DEPLOY=("${ALL_SERVICES[@]}")
          else
            IFS=',' read -ra SERVICES_TO_DEPLOY <<< "$SERVICES_INPUT"
          fi

          if [ -f "/tmp/k8s-updated/complete-manifests.yaml" ]; then
            kubectl apply -n "$KUBE_NAMESPACE" -f /tmp/k8s-updated/complete-manifests.yaml
          else
            for service in "${SERVICES_TO_DEPLOY[@]}"; do
              service="$(echo "$service" | xargs)"
              if [ -f "/tmp/k8s-updated/${service}-deployment.yaml" ]; then
                kubectl apply -n "$KUBE_NAMESPACE" -f "/tmp/k8s-updated/${service}-deployment.yaml"
              else
                echo "‚ö†Ô∏è /tmp/k8s-updated/${service}-deployment.yaml not found"
              fi
            done
          fi

      - name: üñáÔ∏è Enforce images on live deployments (belt & suspenders)
        run: |
          set -e
          for DEP in $(kubectl -n "$KUBE_NAMESPACE" get deploy -o jsonpath='{.items[*].metadata.name}'); do
            case "$DEP" in
              june-stt)          kubectl -n "$KUBE_NAMESPACE" set image deploy/$DEP stt=${REGISTRY}/june-stt:${IMAGE_TAG} --record ;;
              june-tts)          kubectl -n "$KUBE_NAMESPACE" set image deploy/$DEP tts=${REGISTRY}/june-tts:${IMAGE_TAG} --record ;;
              june-orchestrator) kubectl -n "$KUBE_NAMESPACE" set image deploy/$DEP orchestrator=${REGISTRY}/june-orchestrator:${IMAGE_TAG} --record ;;
              june-idp)          kubectl -n "$KUBE_NAMESPACE" set image deploy/$DEP idp=${REGISTRY}/june-idp:${IMAGE_TAG} --record ;;
              june-web)          kubectl -n "$KUBE_NAMESPACE" set image deploy/$DEP web=${REGISTRY}/june-web:${IMAGE_TAG} --record || true ;;
              june-dark)         kubectl -n "$KUBE_NAMESPACE" set image deploy/$DEP dark=${REGISTRY}/june-dark:${IMAGE_TAG} --record || true ;;
            esac
          done

      - name: üåê Apply ingress
        run: |
          if [ -f "/tmp/k8s-updated/ingress.yaml" ]; then
            kubectl apply -f /tmp/k8s-updated/ingress.yaml
          elif [ -f "k8s-ingress-complete.yaml" ]; then
            kubectl apply -f k8s-ingress-complete.yaml
          else
            echo "‚ö†Ô∏è No ingress configuration found"
          fi
          kubectl -n "$KUBE_NAMESPACE" get ingress -o wide || true

      - name: ‚è≥ Wait for deployments
        run: |
          echo "‚è≥ Waiting for deployments to be ready..."
          DEPLOYMENTS=$(kubectl get deployments -n "$KUBE_NAMESPACE" -o jsonpath='{.items[*].metadata.name}')
          for deployment in $DEPLOYMENTS; do
            kubectl rollout status deployment/"$deployment" -n "$KUBE_NAMESPACE" --timeout=300s || true
          done

      - name: üîç Health check
        run: |
          echo "üìä Pods:";    kubectl -n "$KUBE_NAMESPACE" get pods -o wide || true
          echo "üåê Svc:";     kubectl -n "$KUBE_NAMESPACE" get svc -o wide || true
          echo "üö™ Ingress:"; kubectl -n "$KUBE_NAMESPACE" get ingress -o wide || true

      - name: üìä Final status
        if: always()
        run: |
          kubectl get all -n "$KUBE_NAMESPACE" -o wide || true
