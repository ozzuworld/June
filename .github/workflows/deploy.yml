# .github/workflows/deploy.yml  
# REPLACE YOUR EXISTING deploy.yml WITH THIS CLEANER VERSION

name: Deploy Services to Cloud Run

on:
  push:
    branches: [ main, master ]
    paths:
      - 'June/services/**'
      - 'services/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch: {}
  schedule:
    - cron: '0 5 1 */3 *'

defaults:
  run:
    shell: bash

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION || 'us-central1' }}
  AR_REPO: ${{ vars.ARTIFACT_REPO || 'june' }}
  ALLOW_PUBLIC: ${{ vars.ALLOW_PUBLIC || 'true' }}

jobs:
  deploy:
    name: Deploy Services
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include:
          - service: june-idp
            path: services/june-idp
            cpu: "2"
            memory: "2Gi"
            min_instances: 1
            sa_suffix: svc
            secrets: "KC_DB_PASSWORD"
          - service: june-orchestrator  
            path: June/services/june-orchestrator
            cpu: "1"
            memory: "512Mi"
            min_instances: 0
            sa_suffix: svc
            secrets: ""
          - service: june-stt
            path: June/services/june-stt
            cpu: "2"
            memory: "1Gi"
            min_instances: 1
            sa_suffix: svc
            secrets: ""
          - service: june-tts
            path: June/services/june-tts
            cpu: "2"
            memory: "1Gi"
            min_instances: 0
            sa_suffix: svc
            secrets: ""
          - service: nginx-edge
            path: services/nginx-edge
            cpu: "1"
            memory: "256Mi"
            min_instances: 0
            sa_suffix: svc
            secrets: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker "${REGION}-docker.pkg.dev" --quiet

      - name: Check if service path exists
        run: |
          if [[ ! -d "${{ matrix.path }}" ]]; then
            echo "::error::Path ${{ matrix.path }} does not exist for ${{ matrix.service }}"
            exit 1
          fi
          echo "✅ Found service at ${{ matrix.path }}"

      - name: Build and push image
        run: |
          set -euo pipefail
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/${{ matrix.service }}:${GITHUB_SHA}"
          echo "Building: $IMAGE"
          
          docker build --pull -t "$IMAGE" "${{ matrix.path }}"
          docker push "$IMAGE"
          
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Wait for dependencies (nginx-edge only)
        if: matrix.service == 'nginx-edge'
        run: |
          echo "Waiting for upstream services..."
          
          services=("june-idp" "june-orchestrator" "june-stt" "june-tts")
          for service in "${services[@]}"; do
            echo "Checking $service..."
            max_attempts=20
            attempt=0
            
            while [ $attempt -lt $max_attempts ]; do
              if gcloud run services describe "$service" \
                   --region="$REGION" \
                   --format='value(status.uri)' >/dev/null 2>&1; then
                echo "✅ $service is ready"
                break
              fi
              echo "⏳ Waiting for $service... ($((attempt+1))/$max_attempts)"
              sleep 15
              attempt=$((attempt + 1))
            done
            
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Timeout waiting for $service"
              exit 1
            fi
          done

      - name: Get upstream URLs (nginx-edge only)
        if: matrix.service == 'nginx-edge'
        run: |
          IDP_URL=$(gcloud run services describe june-idp --region="$REGION" --format='value(status.uri)')
          ORCH_URL=$(gcloud run services describe june-orchestrator --region="$REGION" --format='value(status.uri)')
          TTS_URL=$(gcloud run services describe june-tts --region="$REGION" --format='value(status.uri)')
          STT_URL=$(gcloud run services describe june-stt --region="$REGION" --format='value(status.uri)')
          
          echo "UPSTREAM_IDP=$IDP_URL" >> $GITHUB_ENV
          echo "UPSTREAM_ORCH=$ORCH_URL" >> $GITHUB_ENV
          echo "UPSTREAM_TTS=$TTS_URL" >> $GITHUB_ENV
          echo "UPSTREAM_STT=$STT_URL" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        run: |
          set -euo pipefail
          
          # Base command
          CMD="gcloud run deploy ${{ matrix.service }}"
          CMD+=" --project=$PROJECT_ID"
          CMD+=" --image=$IMAGE"
          CMD+=" --region=$REGION" 
          CMD+=" --platform=managed"
          CMD+=" --cpu=${{ matrix.cpu }}"
          CMD+=" --memory=${{ matrix.memory }}"
          CMD+=" --min-instances=${{ matrix.min_instances }}"
          CMD+=" --timeout=3600"
          
          # Service account (matches naming from service_accounts.tf)
          if [ "${{ matrix.service }}" = "june-orchestrator" ]; then
            SA_NAME="orchestrator-svc"
          elif [ "${{ matrix.service }}" = "june-idp" ]; then
            SA_NAME="june-idp-svc"
          else
            SA_NAME="${{ matrix.service }}"
            SA_NAME="${SA_NAME#june-}"  # Remove june- prefix
            SA_NAME="${SA_NAME}-svc"    # Add -svc suffix
          fi
          CMD+=" --service-account=${SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com"
          
          # Authentication
          if [ "$ALLOW_PUBLIC" = "true" ]; then
            CMD+=" --allow-unauthenticated"
          else
            CMD+=" --no-allow-unauthenticated"
          fi
          
          # Service-specific configuration
          case "${{ matrix.service }}" in
            june-idp)
              CMD+=" --concurrency=20"
              # Build env vars string, including KC_HOSTNAME if provided
              ENV_VARS="KC_DB=postgres,KC_DB_URL=${{ secrets.KC_DB_URL }},KC_DB_USERNAME=${{ secrets.KC_DB_USERNAME }},KC_BOOTSTRAP_ADMIN_USERNAME=admin,KC_BOOTSTRAP_ADMIN_PASSWORD=bootstrap-temp,KC_HOSTNAME_STRICT=false,KC_CACHE=local"
              if [ -n "${{ secrets.KC_BASE_URL }}" ]; then
                ENV_VARS="${ENV_VARS},KC_HOSTNAME=${{ secrets.KC_BASE_URL }}"
              fi
              CMD+=" --set-env-vars=${ENV_VARS}"
              CMD+=" --set-secrets=KC_DB_PASSWORD=KC_DB_PASSWORD:latest"
              CMD+=" --args=start,--http-enabled=true,--proxy-headers=xforwarded,--cache=local"
              ;;
            nginx-edge)
              CMD+=" --concurrency=100"
              # Only set upstream env vars if they're not empty
              ENV_VARS=""
              if [ -n "${UPSTREAM_IDP:-}" ]; then
                ENV_VARS="UPSTREAM_IDP=${UPSTREAM_IDP}"
              fi
              if [ -n "${UPSTREAM_ORCH:-}" ] && [ "${UPSTREAM_ORCH}" != "https://placeholder-june-orchestrator.example.com" ]; then
                ENV_VARS="${ENV_VARS:+$ENV_VARS,}UPSTREAM_ORCH=${UPSTREAM_ORCH}"
              fi
              if [ -n "${UPSTREAM_TTS:-}" ] && [ "${UPSTREAM_TTS}" != "https://placeholder-june-tts.example.com" ]; then
                ENV_VARS="${ENV_VARS:+$ENV_VARS,}UPSTREAM_TTS=${UPSTREAM_TTS}"
              fi
              if [ -n "${UPSTREAM_STT:-}" ] && [ "${UPSTREAM_STT}" != "https://placeholder-june-stt.example.com" ]; then
                ENV_VARS="${ENV_VARS:+$ENV_VARS,}UPSTREAM_STT=${UPSTREAM_STT}"
              fi
              if [ -n "$ENV_VARS" ]; then
                CMD+=" --set-env-vars=${ENV_VARS}"
              fi
              ;;
            june-orchestrator)
              CMD+=" --concurrency=10"
              ;;
            june-stt)
              CMD+=" --concurrency=1"
              ;;
            june-tts)
              CMD+=" --concurrency=4"
              ;;
          esac
          
          # Add labels
          CMD+=" --labels=commit=$GITHUB_SHA,service=${{ matrix.service }}"
          
          # Execute deployment
          echo "Executing: $CMD"
          eval $CMD

      - name: Enable session affinity (june-idp only)
        if: matrix.service == 'june-idp'
        run: |
          gcloud run services update june-idp \
            --project="$PROJECT_ID" \
            --region="$REGION" \
            --session-affinity || true

      - name: Update Keycloak hostname (june-idp only)
        if: matrix.service == 'june-idp'
        run: |
          # Check if KC_BASE_URL is provided, if not, update with discovered URL
          if [ -z "${{ secrets.KC_BASE_URL }}" ]; then
            URL=$(gcloud run services describe june-idp --project="$PROJECT_ID" --region="$REGION" --format='value(status.uri)')
            echo "Updating Keycloak with discovered URL: $URL"
            
            gcloud run deploy june-idp \
              --project="$PROJECT_ID" \
              --image="$IMAGE" \
              --region="$REGION" \
              --args="start,--http-enabled=true,--proxy-headers=xforwarded,--hostname=$URL" \
              --labels="commit=$GITHUB_SHA,service=june-idp"
            
            echo "::notice title=Keycloak URL::$URL"
            echo "💡 Add KC_BASE_URL='$URL' as a GitHub Secret for faster future deploys"
          else
            echo "KC_BASE_URL is already configured: ${{ secrets.KC_BASE_URL }}"
          fi

      - name: Output service URL
        run: |
          URL=$(gcloud run services describe ${{ matrix.service }} --project="$PROJECT_ID" --region="$REGION" --format='value(status.uri)')
          echo "::notice title=${{ matrix.service }} URL::$URL"