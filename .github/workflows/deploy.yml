# .github/workflows/deploy.yml
# CLEAN & SIMPLE VERSION - Focus on what actually matters

name: Deploy Services to Cloud Run

on:
  push:
    branches: [ main, master ]
    paths:
      - 'June/services/**'
      - 'services/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch: {}

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION || 'us-central1' }}
  AR_REPO: ${{ vars.ARTIFACT_REPO || 'june' }}

jobs:
  # Deploy core services first
  deploy-core:
    name: Deploy Core Services
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: june-idp
            path: services/june-idp
            timeout: 900
            concurrency: 20
            cpu: "2"
            memory: "2Gi"
            min_instances: 1
          - service: june-orchestrator  
            path: June/services/june-orchestrator
            timeout: 3600
            concurrency: 10
            cpu: "1"
            memory: "512Mi"
            min_instances: 0
          - service: june-stt
            path: June/services/june-stt
            timeout: 3600
            concurrency: 1
            cpu: "2"
            memory: "1Gi"
            min_instances: 1
          - service: june-tts
            path: June/services/june-tts
            timeout: 3600
            concurrency: 4
            cpu: "2"
            memory: "1Gi"
            min_instances: 0

    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker "${REGION}-docker.pkg.dev" --quiet

      - name: Build and Deploy
        run: |
          # Build image
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/${{ matrix.service }}:${GITHUB_SHA}"
          docker build -t "$IMAGE" "${{ matrix.path }}"
          docker push "$IMAGE"
          
          # Determine service account
          case "${{ matrix.service }}" in
            june-orchestrator) SA="orchestrator-svc" ;;
            june-idp) SA="june-idp-svc" ;;
            *) SA="${{ matrix.service }}-svc" ;;
          esac
          SA="${SA#june-}"
          
          # Deploy with service-specific config
          if [ "${{ matrix.service }}" = "june-idp" ]; then
            # Keycloak with database config
            gcloud run deploy ${{ matrix.service }} \
              --image="$IMAGE" \
              --region="$REGION" \
              --cpu="${{ matrix.cpu }}" \
              --memory="${{ matrix.memory }}" \
              --min-instances="${{ matrix.min_instances }}" \
              --timeout="${{ matrix.timeout }}" \
              --concurrency="${{ matrix.concurrency }}" \
              --service-account="${SA}@${PROJECT_ID}.iam.gserviceaccount.com" \
              --allow-unauthenticated \
              --set-env-vars="KC_DB=postgres,KC_DB_URL=${{ secrets.KC_DB_URL }},KC_DB_USERNAME=${{ secrets.KC_DB_USERNAME }},KC_BOOTSTRAP_ADMIN_USERNAME=admin,KC_BOOTSTRAP_ADMIN_PASSWORD=bootstrap-temp,KC_HTTP_ENABLED=true,KC_HOSTNAME_STRICT=false,KC_TRANSACTION_XA_ENABLED=false,KC_HOSTNAME=${{ secrets.KC_BASE_URL }}" \
              --set-secrets="KC_DB_PASSWORD=KC_DB_PASSWORD:latest" \
              --args="start,--http-enabled=true,--hostname-strict=false,--proxy-headers=xforwarded,--db=postgres,--transaction-xa-enabled=false"
            
            # Enable session affinity for Keycloak
            gcloud run services update ${{ matrix.service }} \
              --region="$REGION" \
              --session-affinity || true
              
          else
            # Other services with auth config
            gcloud run deploy ${{ matrix.service }} \
              --image="$IMAGE" \
              --region="$REGION" \
              --cpu="${{ matrix.cpu }}" \
              --memory="${{ matrix.memory }}" \
              --min-instances="${{ matrix.min_instances }}" \
              --timeout="${{ matrix.timeout }}" \
              --concurrency="${{ matrix.concurrency }}" \
              --service-account="${SA}@${PROJECT_ID}.iam.gserviceaccount.com" \
              --allow-unauthenticated \
              --set-env-vars="KC_BASE_URL=${{ secrets.KC_BASE_URL }},KC_REALM=${{ secrets.KC_REALM || 'june' }}"
          fi

      - name: Output URL
        run: |
          URL=$(gcloud run services describe ${{ matrix.service }} --region="$REGION" --format='value(status.uri)')
          echo "🌐 ${{ matrix.service }}: $URL"

  # Deploy nginx-edge after core services
  deploy-edge:
    name: Deploy Edge Proxy
    runs-on: ubuntu-latest
    needs: deploy-core
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker "${REGION}-docker.pkg.dev" --quiet

      - name: Deploy nginx-edge
        run: |
          # Build image
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/nginx-edge:${GITHUB_SHA}"
          docker build -t "$IMAGE" "services/nginx-edge"
          docker push "$IMAGE"
          
          # Get service URLs (simple approach)
          IDP_URL=$(gcloud run services describe june-idp --region="$REGION" --format='value(status.uri)' || echo "")
          ORCH_URL=$(gcloud run services describe june-orchestrator --region="$REGION" --format='value(status.uri)' || echo "")
          STT_URL=$(gcloud run services describe june-stt --region="$REGION" --format='value(status.uri)' || echo "")
          TTS_URL=$(gcloud run services describe june-tts --region="$REGION" --format='value(status.uri)' || echo "")
          
          # Build env vars
          ENV_VARS="UPSTREAM_IDP=${IDP_URL}"
          [ -n "$ORCH_URL" ] && ENV_VARS="${ENV_VARS},UPSTREAM_ORCH=${ORCH_URL}"
          [ -n "$STT_URL" ] && ENV_VARS="${ENV_VARS},UPSTREAM_STT=${STT_URL}"
          [ -n "$TTS_URL" ] && ENV_VARS="${ENV_VARS},UPSTREAM_TTS=${TTS_URL}"
          
          echo "🔧 Upstream URLs: $ENV_VARS"
          
          # Deploy nginx-edge
          gcloud run deploy nginx-edge \
            --image="$IMAGE" \
            --region="$REGION" \
            --cpu="1" \
            --memory="256Mi" \
            --min-instances="0" \
            --timeout="3600" \
            --concurrency="100" \
            --service-account="nginx-edge-svc@${PROJECT_ID}.iam.gserviceaccount.com" \
            --allow-unauthenticated \
            --set-env-vars="$ENV_VARS"

      - name: Output Edge URL
        run: |
          URL=$(gcloud run services describe nginx-edge --region="$REGION" --format='value(status.uri)')
          echo "🌐 nginx-edge: $URL"
          echo "::notice title=Edge Proxy URL::$URL"