# Updated .github/workflows/deploy.yml
# Fixes both Keycloak clustering and nginx-edge service discovery

name: Deploy Services to Cloud Run

on:
  push:
    branches: [ main, master ]
    paths:
      - 'June/services/**'
      - 'services/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch: {}

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION || 'us-central1' }}
  AR_REPO: ${{ vars.ARTIFACT_REPO || 'june' }}

jobs:
  # Deploy core services first
  deploy-core:
    name: Deploy Core Services
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: june-idp
            path: services/june-idp
            timeout: 900
            concurrency: 20
            cpu: "2"
            memory: "2Gi"
            min_instances: 1
          - service: june-orchestrator  
            path: June/services/june-orchestrator
            timeout: 3600
            concurrency: 10
            cpu: "1"
            memory: "512Mi"
            min_instances: 0
          - service: june-stt
            path: June/services/june-stt
            timeout: 3600
            concurrency: 1
            cpu: "2"
            memory: "1Gi"
            min_instances: 1
          - service: june-tts
            path: June/services/june-tts
            timeout: 3600
            concurrency: 4
            cpu: "2"
            memory: "1Gi"
            min_instances: 0

    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker "${REGION}-docker.pkg.dev" --quiet

      - name: Build and Deploy
        run: |
          # Build image
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/${{ matrix.service }}:${GITHUB_SHA}"
          docker build -t "$IMAGE" "${{ matrix.path }}"
          docker push "$IMAGE"
          
          # Determine service account (match your existing SAs)
          case "${{ matrix.service }}" in
            june-orchestrator) SA="orchestrator-svc" ;;
            june-idp) SA="june-idp-svc" ;;
            june-stt) SA="stt-svc" ;;
            june-tts) SA="tts-svc" ;;
            *) SA="${{ matrix.service }}-svc" ;;
          esac
          
          # Deploy with service-specific config
          if [ "${{ matrix.service }}" = "june-idp" ]; then
            # Keycloak with FIXED single-node configuration
            gcloud run deploy ${{ matrix.service }} \
              --image="$IMAGE" \
              --region="$REGION" \
              --cpu="${{ matrix.cpu }}" \
              --memory="${{ matrix.memory }}" \
              --min-instances="${{ matrix.min_instances }}" \
              --timeout="${{ matrix.timeout }}" \
              --concurrency="${{ matrix.concurrency }}" \
              --service-account="${SA}@${PROJECT_ID}.iam.gserviceaccount.com" \
              --allow-unauthenticated \
              --set-env-vars="KC_DB=postgres,KC_DB_URL=${{ secrets.KC_DB_URL }},KC_DB_USERNAME=${{ secrets.KC_DB_USERNAME }},KC_BOOTSTRAP_ADMIN_USERNAME=admin,KC_BOOTSTRAP_ADMIN_PASSWORD=bootstrap-temp,KC_HTTP_ENABLED=true,KC_HOSTNAME_STRICT=false,KC_TRANSACTION_XA_ENABLED=false,KC_HOSTNAME=${{ secrets.KC_BASE_URL }},KC_CACHE=local,KC_CACHE_STACK=local" \
              --set-secrets="KC_DB_PASSWORD=KC_DB_PASSWORD:latest" \
              --args="start,--http-enabled=true,--hostname-strict=false,--proxy-headers=xforwarded,--db=postgres,--transaction-xa-enabled=false,--cache=local,--cache-stack=local"
            
          else
            # Other services with auth config + service URLs for orchestrator
            ENV_VARS="KC_BASE_URL=${{ secrets.KC_BASE_URL }},KC_REALM=${{ secrets.KC_REALM || 'june' }}"
            
            # Add service-to-service URLs for orchestrator
            if [ "${{ matrix.service }}" = "june-orchestrator" ]; then
              ENV_VARS="${ENV_VARS},STT_SERVICE_URL=https://june-stt-359243954.us-central1.run.app"
              ENV_VARS="${ENV_VARS},TTS_SERVICE_URL=https://june-tts-359243954.us-central1.run.app"
              ENV_VARS="${ENV_VARS},ORCHESTRATOR_CLIENT_ID=${{ secrets.ORCHESTRATOR_CLIENT_ID }}"
              ENV_VARS="${ENV_VARS},ORCHESTRATOR_CLIENT_SECRET=${{ secrets.ORCHESTRATOR_CLIENT_SECRET }}"
            fi
            
            # Add service-specific credentials
            if [ "${{ matrix.service }}" = "june-stt" ]; then
              ENV_VARS="${ENV_VARS},STT_CLIENT_ID=${{ secrets.STT_CLIENT_ID }}"
              ENV_VARS="${ENV_VARS},STT_CLIENT_SECRET=${{ secrets.STT_CLIENT_SECRET }}"
            fi
            
            if [ "${{ matrix.service }}" = "june-tts" ]; then
              ENV_VARS="${ENV_VARS},TTS_CLIENT_ID=${{ secrets.TTS_CLIENT_ID }}"
              ENV_VARS="${ENV_VARS},TTS_CLIENT_SECRET=${{ secrets.TTS_CLIENT_SECRET }}"
            fi
            
            gcloud run deploy ${{ matrix.service }} \
              --image="$IMAGE" \
              --region="$REGION" \
              --cpu="${{ matrix.cpu }}" \
              --memory="${{ matrix.memory }}" \
              --min-instances="${{ matrix.min_instances }}" \
              --timeout="${{ matrix.timeout }}" \
              --concurrency="${{ matrix.concurrency }}" \
              --service-account="${SA}@${PROJECT_ID}.iam.gserviceaccount.com" \
              --allow-unauthenticated \
              --set-env-vars="$ENV_VARS"
          fi

      - name: Output URL
        run: |
          URL=$(gcloud run services describe ${{ matrix.service }} --region="$REGION" --format='value(status.uri)')
          echo "🌐 ${{ matrix.service }}: $URL"

  # Deploy nginx-edge after core services - FIXED VERSION
  deploy-edge:
    name: Deploy Edge Proxy
    runs-on: ubuntu-latest
    needs: deploy-core
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker "${REGION}-docker.pkg.dev" --quiet

      - name: Deploy nginx-edge
        run: |
          # Build image
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/nginx-edge:${GITHUB_SHA}"
          docker build -t "$IMAGE" "services/nginx-edge"
          docker push "$IMAGE"
          
          echo "🔍 Getting service URLs for nginx-edge..."
          
          # Wait for services to be fully ready
          sleep 30
          
          # List services to see what's available
          echo "Available services:"
          gcloud run services list --region="$REGION" --project="$PROJECT_ID" --format="table(metadata.name,status.uri)"
          
          # FIXED: Use the exact service names and better extraction
          echo "Getting service URLs..."
          
          # Method 1: Direct URL construction (most reliable for Cloud Run)
          IDP_URL="https://june-idp-359243954.us-central1.run.app"
          ORCH_URL="https://june-orchestrator-359243954.us-central1.run.app"
          STT_URL="https://june-stt-359243954.us-central1.run.app"
          TTS_URL="https://june-tts-359243954.us-central1.run.app"
          
          # Method 2: Verify services exist with gcloud (fallback verification)
          echo "Verifying service URLs..."
          
          # Test if services respond
          for service in june-idp june-orchestrator june-stt june-tts; do
            if gcloud run services describe "$service" --region="$REGION" --project="$PROJECT_ID" >/dev/null 2>&1; then
              echo "✅ $service service exists"
            else
              echo "❌ $service service not found"
            fi
          done
          
          # Debug: Show what we found
          echo "🔍 Service URLs to use:"
          echo "  IDP: $IDP_URL"
          echo "  ORCH: $ORCH_URL"
          echo "  STT: $STT_URL"
          echo "  TTS: $TTS_URL"
          
          # Build environment variables (all should be available)
          ENV_VARS="UPSTREAM_IDP=${IDP_URL}"
          ENV_VARS="${ENV_VARS},UPSTREAM_ORCH=${ORCH_URL}"
          ENV_VARS="${ENV_VARS},UPSTREAM_STT=${STT_URL}"
          ENV_VARS="${ENV_VARS},UPSTREAM_TTS=${TTS_URL}"
          
          echo "🚀 Final environment variables: $ENV_VARS"
          
          # Deploy nginx-edge
          gcloud run deploy nginx-edge \
            --project="$PROJECT_ID" \
            --image="$IMAGE" \
            --region="$REGION" \
            --cpu="1" \
            --memory="512Mi" \
            --min-instances="0" \
            --max-instances="10" \
            --timeout="300" \
            --concurrency="100" \
            --service-account="nginx-edge-svc@${PROJECT_ID}.iam.gserviceaccount.com" \
            --allow-unauthenticated \
            --set-env-vars="$ENV_VARS" \
            --port="8080"

      - name: Test nginx-edge deployment
        run: |
          # Get nginx-edge URL
          EDGE_URL=$(gcloud run services describe nginx-edge \
            --region="$REGION" \
            --project="$PROJECT_ID" \
            --format='value(status.uri)')
          
          echo "🧪 Testing nginx-edge deployment..."
          echo "   URL: $EDGE_URL"
          
          # Wait a moment for deployment to be ready
          sleep 10
          
          # Test basic connectivity
          echo "Testing health endpoint..."
          if curl -f -s -m 10 "${EDGE_URL}/healthz" > /dev/null 2>&1; then
            echo "✅ nginx-edge health check passed"
          else
            echo "❌ nginx-edge health check failed"
            curl -v "${EDGE_URL}/healthz" || true
          fi
          
          # Test Keycloak routing
          echo "Testing Keycloak routing..."
          if curl -f -s -m 10 "${EDGE_URL}/auth/realms/june" > /dev/null 2>&1; then
            echo "✅ Keycloak routing working"
          else
            echo "⚠️  Keycloak routing may have issues"
            curl -v "${EDGE_URL}/auth/realms/june" || true
          fi
          
          # Test service routing
          echo "Testing service routing..."
          for service in orchestrator stt tts; do
            if curl -f -s -m 10 "${EDGE_URL}/${service}/healthz" > /dev/null 2>&1; then
              echo "✅ ${service} routing working"
            else
              echo "⚠️  ${service} routing may have issues"
            fi
          done

      - name: Output Edge URL and next steps
        run: |
          URL=$(gcloud run services describe nginx-edge --region="$REGION" --format='value(status.uri)')
          echo "🌐 nginx-edge: $URL"
          echo ""
          echo "🎯 Test your routing:"
          echo "   Health: $URL/healthz"
          echo "   Keycloak: $URL/auth/realms/june"
          echo "   Orchestrator: $URL/orchestrator/healthz"
          echo "   STT: $URL/stt/healthz"
          echo "   TTS: $URL/tts/healthz"
          echo ""
          echo "::notice title=Edge Proxy URL::$URL"