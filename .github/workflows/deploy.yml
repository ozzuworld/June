name: Build & Deploy Cloud Run (June monorepo)

on:
  push:
    branches: [ "main" ]
    paths:
      - 'services/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch: {}
  schedule:
    - cron: "0 5 1 */3 *"  # quarterly

env:
  PROJECT_ID:  ${{ vars.GCP_PROJECT_ID }}
  REGION:      ${{ vars.GCP_REGION || 'us-central1' }}
  AR_REPO:     ${{ vars.ARTIFACT_REPO || 'june' }}
  SERVICES_ROOT: ${{ vars.SERVICES_ROOT || 'services' }}
  ALLOW_PUBLIC: ${{ vars.ALLOW_PUBLIC || 'true' }}

jobs:
  deploy:
    name: Build & deploy each service to Cloud Run
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        service: [ "june-orchestrator", "june-stt", "june-tts" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build & Push image
        working-directory: ${{ env.SERVICES_ROOT }}/${{ matrix.service }}
        env:
          IMAGE: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ matrix.service }}:${{ github.sha }}
        run: |
          docker build --pull -t "$IMAGE" .
          docker push "$IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Compute per-service flags
        id: flags
        run: |
          svc="${{ matrix.service }}"
          case "$svc" in
            june-orchestrator)
              echo 'extra=--cpu=1 --memory=512Mi --concurrency=10 --min-instances=0 --service-account=orchestrator-svc@'${{ env.PROJECT_ID }}'.iam.gserviceaccount.com' >> $GITHUB_OUTPUT
              ;;
            june-stt)
              echo 'extra=--cpu=2 --memory=1Gi --concurrency=1 --min-instances=1 --service-account=stt-svc@'${{ env.PROJECT_ID }}'.iam.gserviceaccount.com' >> $GITHUB_OUTPUT
              ;;
            june-tts)
              echo 'extra=--cpu=2 --memory=1Gi --concurrency=4 --min-instances=0 --service-account=tts-svc@'${{ env.PROJECT_ID }}'.iam.gserviceaccount.com' >> $GITHUB_OUTPUT
              ;;
            *)
              echo 'extra=' >> $GITHUB_OUTPUT
              ;;
          esac

      # - name: (Optional) DB migrate on Neon
      #   working-directory: ${{ env.SERVICES_ROOT }}/june-orchestrator
      #   run: |
      #     NEON_DB_URL="$(gcloud secrets versions access latest --secret=NEON_DB_URL)"
      #     pip install -r requirements.txt
      #     alembic upgrade head

      - name: Deploy to Cloud Run (with Secret Manager env)
        run: |
          FLAGS="${{ steps.flags.outputs.extra }}"
          if [ "${{ env.ALLOW_PUBLIC }}" = "true" ]; then AUTH_FLAG="--allow-unauthenticated"; else AUTH_FLAG="--no-allow-unauthenticated"; fi

          SECRETS=(
            "NEON_DB_URL=NEON_DB_URL:latest"
            "NEON_API_KEY=NEON_API_KEY:latest"
            "UPSTASH_REDIS_REST_URL=UPSTASH_REDIS_REST_URL:latest"
            "UPSTASH_REDIS_REST_TOKEN=UPSTASH_REDIS_REST_TOKEN:latest"
            "UPSTASH_REDIS_URL=UPSTASH_REDIS_URL:latest"
            "QDRANT_API_KEY=QDRANT_API_KEY:latest"
            "QDRANT_URL=QDRANT_URL:latest"
            "R2_ACCESS_KEY_ID=R2_ACCESS_KEY_ID:latest"
            "R2_SECRET_ACCESS_KEY=R2_SECRET_ACCESS_KEY:latest"
            "R2_ENDPOINT=R2_ENDPOINT:latest"
            "R2_BUCKET=R2_BUCKET:latest"
          )
          for s in "${SECRETS[@]}"; do FLAGS="$FLAGS --set-secrets $s"; done

          # Use $IMAGE (from $GITHUB_ENV), not ${{ env.IMAGE }}
          gcloud run deploy "${{ matrix.service }}" \
            --image="$IMAGE" \
            --region="${{ env.REGION }}" \
            --platform=managed \
            --timeout=3600 \
            $AUTH_FLAG $FLAGS \
            --labels=commit=${{ github.sha }},service=${{ matrix.service }}
