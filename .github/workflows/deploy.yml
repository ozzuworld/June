name: Deploy Services to Cloud Run

on:
  push:
    branches: [ main, master ]
    paths:
      - 'June/services/**'
      - 'services/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch: {}

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION || 'us-central1' }}
  AR_REPO: ${{ vars.ARTIFACT_REPO || 'june' }}

jobs:
  # Deploy core services
  deploy-core:
    name: Deploy Core Services
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: june-idp
            path: services/june-idp
            timeout: 900
            concurrency: 20
            cpu: "2"
            memory: "2Gi"
            min_instances: 1
          - service: june-orchestrator  
            path: June/services/june-orchestrator
            timeout: 3600
            concurrency: 10
            cpu: "1"
            memory: "512Mi"
            min_instances: 0
          - service: june-stt
            path: June/services/june-stt
            timeout: 3600
            concurrency: 1
            cpu: "2"
            memory: "1Gi"
            min_instances: 1
          # FIXED: Use june-tts (not june-chatterbox-tts) to match your actual service
          - service: june-tts
            path: June/services/june-chatterbox-tts  # This builds your Coqui TTS service
            timeout: 1800
            concurrency: 2
            cpu: "4"
            memory: "8Gi"
            min_instances: 0

    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}
      - uses: google-github-actions/setup-gcloud@v2
      - name: Configure Docker
        run: gcloud auth configure-docker "${REGION}-docker.pkg.dev" --quiet

      - name: Build and Deploy
        run: |
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/${{ matrix.service }}:${GITHUB_SHA}"
          docker build -t "$IMAGE" "${{ matrix.path }}"
          docker push "$IMAGE"
          
          # FIXED: Service account mapping to match actual service accounts
          case "${{ matrix.service }}" in
            june-orchestrator) SA="orchestrator-svc" ;;
            june-idp) SA="june-idp-svc" ;;
            june-stt) SA="stt-svc" ;;
            june-tts) SA="tts-svc" ;;  # FIXED: Use tts-svc, not chatterbox-tts-svc
            *) SA="${{ matrix.service }}-svc" ;;
          esac
          
          # Service-specific deployment
          if [ "${{ matrix.service }}" = "june-idp" ]; then
            # Keycloak deployment
            gcloud run deploy ${{ matrix.service }} \
              --image="$IMAGE" \
              --region="$REGION" \
              --cpu="${{ matrix.cpu }}" \
              --memory="${{ matrix.memory }}" \
              --min-instances="${{ matrix.min_instances }}" \
              --timeout="${{ matrix.timeout }}" \
              --concurrency="${{ matrix.concurrency }}" \
              --service-account="${SA}@${PROJECT_ID}.iam.gserviceaccount.com" \
              --allow-unauthenticated \
              --set-env-vars="KC_DB=postgres,KC_DB_URL=${{ secrets.KC_DB_URL }},KC_DB_USERNAME=${{ secrets.KC_DB_USERNAME }},KC_BOOTSTRAP_ADMIN_USERNAME=admin,KC_BOOTSTRAP_ADMIN_PASSWORD=bootstrap-temp,KC_HTTP_ENABLED=true,KC_HOSTNAME_STRICT=false,KC_TRANSACTION_XA_ENABLED=false,KC_HOSTNAME=${{ secrets.KC_BASE_URL }},KC_CACHE=local" \
              --set-secrets="KC_DB_PASSWORD=KC_DB_PASSWORD:latest" \
              --args="start,--http-enabled=true,--hostname-strict=false,--proxy-headers=xforwarded,--db=postgres,--transaction-xa-enabled=false,--cache=local"
              
          elif [ "${{ matrix.service }}" = "june-tts" ]; then
            # FIXED: TTS deployment using correct service name and credentials
            ENV_VARS="KC_BASE_URL=${{ secrets.KC_BASE_URL }},KC_REALM=${{ secrets.KC_REALM || 'june' }}"
            ENV_VARS="${ENV_VARS},TTS_CLIENT_ID=${{ secrets.TTS_CLIENT_ID }}"  # FIXED: Use TTS_CLIENT_ID
            ENV_VARS="${ENV_VARS},TTS_CLIENT_SECRET=${{ secrets.TTS_CLIENT_SECRET }}"  # FIXED: Use TTS_CLIENT_SECRET
            ENV_VARS="${ENV_VARS},DEVICE=cpu,LOG_LEVEL=INFO"
            ENV_VARS="${ENV_VARS},ENABLE_MULTILINGUAL=true,ENABLE_VOICE_CLONING=true"
            ENV_VARS="${ENV_VARS},ENABLE_EMOTION_CONTROL=true,MAX_TEXT_LENGTH=5000"
            ENV_VARS="${ENV_VARS},MODELS_PATH=/app/models,VOICES_PATH=/app/voices,CACHE_PATH=/app/cache"
            
            echo "🎭 Deploying TTS with Coqui engine and advanced features:"
            echo "   • Emotion control and exaggeration"
            echo "   • Voice cloning capabilities"
            echo "   • Multilingual support (23 languages)"
            echo "   • Sub-200ms inference"
            
            gcloud run deploy ${{ matrix.service }} \
              --image="$IMAGE" \
              --region="$REGION" \
              --cpu="${{ matrix.cpu }}" \
              --memory="${{ matrix.memory }}" \
              --min-instances="${{ matrix.min_instances }}" \
              --timeout="${{ matrix.timeout }}" \
              --concurrency="${{ matrix.concurrency }}" \
              --service-account="${SA}@${PROJECT_ID}.iam.gserviceaccount.com" \
              --allow-unauthenticated \
              --set-env-vars="$ENV_VARS" \
              --execution-environment="gen2" \
              --platform="managed"
              
          else
            # Other services (orchestrator, stt)
            ENV_VARS="KC_BASE_URL=${{ secrets.KC_BASE_URL }},KC_REALM=${{ secrets.KC_REALM || 'june' }}"
            
            # Add service-specific credentials and URLs
            if [ "${{ matrix.service }}" = "june-orchestrator" ]; then
              ENV_VARS="${ENV_VARS},STT_SERVICE_URL=https://june-stt-359243954.us-central1.run.app"
              # FIXED: Point to june-tts (not june-chatterbox-tts)
              ENV_VARS="${ENV_VARS},TTS_SERVICE_URL=https://june-tts-359243954.us-central1.run.app"
              ENV_VARS="${ENV_VARS},ORCHESTRATOR_CLIENT_ID=${{ secrets.ORCHESTRATOR_CLIENT_ID }}"
              ENV_VARS="${ENV_VARS},ORCHESTRATOR_CLIENT_SECRET=${{ secrets.ORCHESTRATOR_CLIENT_SECRET }}"
              ENV_VARS="${ENV_VARS},GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"
              
              echo "🎯 Orchestrator configured with:"
              echo "   • STT: https://june-stt-359243954.us-central1.run.app"
              echo "   • TTS: https://june-tts-359243954.us-central1.run.app (Coqui TTS)"
              echo "   • AI: Gemini with emotion detection"
              
            elif [ "${{ matrix.service }}" = "june-stt" ]; then
              ENV_VARS="${ENV_VARS},STT_CLIENT_ID=${{ secrets.STT_CLIENT_ID }}"
              ENV_VARS="${ENV_VARS},STT_CLIENT_SECRET=${{ secrets.STT_CLIENT_SECRET }}"
              ENV_VARS="${ENV_VARS},GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"
            fi
            
            gcloud run deploy ${{ matrix.service }} \
              --image="$IMAGE" \
              --region="$REGION" \
              --cpu="${{ matrix.cpu }}" \
              --memory="${{ matrix.memory }}" \
              --min-instances="${{ matrix.min_instances }}" \
              --timeout="${{ matrix.timeout }}" \
              --concurrency="${{ matrix.concurrency }}" \
              --service-account="${SA}@${PROJECT_ID}.iam.gserviceaccount.com" \
              --allow-unauthenticated \
              --set-env-vars="$ENV_VARS"
          fi

      - name: Service Health Check
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ matrix.service }} \
            --region="$REGION" \
            --format='value(status.uri)')
          
          echo "🏥 Health checking: $SERVICE_URL"
          
          # Wait up to 3 minutes for service to be healthy
          for i in {1..18}; do
            if curl -sf "$SERVICE_URL/healthz" > /dev/null 2>&1; then
              echo "✅ ${{ matrix.service }} is healthy"
              break
            fi
            echo "⏳ Waiting for ${{ matrix.service }} to be ready... ($i/18)"
            sleep 10
          done
          
          # Final health check
          if curl -sf "$SERVICE_URL/healthz" > /dev/null 2>&1; then
            echo "✅ ${{ matrix.service }} deployment successful"
          else
            echo "❌ ${{ matrix.service }} health check failed"
            exit 1
          fi

  # Deploy nginx-edge after core services
  deploy-edge:
    name: Deploy Edge Proxy
    runs-on: ubuntu-latest
    needs: deploy-core
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}
      - uses: google-github-actions/setup-gcloud@v2
      - name: Configure Docker
        run: gcloud auth configure-docker "${REGION}-docker.pkg.dev" --quiet

      - name: Deploy nginx-edge
        run: |
          # Build and push image
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/nginx-edge:${GITHUB_SHA}"
          docker build -t "$IMAGE" "services/nginx-edge"
          docker push "$IMAGE"
          
          # FIXED: Configure environment variables for actual TTS service
          ENV_VARS="UPSTREAM_IDP=https://june-idp-359243954.us-central1.run.app"
          ENV_VARS="${ENV_VARS},UPSTREAM_ORCH=https://june-orchestrator-359243954.us-central1.run.app"
          ENV_VARS="${ENV_VARS},UPSTREAM_STT=https://june-stt-359243954.us-central1.run.app"
          ENV_VARS="${ENV_VARS},UPSTREAM_TTS=https://june-tts-359243954.us-central1.run.app"  # FIXED
          
          echo "🚀 Deploying nginx-edge with TTS routing:"
          echo "   IDP: https://june-idp-359243954.us-central1.run.app"
          echo "   ORCH: https://june-orchestrator-359243954.us-central1.run.app"
          echo "   STT: https://june-stt-359243954.us-central1.run.app"
          echo "   TTS: https://june-tts-359243954.us-central1.run.app"
          
          # Deploy nginx-edge
          gcloud run deploy nginx-edge \
            --project="$PROJECT_ID" \
            --image="$IMAGE" \
            --region="$REGION" \
            --cpu="1" \
            --memory="512Mi" \
            --min-instances="0" \
            --max-instances="10" \
            --timeout="300" \
            --concurrency="100" \
            --service-account="nginx-edge-svc@${PROJECT_ID}.iam.gserviceaccount.com" \
            --allow-unauthenticated \
            --set-env-vars="$ENV_VARS"
          
          # Get nginx-edge URL
          EDGE_URL=$(gcloud run services describe nginx-edge --region="$REGION" --format='value(status.uri)')
          
          echo ""
          echo "🌐 nginx-edge deployed: $EDGE_URL"
          echo "🎯 Test these URLs:"
          echo "   $EDGE_URL/healthz"
          echo "   $EDGE_URL/auth/realms/june"
          echo "   $EDGE_URL/orchestrator/healthz"
          echo "   $EDGE_URL/stt/healthz"
          echo "   $EDGE_URL/tts/healthz"

      - name: Test Edge Routing
        run: |
          EDGE_URL=$(gcloud run services describe nginx-edge --region="$REGION" --format='value(status.uri)')
          
          echo "🧪 Testing edge routing..."
          
          # Test health endpoints
          echo "Testing health endpoints..."
          curl -sf "$EDGE_URL/healthz" || echo "❌ Edge health failed"
          curl -sf "$EDGE_URL/tts/healthz" || echo "❌ TTS health failed"
          curl -sf "$EDGE_URL/orchestrator/healthz" || echo "❌ Orchestrator health failed"
          
          echo "✅ Edge routing tests completed"

  # Final validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [deploy-core, deploy-edge]
    steps:
      - name: Validate All Services
        run: |
          echo "🔍 Validating complete deployment..."
          
          # Get service URLs
          EDGE_URL=$(gcloud run services describe nginx-edge --region="${{ env.REGION }}" --format='value(status.uri)')
          ORCH_URL=$(gcloud run services describe june-orchestrator --region="${{ env.REGION }}" --format='value(status.uri)')
          TTS_URL=$(gcloud run services describe june-tts --region="${{ env.REGION }}" --format='value(status.uri)')  # FIXED
          STT_URL=$(gcloud run services describe june-stt --region="${{ env.REGION }}" --format='value(status.uri)')
          IDP_URL=$(gcloud run services describe june-idp --region="${{ env.REGION }}" --format='value(status.uri)')
          
          echo "📋 Deployment Summary:"
          echo "   Edge Proxy: $EDGE_URL"
          echo "   Orchestrator: $ORCH_URL"
          echo "   TTS Service: $TTS_URL"  # FIXED
          echo "   Speech-to-Text: $STT_URL"
          echo "   Identity Provider: $IDP_URL"
          
          echo ""
          echo "🎭 TTS Features:"
          echo "   • Emotion control and exaggeration"
          echo "   • Voice cloning with reference audio"
          echo "   • Multilingual support (23 languages)"
          echo "   • Sub-200ms inference for real-time use"
          echo "   • Coqui TTS engine"
          
          echo ""
          echo "🧪 Quick Tests:"
          echo "   Edge Health: curl $EDGE_URL/healthz"
          echo "   TTS Voices: curl $EDGE_URL/tts/v1/voices"
          echo "   TTS Languages: curl $EDGE_URL/tts/v1/languages"
          echo "   Auth Realm: curl $EDGE_URL/realms/june"
          
          echo ""
          echo "🚀 Voice Chatbot Ready!"
          echo "   Your AI voice assistant is now powered by Coqui TTS"
          echo "   Visit: $EDGE_URL"