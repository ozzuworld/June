# GitHub Actions: Build & Deploy Cloud Run (June monorepo)

name: Build & Deploy Cloud Run (June monorepo)

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'June/services/**'
      - 'services/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch: {}
  schedule:
    - cron: '0 5 1 */3 *'  # every 3 months

defaults:
  run:
    shell: bash

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION || 'us-central1' }}
  AR_REPO: ${{ vars.ARTIFACT_REPO || 'june' }}
  SERVICES_ROOT: ${{ vars.SERVICES_ROOT || 'services' }}
  ALLOW_PUBLIC: ${{ vars.ALLOW_PUBLIC || 'true' }}

jobs:
  deploy:
    name: Build & deploy each service to Cloud Run
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        service:
          - june-orchestrator
          - june-stt
          - june-tts

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev" --quiet

      - name: Resolve service path (auto-detect root)
        id: rpath
        run: |
          set -euo pipefail
          echo "Searching Dockerfile for: ${{ matrix.service }}"
          FOUND="$(git ls-files | grep -E '(^|/)(June/)?services/${{ matrix.service }}/Dockerfile$' | head -n1 || true)"
          if [ -z "$FOUND" ]; then
            FOUND="$(find . -type f -name Dockerfile -path "*/${{ matrix.service }}/Dockerfile" | head -n1 || true)"
          fi
          if [ -z "$FOUND" ]; then
            echo "Could not find Dockerfile for ${{ matrix.service }}" >&2
            echo "All Dockerfiles:" >&2
            find . -type f -name Dockerfile | sed 's#^\./##' | sort || true
            exit 1
          fi
          DIR="$(dirname "$FOUND")"
          echo "workdir=$DIR" >> "$GITHUB_OUTPUT"
          echo "Found: $FOUND"

      - name: Build & Push image
        working-directory: ${{ steps.rpath.outputs.workdir }}
        env:
          IMAGE: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ matrix.service }}:${{ github.sha }}
        run: |
          docker build --pull -t "$IMAGE" .
          docker push "$IMAGE"
          echo "IMAGE=$IMAGE" >> "$GITHUB_ENV"

      - name: Compute per-service flags
        id: flags
        run: |
          case "${{ matrix.service }}" in
            june-orchestrator)
              echo "extra=--cpu=1 --memory=512Mi --concurrency=10 --min-instances=0 --service-account=orchestrator-svc@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" >> "$GITHUB_OUTPUT"
              ;;
            june-stt)
              echo "extra=--cpu=2 --memory=1Gi --concurrency=1 --min-instances=1 --service-account=stt-svc@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" >> "$GITHUB_OUTPUT"
              ;;
            june-tts)
              echo "extra=--cpu=2 --memory=1Gi --concurrency=4 --min-instances=0 --service-account=tts-svc@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" >> "$GITHUB_OUTPUT"
              ;;
            *)
              echo "extra=" >> "$GITHUB_OUTPUT"
              ;;
          esac

      - name: Deploy to Cloud Run
        run: |
          FLAGS="${{ steps.flags.outputs.extra }}"
          if [[ "${{ env.ALLOW_PUBLIC }}" == "true" ]]; then
            AUTH_FLAG="--allow-unauthenticated"
          else
            AUTH_FLAG="--no-allow-unauthenticated"
          fi

          FLAGS+=" --set-secrets NEON_DB_URL=NEON_DB_URL:latest"
          FLAGS+=" --set-secrets NEON_API_KEY=NEON_API_KEY:latest"
          FLAGS+=" --set-secrets UPSTASH_REDIS_REST_URL=UPSTASH_REDIS_REST_URL:latest"
          FLAGS+=" --set-secrets UPSTASH_REDIS_REST_TOKEN=UPSTASH_REDIS_REST_TOKEN:latest"
          FLAGS+=" --set-secrets UPSTASH_REDIS_URL=UPSTASH_REDIS_URL:latest"
          FLAGS+=" --set-secrets QDRANT_API_KEY=QDRANT_API_KEY:latest"
          FLAGS+=" --set-secrets QDRANT_URL=QDRANT_URL:latest"
          FLAGS+=" --set-secrets R2_ACCESS_KEY_ID=R2_ACCESS_KEY_ID:latest"
          FLAGS+=" --set-secrets R2_SECRET_ACCESS_KEY=R2_SECRET_ACCESS_KEY:latest"
          FLAGS+=" --set-secrets R2_ENDPOINT=R2_ENDPOINT:latest"
          FLAGS+=" --set-secrets R2_BUCKET=R2_BUCKET:latest"

          gcloud run deploy "${{ matrix.service }}" \
            --image="$IMAGE" \
            --region="${{ env.REGION }}" \
            --platform=managed \
            --timeout=3600 \
            $AUTH_FLAG $FLAGS \
            --labels="commit=${{ github.sha }},service=${{ matrix.service }}"
