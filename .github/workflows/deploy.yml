# GitHub Actions: Build & Deploy Cloud Run (June monorepo)
name: Build & Deploy Cloud Run (June monorepo)

on:
  push:
    branches: [ main, master ]
    paths:
      - 'June/services/**'
      - 'services/**'
      - 'June/June/services/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch: {}
  schedule:
    - cron: '0 5 1 */3 *'  # every 3 months

defaults:
  run:
    shell: bash

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  AR_REPO: ${{ vars.ARTIFACT_REPO }}
  SERVICES_ROOT: ${{ vars.SERVICES_ROOT }}
  ALLOW_PUBLIC: ${{ vars.ALLOW_PUBLIC }}

jobs:
  deploy:
    name: Build & deploy each service to Cloud Run
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        service:
          - june-orchestrator
          - june-stt
          - june-tts
          - june-idp

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Set sane defaults
        run: |
          set -euo pipefail
          # REGION default
          if [[ -z "${REGION:-}" || "${REGION}" == "(unset)" ]]; then
            echo "REGION=us-central1" >> "$GITHUB_ENV"
          fi
          # Artifact Registry repo name default
          if [[ -z "${AR_REPO:-}" || "${AR_REPO}" == "(unset)" ]]; then
            echo "AR_REPO=june" >> "$GITHUB_ENV"
          fi
          # services root default
          if [[ -z "${SERVICES_ROOT:-}" || "${SERVICES_ROOT}" == "(unset)" ]]; then
            echo "SERVICES_ROOT=services" >> "$GITHUB_ENV"
          fi
          # public default
          if [[ -z "${ALLOW_PUBLIC:-}" || "${ALLOW_PUBLIC}" == "(unset)" ]]; then
            echo "ALLOW_PUBLIC=true" >> "$GITHUB_ENV"
          fi

      - name: Ensure PROJECT_ID (fallback from SA)
        run: |
          set -euo pipefail
          if [[ -z "${PROJECT_ID:-}" || "${PROJECT_ID}" == "(unset)" ]]; then
            SA="${{ secrets.DEPLOYER_SA }}"
            if [[ "$SA" =~ @(.+)\.iam\.gserviceaccount\.com$ ]]; then
              PID="${BASH_REMATCH[1]}"
              echo "PROJECT_ID=$PID" >> "$GITHUB_ENV"
              gcloud config set project "$PID"
            else
              PID="$(gcloud config get-value project --quiet 2>/dev/null || true)"
              if [[ -n "$PID" && "$PID" != "(unset)" ]]; then
                echo "PROJECT_ID=$PID" >> "$GITHUB_ENV"
              else
                echo "❌ PROJECT_ID not set. Set repo variable GCP_PROJECT_ID or fix DEPLOYER_SA." >&2
                exit 1
              fi
            fi
          else
            gcloud config set project "$PROJECT_ID"
          fi

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker "${REGION}-docker.pkg.dev" --quiet

      - name: Resolve service path (auto-detect Dockerfile)
        id: rpath
        run: |
          set -euo pipefail
          echo "Searching Dockerfile for: ${{ matrix.service }}"
          FOUND="$(git ls-files | grep -E '(^|/)(June/)?(June/)?services/${{ matrix.service }}/Dockerfile$' | head -n1 || true)"
          if [[ -z "$FOUND" ]]; then
            FOUND="$(find . -type f -name Dockerfile -path "*/${{ matrix.service }}/Dockerfile" | head -n1 || true)"
          fi
          if [[ -z "$FOUND" ]]; then
            echo "Could not find Dockerfile for ${{ matrix.service }}" >&2
            echo "All Dockerfiles:" >&2
            find . -type f -name Dockerfile | sed 's#^\./##' | sort || true
            exit 1
          fi
          DIR="$(dirname "$FOUND")"
          echo "workdir=$DIR" >> "$GITHUB_OUTPUT"
          echo "dockerfile=$FOUND" >> "$GITHUB_OUTPUT"
          echo "Found: $FOUND"

      - name: "Debug: show Dockerfile used (and ensure multi-stage for june-idp)"
        run: |
          set -euo pipefail
          echo "PWD: $(pwd)"
          echo "Dockerfile: ${{ steps.rpath.outputs.dockerfile }}"
          sed -n '1,160p' "${{ steps.rpath.outputs.dockerfile }}"
          BYTES=$(wc -c < "${{ steps.rpath.outputs.dockerfile }}")
          echo "Size(bytes): ${BYTES}"
          if [[ "${{ matrix.service }}" == "june-idp" ]]; then
            if ! grep -qE '^FROM .* AS builder' "${{ steps.rpath.outputs.dockerfile }}"; then
              echo "::error ::The Dockerfile for june-idp must be multi-stage and start with 'FROM ... AS builder'."
              echo "This prevents Docker from trying to pull a non-existent 'builder:latest' image."
              exit 1
            fi
          fi

      - name: Build & Push image (explicit file + context)
        run: |
          set -euo pipefail
          : "${PROJECT_ID:?PROJECT_ID is not set}"
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/${{ matrix.service }}:${GITHUB_SHA}"
          echo "IMAGE=$IMAGE" >> "$GITHUB_ENV"

          docker build --pull \
            -t "$IMAGE" \
            -f "${{ steps.rpath.outputs.dockerfile }}" \
            "${{ steps.rpath.outputs.workdir }}"
          docker push "$IMAGE"

      - name: Compute per-service flags
        id: flags
        run: |
          set -euo pipefail
          case "${{ matrix.service }}" in
            june-orchestrator)
              echo "extra=--cpu=1 --memory=512Mi --concurrency=10 --min-instances=0 --service-account=orchestrator-svc@${PROJECT_ID}.iam.gserviceaccount.com" >> "$GITHUB_OUTPUT"
              ;;
            june-stt)
              echo "extra=--cpu=2 --memory=1Gi --concurrency=1 --min-instances=1 --service-account=stt-svc@${PROJECT_ID}.iam.gserviceaccount.com" >> "$GITHUB_OUTPUT"
              ;;
            june-tts)
              echo "extra=--cpu=2 --memory=1Gi --concurrency=4 --min-instances=0 --service-account=tts-svc@${PROJECT_ID}.iam.gserviceaccount.com" >> "$GITHUB_OUTPUT"
              ;;
            june-idp)
              # Keycloak (IdP) – use proper proxy/hostname flags. KC_DB_PASSWORD comes via Secret Manager.
              ENVVARS="KC_DB=postgres"
              [[ -n "${{ secrets.KC_DB_URL }}"      ]] && ENVVARS+=",KC_DB_URL=${{ secrets.KC_DB_URL }}"
              [[ -n "${{ secrets.KC_DB_USERNAME }}" ]] && ENVVARS+=",KC_DB_USERNAME=${{ secrets.KC_DB_USERNAME }}"
              [[ -n "${{ secrets.KC_BASE_URL }}"    ]] && ENVVARS+=",KC_BASE_URL=${{ secrets.KC_BASE_URL }}"
              [[ -n "${{ secrets.KC_BOOTSTRAP_ADMIN_USERNAME }}" ]] && ENVVARS+=",KC_BOOTSTRAP_ADMIN_USERNAME=${{ secrets.KC_BOOTSTRAP_ADMIN_USERNAME }}" || ENVVARS+=",KC_BOOTSTRAP_ADMIN_USERNAME=admin"
              [[ -n "${{ secrets.KC_BOOTSTRAP_ADMIN_PASSWORD }}" ]] && ENVVARS+=",KC_BOOTSTRAP_ADMIN_PASSWORD=${{ secrets.KC_BOOTSTRAP_ADMIN_PASSWORD }}" || ENVVARS+=",KC_BOOTSTRAP_ADMIN_PASSWORD=bootstrap-temp"

              FLAGS="--cpu=2 --memory=2Gi --concurrency=20 --min-instances=1 \
                     --service-account=orchestrator-svc@${PROJECT_ID}.iam.gserviceaccount.com \
                     --set-env-vars ${ENVVARS} \
                     --args start --args --http-enabled=true --args --proxy-headers=xforwarded"

              if [[ -n "${{ secrets.KC_BASE_URL }}" ]]; then
                FLAGS+=" --args --hostname=${{ secrets.KC_BASE_URL }}"
              fi

              echo "extra=${FLAGS}" >> "$GITHUB_OUTPUT"
              ;;
            *)
              echo "extra=" >> "$GITHUB_OUTPUT"
              ;;
          esac

      - name: Deploy to Cloud Run
        run: |
          set -euo pipefail
          FLAGS="${{ steps.flags.outputs.extra }}"

          if [[ "${ALLOW_PUBLIC}" == "true" ]]; then
            AUTH_FLAG="--allow-unauthenticated"
          else
            AUTH_FLAG="--no-allow-unauthenticated"
          fi

          # Inject KC_DB_PASSWORD from Secret Manager if it exists (Option B)
          if [[ "${{ matrix.service }}" == "june-idp" ]]; then
            if gcloud secrets versions list KC_DB_PASSWORD --format='value(name)' --filter='state=enabled' --limit=1 >/dev/null 2>&1; then
              FLAGS+=" --set-secrets KC_DB_PASSWORD=KC_DB_PASSWORD:latest"
            else
              echo "::warning:: Secret KC_DB_PASSWORD missing or has no enabled version; skipping injection"
            fi
          fi

          gcloud run deploy "${{ matrix.service }}" \
            --image="$IMAGE" \
            --region="${REGION}" \
            --platform=managed \
            --timeout=3600 \
            $AUTH_FLAG $FLAGS \
            --labels="commit=${GITHUB_SHA},service=${{ matrix.service }}"

      - name: Enable session affinity (june-idp only)
        if: matrix.service == 'june-idp'
        run: |
          set -euo pipefail
          gcloud run services update june-idp --region "${REGION}" --session-affinity || true

      - name: Output service URL (june-idp only)
        if: matrix.service == 'june-idp'
        run: |
          URL="$(gcloud run services describe june-idp --region "${REGION}" --format='value(status.uri)')"
          echo "june-idp URL: ${URL}"
          echo "::notice title=Keycloak URL::${URL}"
