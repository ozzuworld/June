# .github/workflows/deploy-gke-fixed.yml
# FIXED GitHub Actions workflow for June Platform deployment

name: Deploy June Platform to GKE (Fixed)

on:
  push:
    branches: [ main, master ]
    paths:
      - 'June/services/**'
      - 'services/**'
      - 'k8s/**'
      - 'infra/gke/**'
      - '.github/workflows/deploy-gke-fixed.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        type: boolean
        default: false

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID || 'main-buffer-469817-v7' }}
  REGION: ${{ vars.GCP_REGION || 'us-central1' }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME || 'june-unified-cluster' }}
  ARTIFACT_REGISTRY: ${{ vars.GCP_REGION || 'us-central1' }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID || 'main-buffer-469817-v7' }}/june

jobs:
  # Deploy Infrastructure
  deploy-infrastructure:
    name: Deploy GKE Infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      cluster_name: ${{ steps.terraform.outputs.cluster_name }}
      static_ip: ${{ steps.terraform.outputs.static_ip }}
      artifact_registry_url: ${{ steps.terraform.outputs.artifact_registry_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Deploy infrastructure
        id: terraform
        working-directory: infra/gke
        run: |
          # Initialize Terraform
          terraform init -upgrade
          
          # Plan deployment
          terraform plan \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="cluster_name=${{ env.CLUSTER_NAME }}"
          
          # Apply infrastructure
          terraform apply -auto-approve \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="cluster_name=${{ env.CLUSTER_NAME }}"
          
          # Export outputs
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "static_ip=$(terraform output -raw static_ip)" >> $GITHUB_OUTPUT
          echo "artifact_registry_url=$(terraform output -raw artifact_registry_url)" >> $GITHUB_OUTPUT

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ steps.terraform.outputs.cluster_name }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }}

  # Setup Secrets and Configuration
  setup-secrets:
    name: Setup Kubernetes Secrets
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ needs.deploy-infrastructure.outputs.cluster_name }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }}

      - name: Create namespace
        run: |
          kubectl create namespace june-services --dry-run=client -o yaml | kubectl apply -f -

      - name: Setup service secrets
        run: |
          kubectl create secret generic june-secrets \
            --namespace=june-services \
            --from-literal=ORCHESTRATOR_CLIENT_ID="orchestrator-client" \
            --from-literal=ORCHESTRATOR_CLIENT_SECRET="${{ secrets.ORCHESTRATOR_CLIENT_SECRET || 'orchestrator-secret-key-12345' }}" \
            --from-literal=STT_CLIENT_ID="stt-client" \
            --from-literal=STT_CLIENT_SECRET="${{ secrets.STT_CLIENT_SECRET || 'stt-secret-key-12345' }}" \
            --from-literal=TTS_CLIENT_ID="tts-client" \
            --from-literal=TTS_CLIENT_SECRET="${{ secrets.TTS_CLIENT_SECRET || 'tts-secret-key-12345' }}" \
            --from-literal=GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY || '' }}" \
            --from-literal=CHATTERBOX_API_KEY="${{ secrets.CHATTERBOX_API_KEY || '' }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Setup Firebase secrets (optional)
        run: |
          kubectl create secret generic firebase-secrets \
            --namespace=june-services \
            --from-literal=FIREBASE_PROJECT_ID="${{ secrets.FIREBASE_PROJECT_ID || '' }}" \
            --from-literal=FIREBASE_WEB_API_KEY="${{ secrets.FIREBASE_WEB_API_KEY || '' }}" \
            --from-literal=FIREBASE_SERVICE_ACCOUNT="${{ secrets.FIREBASE_SERVICE_ACCOUNT || '' }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      # Add this to the workflow after line 150:
      - name: Apply resource limits patch
        run: |
          # Patch all deployments with free tier resource limits
          kubectl patch deployment june-orchestrator -n june-services -p '{"spec":{"template":{"spec":{"containers":[{"name":"june-orchestrator","resources":{"requests":{"memory":"512Mi","cpu":"300m"},"limits":{"memory":"1Gi","cpu":"800m"}}}]}}}}'
          kubectl patch deployment june-stt -n june-services -p '{"spec":{"template":{"spec":{"containers":[{"name":"june-stt","resources":{"requests":{"memory":"256Mi","cpu":"200m"},"limits":{"memory":"512Mi","cpu":"500m"}}}]}}}}'

  # Build and Push Images
  build-images:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, setup-secrets]
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        service: [june-orchestrator, june-stt, june-idp]
        include:
          - service: june-orchestrator
            context: June/services/june-orchestrator
          - service: june-stt
            context: June/services/june-stt
          - service: june-idp
            context: services/june-idp
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and push image
        run: |
          IMAGE_TAG="${{ env.ARTIFACT_REGISTRY }}/${{ matrix.service }}:${{ github.sha }}"
          LATEST_TAG="${{ env.ARTIFACT_REGISTRY }}/${{ matrix.service }}:latest"
          
          echo "üê≥ Building ${{ matrix.service }}..."
          
          docker build \
            -t "$IMAGE_TAG" \
            -t "$LATEST_TAG" \
            "${{ matrix.context }}"
          
          docker push "$IMAGE_TAG"
          docker push "$LATEST_TAG"
          
          echo "‚úÖ Successfully pushed ${{ matrix.service }}"

  # Deploy Keycloak
  deploy-keycloak:
    name: Deploy Keycloak IDP
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, setup-secrets, build-images]
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ needs.deploy-infrastructure.outputs.cluster_name }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }}

      - name: Deploy Keycloak
        run: |
          # Update image references
          sed -i "s|quay.io/keycloak/keycloak:23.0.3|${{ env.ARTIFACT_REGISTRY }}/june-idp:${{ github.sha }}|g" k8s/june-services/keycloak-deployment.yaml
          
          kubectl apply -f k8s/june-services/keycloak-deployment.yaml
          
          # Wait for Keycloak to be ready
          kubectl wait --namespace june-services \
            --for=condition=available deployment/june-idp \
            --timeout=600s

  # Deploy Services
  deploy-services:
    name: Deploy June Services
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, setup-secrets, build-images, deploy-keycloak]
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ needs.deploy-infrastructure.outputs.cluster_name }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }}

      - name: Update service manifests
        run: |
          # Update image references with commit SHA
          sed -i "s|:latest|:${{ github.sha }}|g" k8s/june-services/june-services-with-auth.yaml
          
          # Update registry URL
          sed -i "s|us-central1-docker.pkg.dev/main-buffer-469817-v7/june|${{ env.ARTIFACT_REGISTRY }}|g" k8s/june-services/june-services-with-auth.yaml

      - name: Deploy June services
        run: |
          # Deploy all June services
          kubectl apply -f k8s/june-services/june-services-with-auth.yaml
          
          # Wait for deployments
          kubectl wait --namespace june-services \
            --for=condition=available deployment \
            --selector=app \
            --timeout=600s

      - name: Deploy ingress
        run: |
          # Update ingress with static IP
          sed -i "s|allsafe-gclb-ip|june-services-ip|g" k8s/june-services/ingress.yaml
          
          kubectl apply -f k8s/june-services/managedcert.yaml
          kubectl apply -f k8s/june-services/ingress.yaml

      - name: Deployment summary
        run: |
          echo "üéâ June Platform deployment completed successfully!"
          echo ""
          echo "üìã Deployment Details:"
          echo "  Project: ${{ env.PROJECT_ID }}"
          echo "  Region: ${{ env.REGION }}"
          echo "  Cluster: ${{ needs.deploy-infrastructure.outputs.cluster_name }}"
          echo "  Static IP: ${{ needs.deploy-infrastructure.outputs.static_ip }}"
          echo "  Registry: ${{ needs.deploy-infrastructure.outputs.artifact_registry_url }}"
          echo "  Commit: ${{ github.sha }}"
          echo ""
          echo "üîß Services Deployed:"
          echo "  ‚Ä¢ Keycloak IDP (Authentication)"
          echo "  ‚Ä¢ June Orchestrator (AI Engine)"
          echo "  ‚Ä¢ June STT (Speech-to-Text)"
          echo "  ‚Ä¢ June TTS (Text-to-Speech)"
          echo ""
          echo "üåê Access URLs (after DNS configuration):"
          echo "  ‚Ä¢ Keycloak Admin: https://june-idp.allsafe.world/auth/admin"
          echo "  ‚Ä¢ June Orchestrator: https://june-orchestrator.allsafe.world"
          echo "  ‚Ä¢ STT Service: https://june-stt.allsafe.world"
          echo ""
          echo "üîß Next Steps:"
          echo "  1. Configure DNS to point to ${{ needs.deploy-infrastructure.outputs.static_ip }}"
          echo "  2. SSL certificates will auto-provision"
          echo "  3. Update API keys in secrets if needed"
          echo "  4. Test services via the deployed URLs"