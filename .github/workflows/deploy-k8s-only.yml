name: 🚀 Deploy to Kubernetes

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_restart:
        description: 'Force restart all deployments'
        required: false
        default: false
        type: boolean
      services:
        description: 'Services to deploy (comma-separated, leave empty for all)'
        required: false
        default: ''
        type: string

env:
  KUBE_NAMESPACE: june
  
permissions:
  contents: read

jobs:
  deploy:
    name: 🔧 Deploy to K8s
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > ~/.kube/config
          chmod 600 ~/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: 🔍 Verify kubeconfig
        run: |
          echo "📋 Current kubeconfig contexts:"
          kubectl config get-contexts
          echo "📋 Current context:"
          kubectl config current-context

      - name: 🔍 Verify Kubernetes connection
        run: |
          echo "🔍 Testing connection to cluster..."
          kubectl cluster-info
          kubectl get nodes

      - name: ✅ Verify manifests exist
        run: |
          echo "🔍 Verifying k8s manifest files..."
          ls -la k8s/
          
          REQUIRED_FILES=(
            "namespace.yaml"
            "configmap.yaml" 
            "secrets.yaml"
            "june-stt-deployment.yaml"
            "june-tts-deployment.yaml"
            "june-orchestrator-deployment.yaml"
            "june-dark-deployment.yaml"
            "june-idp-deployment.yaml"
            "june-web-deployment.yaml"
            "ingress.yaml"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "k8s/$file" ]; then
              echo "✅ k8s/$file exists"
            else
              echo "❌ k8s/$file NOT FOUND"
              exit 1
            fi
          done

      - name: 🏗️ Apply base configuration
        run: |
          echo "🏗️ Applying base Kubernetes resources..."
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secrets.yaml

      - name: 🚀 Deploy services
        run: |
          echo "🚀 Deploying services..."
          
          SERVICES_INPUT="${{ github.event.inputs.services }}"
          ALL_SERVICES=("june-stt" "june-tts" "june-orchestrator" "june-dark" "june-idp" "june-web")
          
          if [ -z "$SERVICES_INPUT" ]; then
            echo "📋 Deploying all services..."
            SERVICES_TO_DEPLOY=("${ALL_SERVICES[@]}")
          else
            echo "📋 Deploying selected services: $SERVICES_INPUT"
            IFS=',' read -ra SERVICES_TO_DEPLOY <<< "$SERVICES_INPUT"
          fi
          
          for service in "${SERVICES_TO_DEPLOY[@]}"; do
            service=$(echo "$service" | xargs)
            if [ -f "k8s/${service}-deployment.yaml" ]; then
              echo "🔄 Applying ${service}-deployment.yaml"
              kubectl apply -f "k8s/${service}-deployment.yaml"
            else
              echo "⚠️ Warning: k8s/${service}-deployment.yaml not found"
            fi
          done

      - name: 🌐 Apply ingress
        run: |
          echo "🌐 Applying ingress configuration..."
          kubectl apply -f k8s/ingress.yaml

      - name: 🔄 Force restart deployments (if requested)
        if: github.event.inputs.force_restart == 'true'
        run: |
          echo "🔄 Force restarting all deployments..."
          kubectl rollout restart deployment -n $KUBE_NAMESPACE

      - name: ⏳ Wait for deployments
        run: |
          echo "⏳ Waiting for deployments to be ready..."
          
          SERVICES_INPUT="${{ github.event.inputs.services }}"
          ALL_SERVICES=("june-stt" "june-tts" "june-orchestrator" "june-dark" "june-idp" "june-web")
          
          if [ -z "$SERVICES_INPUT" ]; then
            SERVICES_TO_CHECK=("${ALL_SERVICES[@]}")
          else
            IFS=',' read -ra SERVICES_TO_CHECK <<< "$SERVICES_INPUT"
          fi
          
          for service in "${SERVICES_TO_CHECK[@]}"; do
            service=$(echo "$service" | xargs)
            echo "⏳ Waiting for $service to be ready..."
            if kubectl get deployment "$service" -n $KUBE_NAMESPACE >/dev/null 2>&1; then
              kubectl rollout status deployment/"$service" -n $KUBE_NAMESPACE --timeout=300s
            else
              echo "⚠️ Deployment $service not found, skipping..."
            fi
          done

      - name: 📊 Show deployment status
        run: |
          echo "📊 Final deployment status:"
          kubectl get pods -n $KUBE_NAMESPACE
          kubectl get services -n $KUBE_NAMESPACE
          echo "✅ Deployment completed!"
