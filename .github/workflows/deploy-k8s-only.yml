name: 🚀 Deploy Only (No Build)

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      services:
        description: 'Services to deploy (comma-separated, empty for all)'
        required: false
        default: ''
        type: string
      force_restart:
        description: 'Force restart deployments'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io/${{ secrets.DOCKERHUB_USERNAME }}
  KUBE_NAMESPACE: june
  IMAGE_TAG: ${{ github.event.inputs.image_tag }}

permissions:
  contents: read

jobs:
  deploy:
    name: 🔧 Deploy to Kubernetes
    runs-on: self-hosted  # ✅ CHANGED: Use self-hosted runner
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      # ✅ REMOVED: Kubeconfig setup step (not needed on self-hosted)

      - name: 🔍 Verify connection
        run: |
          echo "🔍 Testing Kubernetes connection..."
          kubectl cluster-info
          kubectl get nodes

      - name: ✅ Verify manifests exist
        run: |
          echo "🔍 Verifying k8s manifest files..."
          ls -la k8s/
          
          REQUIRED_FILES=(
            "namespace.yaml"
            "configmap.yaml" 
            "secrets.yaml"
            "june-stt-deployment.yaml"
            "june-tts-deployment.yaml"
            "june-orchestrator-deployment.yaml"
            "june-idp-deployment.yaml"
            "ingress.yaml"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "k8s/$file" ]; then
              echo "✅ k8s/$file exists"
            else
              echo "❌ k8s/$file NOT FOUND"
              exit 1
            fi
          done

      - name: 🔧 Update image tags in manifests
        run: |
          echo "🔧 Updating image tags to: $IMAGE_TAG"
          
          # Update image tags in deployment files
          for service in june-stt june-tts june-orchestrator june-idp; do
            if [ -f "k8s/${service}-deployment.yaml" ]; then
              sed -i "s|image: $REGISTRY/${service}:.*|image: $REGISTRY/${service}:$IMAGE_TAG|g" k8s/${service}-deployment.yaml
              echo "✅ Updated ${service} to use tag: $IMAGE_TAG"
            fi
          done

      - name: 🏗️ Apply base configuration
        run: |
          echo "🏗️ Applying base Kubernetes resources..."
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secrets.yaml

      - name: 🚀 Deploy services
        run: |
          echo "🚀 Deploying services..."
          
          SERVICES_INPUT="${{ github.event.inputs.services }}"
          ALL_SERVICES=("june-stt" "june-tts" "june-orchestrator" "june-idp")
          
          if [ -z "$SERVICES_INPUT" ]; then
            echo "📋 Deploying all services..."
            SERVICES_TO_DEPLOY=("${ALL_SERVICES[@]}")
          else
            echo "📋 Deploying selected services: $SERVICES_INPUT"
            IFS=',' read -ra SERVICES_TO_DEPLOY <<< "$SERVICES_INPUT"
          fi
          
          for service in "${SERVICES_TO_DEPLOY[@]}"; do
            service=$(echo "$service" | xargs)
            if [ -f "k8s/${service}-deployment.yaml" ]; then
              echo "🔄 Deploying ${service}..."
              kubectl apply -f "k8s/${service}-deployment.yaml"
            else
              echo "⚠️ Warning: k8s/${service}-deployment.yaml not found"
            fi
          done

      - name: 🌐 Apply ingress
        run: |
          echo "🌐 Applying ingress configuration..."
          kubectl apply -f k8s/ingress.yaml

      - name: 🔄 Force restart (if requested)
        if: github.event.inputs.force_restart == 'true'
        run: |
          echo "🔄 Force restarting deployments..."
          kubectl rollout restart deployment -n $KUBE_NAMESPACE

      - name: ⏳ Wait for deployments
        run: |
          echo "⏳ Waiting for deployments to be ready..."
          
          SERVICES_INPUT="${{ github.event.inputs.services }}"
          ALL_SERVICES=("june-stt" "june-tts" "june-orchestrator" "june-idp")
          
          if [ -z "$SERVICES_INPUT" ]; then
            SERVICES_TO_CHECK=("${ALL_SERVICES[@]}")
          else
            IFS=',' read -ra SERVICES_TO_CHECK <<< "$SERVICES_INPUT"
          fi
          
          for service in "${SERVICES_TO_CHECK[@]}"; do
            service=$(echo "$service" | xargs)
            echo "⏳ Waiting for $service to be ready..."
            if kubectl get deployment "$service" -n $KUBE_NAMESPACE >/dev/null 2>&1; then
              kubectl rollout status deployment/"$service" -n $KUBE_NAMESPACE --timeout=300s || {
                echo "❌ $service deployment failed or timed out"
                kubectl describe deployment "$service" -n $KUBE_NAMESPACE
                kubectl describe pods -l app="$service" -n $KUBE_NAMESPACE
                exit 1
              }
            else
              echo "⚠️ Deployment $service not found, skipping..."
            fi
          done
          
          echo "✅ All deployments processed!"

      - name: 📊 Show deployment status
        run: |
          echo "📊 Final deployment status:"
          kubectl get pods -n $KUBE_NAMESPACE -o wide
          kubectl get services -n $KUBE_NAMESPACE
          echo "✅ Deployment completed!"
