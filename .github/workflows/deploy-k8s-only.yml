name: 🚀 Deploy Only (No Build) - Fixed kubectl

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
        type: string

env:
  REGISTRY: docker.io/${{ secrets.DOCKERHUB_USERNAME }}
  KUBE_NAMESPACE: june
  IMAGE_TAG: ${{ github.event.inputs.image_tag }}

permissions:
  contents: read

jobs:
  deploy:
    name: 🔧 Deploy to Kubernetes
    runs-on: self-hosted
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup kubectl configuration
        run: |
          echo "🔧 Setting up kubectl configuration..."
          
          # Ensure kubeconfig exists and is accessible
          if [ ! -f "/root/.kube/config" ]; then
            echo "❌ Kubeconfig not found at /root/.kube/config"
            echo "Please run: sudo cp /root/.kube/config /root/actions-runner/.kube/config"
            exit 1
          fi
          
          # Copy kubeconfig to runner directory if needed
          mkdir -p $HOME/.kube
          sudo cp /root/.kube/config $HOME/.kube/config || cp /root/.kube/config $HOME/.kube/config
          sudo chown $(whoami):$(whoami) $HOME/.kube/config 2>/dev/null || true
          
          # Set KUBECONFIG environment variable
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          
          # Test kubectl connection
          kubectl cluster-info
          kubectl get nodes

      - name: 🔍 Verify connection
        run: |
          echo "🔍 Testing Kubernetes connection..."
          kubectl cluster-info
          kubectl get nodes -o wide
          kubectl get namespaces

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔐 Create/Update Docker Registry Secret
        run: |
          kubectl create secret docker-registry dockerhub-secret \
            --docker-server=docker.io \
            --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
            --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
            --docker-email=${{ secrets.DOCKERHUB_EMAIL }} \
            --namespace=$KUBE_NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: ✅ Verify manifests exist
        run: |
          echo "🔍 Verifying k8s manifest files..."
          ls -la k8s/ || echo "k8s directory not found"
          
          if [ -d "k8s" ]; then
            echo "✅ k8s directory found"
            ls -la k8s/
          else
            echo "❌ k8s directory not found - creating basic structure"
            mkdir -p k8s
            echo "Please add your Kubernetes manifests to the k8s/ directory"
          fi

      - name: 🔧 Update image tags in manifests
        run: |
          echo "🔧 Updating image tags to: $IMAGE_TAG"
          
          if [ -d "k8s" ]; then
            # Update image tags in deployment files
            for service in june-stt june-tts june-orchestrator june-idp june-web june-dark; do
              if [ -f "k8s/${service}-deployment.yaml" ]; then
                sed -i "s|image: $REGISTRY/${service}:.*|image: $REGISTRY/${service}:$IMAGE_TAG|g" k8s/${service}-deployment.yaml
                echo "✅ Updated ${service} to use tag: $IMAGE_TAG"
              fi
            done
            
            # Also check complete-manifests.yaml
            if [ -f "k8s/complete-manifests.yaml" ]; then
              sed -i "s|image: ozzuworld/${service}:.*|image: $REGISTRY/${service}:$IMAGE_TAG|g" k8s/complete-manifests.yaml
              echo "✅ Updated complete manifests"
            fi
          fi

      - name: 🏗️ Apply base configuration
        run: |
          echo "🏗️ Applying base Kubernetes resources..."
          
          # Create namespace first
          kubectl create namespace $KUBE_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply configurations if they exist
          if [ -f "k8s-base-config.yaml" ]; then
            kubectl apply -f k8s-base-config.yaml
          fi
          
          if [ -f "k8s-storage.yaml" ]; then
            kubectl apply -f k8s-storage.yaml  
          fi

      - name: 🚀 Deploy services
        run: |
          echo "🚀 Deploying services..."
          
          if [ -d "k8s" ] && [ "$(ls -A k8s/)" ]; then
            echo "📋 Applying k8s manifests..."
            kubectl apply -f k8s/
          else
            echo "⚠️ No k8s manifests found to deploy"
            echo "Please add your Kubernetes deployment files to the k8s/ directory"
          fi

      - name: 🌐 Apply ingress
        run: |
          echo "🌐 Applying ingress configuration..."
          
          if [ -f "k8s-ingress.yaml" ]; then
            kubectl apply -f k8s-ingress.yaml
          elif [ -f "k8s/ingress.yaml" ]; then
            kubectl apply -f k8s/ingress.yaml
          else
            echo "ℹ️ No ingress configuration found"
          fi

      - name: ⏳ Wait for deployments
        run: |
          echo "⏳ Waiting for deployments to be ready..."
          
          # Get all deployments in the namespace
          DEPLOYMENTS=$(kubectl get deployments -n $KUBE_NAMESPACE -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo "")
          
          if [ -z "$DEPLOYMENTS" ]; then
            echo "ℹ️ No deployments found in namespace $KUBE_NAMESPACE"
          else
            echo "📋 Found deployments: $DEPLOYMENTS"
            
            for deployment in $DEPLOYMENTS; do
              echo "⏳ Waiting for $deployment to be ready..."
              kubectl rollout status deployment/"$deployment" -n $KUBE_NAMESPACE --timeout=300s || {
                echo "⚠️ $deployment deployment timeout or failed"
                kubectl describe deployment "$deployment" -n $KUBE_NAMESPACE
              }
            done
          fi

      - name: 📊 Show deployment status
        run: |
          echo "📊 Final deployment status:"
          echo "=========================="
          kubectl get all -n $KUBE_NAMESPACE -o wide || echo "No resources found"
          
          echo ""
          echo "🌐 Ingress Status:"
          kubectl get ingress -n $KUBE_NAMESPACE || echo "No ingress found"
          
          echo ""
          echo "📊 Cluster Summary:"
          kubectl get nodes -o wide
          
          echo "✅ Deployment workflow completed!"