# .github/workflows/deploy-gke-oracle.yml
# CLEAN GitHub Actions workflow for Oracle enterprise deployment

name: Deploy June Platform to GKE (Oracle Enterprise)

on:
  push:
    branches: [ main, master ]
    paths:
      - 'June/services/**'
      - 'services/**'
      - 'k8s/**'
      - 'infra/gke/**'
      - '.github/workflows/deploy-gke-oracle.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        type: boolean
        default: false

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID || 'main-buffer-469817-v7' }}
  REGION: ${{ vars.GCP_REGION || 'us-central1' }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME || 'june-unified-cluster' }}
  ARTIFACT_REGISTRY: ${{ vars.GCP_REGION || 'us-central1' }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID || 'main-buffer-469817-v7' }}/june

jobs:
  # Deploy Infrastructure (simplified)
  deploy-infrastructure:
    name: Deploy GKE Infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      cluster_name: ${{ steps.terraform.outputs.cluster_name }}
      static_ip: ${{ steps.terraform.outputs.static_ip }}
      artifact_registry_url: ${{ steps.terraform.outputs.artifact_registry_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Deploy infrastructure
        id: terraform
        working-directory: infra/gke
        run: |
          # Initialize Terraform
          terraform init -upgrade
          
          # Plan deployment
          terraform plan \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="cluster_name=${{ env.CLUSTER_NAME }}"
          
          # Apply infrastructure
          terraform apply -auto-approve \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="cluster_name=${{ env.CLUSTER_NAME }}"
          
          # Export outputs
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "static_ip=$(terraform output -raw static_ip)" >> $GITHUB_OUTPUT
          echo "artifact_registry_url=$(terraform output -raw artifact_registry_url)" >> $GITHUB_OUTPUT

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ steps.terraform.outputs.cluster_name }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }}

  # Setup Oracle Secrets
  setup-oracle-secrets:
    name: Setup Oracle Database Secrets
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ needs.deploy-infrastructure.outputs.cluster_name }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }}

      - name: Create namespaces
        run: |
          kubectl create namespace harbor --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace june-services --dry-run=client -o yaml | kubectl apply -f -

      - name: Setup Oracle wallet secret
        run: |
          # Create Oracle wallet secret from repository secrets
          # Note: Wallet files should be base64 encoded in GitHub secrets
          
          # Decode wallet files from secrets
          echo "${{ secrets.ORACLE_CWALLET_SSO }}" | base64 -d > cwallet.sso
          echo "${{ secrets.ORACLE_EWALLET_P12 }}" | base64 -d > ewallet.p12
          echo "${{ secrets.ORACLE_TNSNAMES_ORA }}" | base64 -d > tnsnames.ora
          echo "${{ secrets.ORACLE_SQLNET_ORA }}" | base64 -d > sqlnet.ora
          
          # Create wallet secrets for both namespaces
          kubectl create secret generic oracle-wallet \
            --namespace=harbor \
            --from-file=cwallet.sso=cwallet.sso \
            --from-file=ewallet.p12=ewallet.p12 \
            --from-file=tnsnames.ora=tnsnames.ora \
            --from-file=sqlnet.ora=sqlnet.ora \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret generic oracle-wallet \
            --namespace=june-services \
            --from-file=cwallet.sso=cwallet.sso \
            --from-file=ewallet.p12=ewallet.p12 \
            --from-file=tnsnames.ora=tnsnames.ora \
            --from-file=sqlnet.ora=sqlnet.ora \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Clean up files
          rm -f cwallet.sso ewallet.p12 tnsnames.ora sqlnet.ora

      - name: Setup Oracle credentials
        run: |
          # Create Oracle database credentials
          kubectl create secret generic oracle-credentials \
            --namespace=harbor \
            --from-literal=HARBOR_DB_HOST="adb.us-ashburn-1.oraclecloud.com" \
            --from-literal=HARBOR_DB_PORT="1522" \
            --from-literal=HARBOR_DB_SERVICE="ga342747dd21cdf_harbordb_high.adb.oraclecloud.com" \
            --from-literal=HARBOR_DB_USER="harbor_user" \
            --from-literal=HARBOR_DB_PASSWORD="${{ secrets.HARBOR_DB_PASSWORD }}" \
            --dry-run=client -o yaml | kubectl apply -f -

          kubectl create secret generic oracle-credentials \
            --namespace=june-services \
            --from-literal=KEYCLOAK_DB_HOST="adb.us-ashburn-1.oraclecloud.com" \
            --from-literal=KEYCLOAK_DB_PORT="1522" \
            --from-literal=KEYCLOAK_DB_SERVICE="ga342747dd21cdf_keycloakdb_high.adb.oraclecloud.com" \
            --from-literal=KEYCLOAK_DB_USER="keycloak_user" \
            --from-literal=KEYCLOAK_DB_PASSWORD="${{ secrets.KEYCLOAK_DB_PASSWORD }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Setup application secrets
        run: |
          kubectl create secret generic june-secrets \
            --namespace=june-services \
            --from-literal=ORCHESTRATOR_CLIENT_ID="orchestrator-client" \
            --from-literal=ORCHESTRATOR_CLIENT_SECRET="${{ secrets.ORCHESTRATOR_CLIENT_SECRET }}" \
            --from-literal=STT_CLIENT_ID="stt-client" \
            --from-literal=STT_CLIENT_SECRET="${{ secrets.STT_CLIENT_SECRET }}" \
            --from-literal=TTS_CLIENT_ID="tts-client" \
            --from-literal=TTS_CLIENT_SECRET="${{ secrets.TTS_CLIENT_SECRET }}" \
            --from-literal=GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
            --from-literal=CHATTERBOX_API_KEY="${{ secrets.CHATTERBOX_API_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -

  # Build and Push Images
  build-images:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, setup-oracle-secrets]
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        service: [june-orchestrator, june-stt, june-tts]
        include:
          - service: june-orchestrator
            context: June/services/june-orchestrator
          - service: june-stt
            context: June/services/june-stt
          - service: june-tts
            context: June/services/june-tts
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and push image
        run: |
          IMAGE_TAG="${{ env.ARTIFACT_REGISTRY }}/${{ matrix.service }}:${{ github.sha }}"
          LATEST_TAG="${{ env.ARTIFACT_REGISTRY }}/${{ matrix.service }}:latest"
          
          echo "üê≥ Building ${{ matrix.service }}..."
          
          docker build \
            -t "$IMAGE_TAG" \
            -t "$LATEST_TAG" \
            "${{ matrix.context }}"
          
          docker push "$IMAGE_TAG"
          docker push "$LATEST_TAG"
          
          echo "‚úÖ Successfully pushed ${{ matrix.service }}"

  # Deploy Harbor
