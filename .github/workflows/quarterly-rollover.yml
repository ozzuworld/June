name: quarterly-rollover
on:
  schedule:
    - cron: "0 6 1 1,4,7,10 *"
  workflow_dispatch:
    inputs:
      suffix:
        description: "Project suffix override (e.g., 2025q3)"
        required: false
      batch:
        description: "Batch label (q1/q2/q3/q4)"
        required: false

jobs:
  create-project:
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4

      - name: Inject Doppler (shared)
        uses: dopplerhq/cli-action@v2
        with:
          doppler-token: ${{ secrets.DOPPLER_SERVICE_TOKEN }}
          project: june
          config: prd
          command: bash -lc 'env | sort > doppler.env && tail -n +1 doppler.env'

      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.8.5 }

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.ORG_PROJECT_FACTORY_SA }}

      - name: Terraform Init (org)
        working-directory: infra/org
        run: terraform init -backend-config="hostname=app.terraform.io" -backend-config="organization=${{ secrets.TFC_ORG }}" -backend-config="workspaces=name:june-org"

      - name: Terraform Apply (org)
        working-directory: infra/org
        env:
          TF_VAR_org_id:          ${{ secrets.GCP_ORG_ID }}
          TF_VAR_billing_account: ${{ secrets.GCP_BILLING_ACCOUNT }}
          TF_VAR_seed_project_id: ${{ secrets.GCP_SEED_PROJECT }}
          TF_VAR_suffix:          ${{ inputs.suffix || github.run_id }}
          TF_VAR_batch:           ${{ inputs.batch || 'q1' }}
        run: terraform apply -auto-approve

      - name: Capture outputs
        id: orgout
        working-directory: infra/org
        run: |
          echo "project_id=$(terraform output -raw project_id)" >> $GITHUB_OUTPUT

  deploy:
    needs: create-project
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read, packages: read }
    steps:
      - uses: actions/checkout@v4

      - name: Inject Doppler (runtime env)
        uses: dopplerhq/cli-action@v2
        with:
          doppler-token: ${{ secrets.DOPPLER_SERVICE_TOKEN }}
          project: june
          config: prd
          command: bash -lc 'env | grep -E "NEON_|UPSTASH_|QDRANT_|GEMINI_|KC_" > runtime.env'

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.ORG_DEPLOYER_SA }}

      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.8.5 }

      - name: Terraform Init (quarterly)
        working-directory: infra/envs/quarterly
        run: terraform init -backend-config="hostname=app.terraform.io" -backend-config="organization=${{ secrets.TFC_ORG }}" -backend-config="workspaces=name:june-quarterly"

      - name: Terraform Apply (quarterly)
        working-directory: infra/envs/quarterly
        env:
          TF_VAR_project_id:  ${{ needs.create-project.outputs.project_id }}
          TF_VAR_region:      ${{ vars.GCP_REGION }}
          TF_VAR_image_orchestrator: ghcr.io/${{ github.repository_owner }}/june-orchestrator:latest
          TF_VAR_image_stt:          ghcr.io/${{ github.repository_owner }}/june-stt:latest
          TF_VAR_image_tts:          ghcr.io/${{ github.repository_owner }}/june-tts:latest
        run: |
          source ../..//../runtime.env
          terraform apply -auto-approve             -var="NEON_DB_URL=$NEON_DB_URL"             -var="UPSTASH_REDIS_REST_URL=$UPSTASH_REDIS_REST_URL"             -var="UPSTASH_REDIS_REST_TOKEN=$UPSTASH_REDIS_REST_TOKEN"             -var="QDRANT_URL=$QDRANT_URL"             -var="QDRANT_API_KEY=$QDRANT_API_KEY"             -var="GEMINI_API_KEY=$GEMINI_API_KEY"             -var="KC_BASE_URL=$KC_BASE_URL"             -var="KC_REALM=${KC_REALM:-june}"             -var="KC_CLIENT_ID=$KC_CLIENT_ID"             -var="KC_CLIENT_SECRET=$KC_CLIENT_SECRET"

      - name: Outputs
        working-directory: infra/envs/quarterly
        run: terraform output

  cutover_dns:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Inject Doppler (Cloudflare)
        uses: dopplerhq/cli-action@v2
        with:
          doppler-token: ${{ secrets.DOPPLER_SERVICE_TOKEN }}
          project: june
          config: prd
          command: bash -lc 'env | grep -E "CLOUDFLARE_|DOMAIN" > cf.env'

      - name: Read service URLs
        working-directory: infra/envs/quarterly
        id: urls
        run: |
          echo "ORCH=$(terraform output -raw orchestrator_url)" >> $GITHUB_OUTPUT

      - name: Update Cloudflare DNS (api)
        run: |
          set -e
          source cf.env
          TARGET="${{ steps.urls.outputs.ORCH }}"
          TARGET_HOST=${TARGET#https://}
          echo "Pointing api.$DOMAIN -> $TARGET_HOST"
          # Upsert record
          rec_id=$(curl -s -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" -H "Content-Type: application/json"             "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records?type=CNAME&name=api.$DOMAIN" | jq -r '.result[0].id')
          if [ "$rec_id" != "null" ] && [ -n "$rec_id" ]; then
            curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records/$rec_id"               -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" -H "Content-Type: application/json"               --data '{"type":"CNAME","name":"api.'"$DOMAIN"'","content":"'"$TARGET_HOST"'","proxied":true,"ttl":1}'
          else
            curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records"               -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" -H "Content-Type: application/json"               --data '{"type":"CNAME","name":"api.'"$DOMAIN"'","content":"'"$TARGET_HOST"'","proxied":true,"ttl":1}'
          fi
