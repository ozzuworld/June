# Minimal working Terraform configuration (Option 2: custom VPC + subnet + secondary ranges)

terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 5.0"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.23"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.4"
    }
  }
}

variable "project_id" {
  description = "GCP Project ID"
  type        = string
}

variable "region" {
  description = "GCP Region"
  type        = string
  default     = "us-central1"
}

variable "cluster_name" {
  description = "GKE cluster name"
  type        = string
  default     = "june-unified-cluster"
}

# Enable required APIs
resource "google_project_service" "apis" {
  for_each = toset([
    "container.googleapis.com",
    "compute.googleapis.com",
    "sqladmin.googleapis.com",      # Cloud SQL Admin API (correct name)
    "redis.googleapis.com",
    "artifactregistry.googleapis.com",
    "secretmanager.googleapis.com"
  ])
  project            = var.project_id
  service            = each.value
  disable_on_destroy = false
}

# -----------------------------
# Network: VPC + Subnetwork with secondary ranges (for GKE)
# -----------------------------
resource "google_compute_network" "main" {
  name                    = "${var.cluster_name}-vpc"
  project                 = var.project_id
  auto_create_subnetworks = false
}

resource "google_compute_subnetwork" "main" {
  name                     = "${var.cluster_name}-${var.region}-subnet"
  project                  = var.project_id
  region                   = var.region
  network                  = google_compute_network.main.id
  ip_cidr_range            = "10.0.0.0/16"   # primary subnet
  private_ip_google_access = true

  # Secondary ranges for GKE IP aliasing (non-overlapping + aligned)
  secondary_ip_range {
    range_name    = "${var.cluster_name}-pods"
    ip_cidr_range = "10.4.0.0/14"           # /14 => 2nd octet multiple of 4
  }

  secondary_ip_range {
    range_name    = "${var.cluster_name}-services"
    ip_cidr_range = "10.8.0.0/20"           # /20 => 3rd octet multiple of 16
  }
}


# -----------------------------
# GKE Autopilot cluster on custom VPC/Subnet
# -----------------------------
resource "google_container_cluster" "cluster" {
  name     = var.cluster_name
  location = var.region
  project  = var.project_id

  enable_autopilot = true

  network    = google_compute_network.main.id
  subnetwork = google_compute_subnetwork.main.name

  ip_allocation_policy {
    cluster_secondary_range_name  = google_compute_subnetwork.main.secondary_ip_range[0].range_name
    services_secondary_range_name = google_compute_subnetwork.main.secondary_ip_range[1].range_name
  }

  depends_on = [google_project_service.apis]
}

# -----------------------------
# Cloud SQL (public for quick start; tighten later)
# -----------------------------
resource "google_sql_database_instance" "postgres" {
  name             = "${var.cluster_name}-db"
  database_version = "POSTGRES_15"
  region           = var.region
  project          = var.project_id

  settings {
    tier = "db-f1-micro"

    ip_configuration {
      ipv4_enabled = true

      # NOTE: This is open to the world for quick tests.
      # Replace with your IP/CIDR or switch to Private IP + SQL Proxy later.
      authorized_networks {
        name  = "allow-all"
        value = "0.0.0.0/0"
      }
    }
  }

  deletion_protection = false
}

resource "google_sql_database" "june_db" {
  name     = "june_idp"
  instance = google_sql_database_instance.postgres.name
  project  = var.project_id
}

resource "random_password" "db_password" {
  length  = 16
  special = false
}

resource "google_sql_user" "june_user" {
  name     = "june_idp"
  instance = google_sql_database_instance.postgres.name
  password = random_password.db_password.result
  project  = var.project_id
}

# -----------------------------
# Memorystore for Redis on the same VPC
# -----------------------------
resource "google_redis_instance" "redis" {
  name               = "${var.cluster_name}-redis"
  tier               = "BASIC"
  memory_size_gb     = 1
  project            = var.project_id
  region             = var.region
  authorized_network = google_compute_network.main.id  # attach to custom VPC
}

# -----------------------------
# Outputs
# -----------------------------
output "cluster_name" {
  value = google_container_cluster.cluster.name
}

output "get_credentials_command" {
  value = "gcloud container clusters get-credentials ${google_container_cluster.cluster.name} --region=${var.region} --project=${var.project_id}"
}

output "postgres_ip" {
  value = google_sql_database_instance.postgres.public_ip_address
}

output "postgres_connection" {
  value = google_sql_database_instance.postgres.connection_name
}

output "db_password" {
  value     = random_password.db_password.result
  sensitive = true
}

output "redis_host" {
  value = google_redis_instance.redis.host
}
