# infra/gke/main-dev.tf
# SIMPLIFIED Terraform for development - single zone, minimal resources

terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 5.0"
    }
  }
}

variable "project_id" {
  description = "GCP Project ID"
  type        = string
  default     = "main-buffer-469817-v7"
}

variable "region" {
  description = "GCP Region"
  type        = string
  default     = "us-central1"
}

variable "zone" {
  description = "GCP Zone (single zone for dev)"
  type        = string
  default     = "us-central1-a"
}

variable "cluster_name" {
  description = "GKE cluster name"
  type        = string
  default     = "june-dev-cluster"
}

# Enable required APIs
resource "google_project_service" "required_apis" {
  for_each = toset([
    "container.googleapis.com",
    "compute.googleapis.com"
  ])
  
  project = var.project_id
  service = each.value
  disable_on_destroy = false
}

# Simple single-zone GKE cluster
resource "google_container_cluster" "dev_cluster" {
  name     = var.cluster_name
  location = var.zone  # Single zone instead of region
  project  = var.project_id

  # Remove Autopilot for simpler setup
  remove_default_node_pool = true
  initial_node_count       = 1

  # Basic IP allocation
  ip_allocation_policy {
    cluster_secondary_range_name  = "pods"
    services_secondary_range_name = "services"
  }

  # Basic networking
  network    = "default"
  subnetwork = "default"

  depends_on = [google_project_service.required_apis]
}

# Simple node pool
resource "google_container_node_pool" "dev_nodes" {
  name       = "${var.cluster_name}-dev-pool"
  location   = var.zone
  cluster    = google_container_cluster.dev_cluster.name
  project    = var.project_id

  # Start with 1 node, can scale up to 3
  initial_node_count = 1

  autoscaling {
    min_node_count = 1
    max_node_count = 3
  }

  # Use smaller, cheaper machines for development
  node_config {
    machine_type = "e2-standard-2"  # 2 vCPU, 8GB RAM
    disk_size_gb = 20
    disk_type    = "pd-standard"
    
    # Basic security
    service_account = "default"
    oauth_scopes = [
      "https://www.googleapis.com/auth/cloud-platform"
    ]

    # Cost optimization
    preemptible = false  # Set to true if you want even cheaper (but less reliable)
    
    metadata = {
      disable-legacy-endpoints = "true"
    }
  }

  management {
    auto_repair  = true
    auto_upgrade = true
  }
}

# Outputs
output "cluster_name" {
  description = "GKE cluster name"
  value       = google_container_cluster.dev_cluster.name
}

output "cluster_zone" {
  description = "GKE cluster zone"
  value       = var.zone
}

output "get_credentials_command" {
  description = "Command to configure kubectl"
  value       = "gcloud container clusters get-credentials ${google_container_cluster.dev_cluster.name} --zone=${var.zone} --project=${var.project_id}"
}

output "cluster_endpoint" {
  description = "GKE cluster endpoint"
  value       = google_container_cluster.dev_cluster.endpoint
  sensitive   = true
}

output "project_id" {
  description = "GCP Project ID"
  value       = var.project_id
}