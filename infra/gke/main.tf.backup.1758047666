# infra/gke/main.tf - MINIMAL WORKING CONFIGURATION
terraform {
  required_version = ">= 1.0"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 5.0"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.23"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.4"
    }
  }
}

# Variables
variable "project_id" {
  description = "GCP Project ID"
  type        = string
}

variable "region" {
  description = "GCP Region"
  type        = string
  default     = "us-central1"
}

variable "cluster_name" {
  description = "GKE cluster name"
  type        = string
  default     = "june-unified-cluster"
}

# Enable required APIs
resource "google_project_service" "required_apis" {
  for_each = toset([
    "container.googleapis.com",
    "compute.googleapis.com",
    "storage.googleapis.com",
    "sql.googleapis.com",
    "redis.googleapis.com",
    "secretmanager.googleapis.com"
  ])
  
  project = var.project_id
  service = each.value
  
  disable_on_destroy = false
}

# GKE Autopilot Cluster - MINIMAL CONFIGURATION
resource "google_container_cluster" "unified_cluster" {
  name     = var.cluster_name
  location = var.region
  project  = var.project_id

  # Enable Autopilot - this automatically configures most settings
  enable_autopilot = true
  
  # Basic IP allocation (Autopilot will create secondary ranges automatically)
  ip_allocation_policy {}
  
  # Workload Identity (optional but recommended)
  workload_identity_config {
    workload_pool = "${var.project_id}.svc.id.goog"
  }

  depends_on = [google_project_service.required_apis]
}

# Simple PostgreSQL instance
resource "google_sql_database_instance" "postgres" {
  name             = "${var.cluster_name}-postgres"
  database_version = "POSTGRES_15"
  region           = var.region
  project          = var.project_id

  settings {
    tier                        = "db-f1-micro"  # Free tier
    availability_type           = "ZONAL"
    disk_size                   = 20
    disk_type                   = "PD_SSD"
    disk_autoresize            = true

    backup_configuration {
      enabled                        = true
      start_time                     = "03:00"
      point_in_time_recovery_enabled = false  # Disable for cost
    }

    ip_configuration {
      ipv4_enabled    = true
      authorized_networks {
        name  = "allow-all"
        value = "0.0.0.0/0"  # Open for now, restrict later
      }
    }

    maintenance_window {
      day  = 7  # Sunday
      hour = 3  # 3 AM
    }
  }

  deletion_protection = false
}

# Create databases
resource "google_sql_database" "databases" {
  for_each = toset(["harbor", "june_idp"])
  
  name     = each.key
  instance = google_sql_database_instance.postgres.name
  project  = var.project_id
}

# Create database users with passwords
resource "random_password" "db_passwords" {
  for_each = toset(["harbor", "june_idp"])
  
  length  = 16
  special = false  # Keep it simple for now
}

resource "google_sql_user" "db_users" {
  for_each = toset(["harbor", "june_idp"])
  
  name     = each.key
  instance = google_sql_database_instance.postgres.name
  password = random_password.db_passwords[each.key].result
  project  = var.project_id
}

# Simple Redis instance
resource "google_redis_instance" "redis" {
  name           = "${var.cluster_name}-redis"
  tier           = "BASIC"
  memory_size_gb = 1
  project        = var.project_id
  region         = var.region

  redis_version = "REDIS_6_X"
}

# Simple storage bucket for Harbor
resource "google_storage_bucket" "harbor_registry" {
  name     = "${var.project_id}-harbor-registry"
  location = var.region
  project  = var.project_id

  uniform_bucket_level_access = true
  
  # Simple lifecycle rule
  lifecycle_rule {
    condition {
      age = 90
    }
    action {
      type = "Delete"
    }
  }
}

# Basic service accounts
resource "google_service_account" "workload_identity" {
  for_each = toset([
    "harbor",
    "june-orchestrator", 
    "june-stt",
    "june-tts",
    "june-idp"
  ])
  
  account_id   = "${each.key}-sa"
  display_name = "${each.key} Service Account"
  project      = var.project_id
}

# Basic permissions
resource "google_project_iam_member" "storage_admin" {
  project = var.project_id
  role    = "roles/storage.admin"
  member  = "serviceAccount:${google_service_account.workload_identity["harbor"].email}"
}

# Kubernetes provider
data "google_client_config" "provider" {}

provider "kubernetes" {
  host  = "https://${google_container_cluster.unified_cluster.endpoint}"
  token = data.google_client_config.provider.access_token
  cluster_ca_certificate = base64decode(
    google_container_cluster.unified_cluster.master_auth[0].cluster_ca_certificate,
  )
}

# Create namespaces
resource "kubernetes_namespace" "june_services" {
  metadata {
    name = "june-services"
  }
  
  depends_on = [google_container_cluster.unified_cluster]
}

resource "kubernetes_namespace" "harbor" {
  metadata {
    name = "harbor"
  }
  
  depends_on = [google_container_cluster.unified_cluster]
}

# Outputs
output "cluster_name" {
  value = google_container_cluster.unified_cluster.name
}

output "cluster_endpoint" {
  value     = google_container_cluster.unified_cluster.endpoint
  sensitive = true
}

output "cluster_ca_certificate" {
  value     = google_container_cluster.unified_cluster.master_auth[0].cluster_ca_certificate
  sensitive = true
}

output "get_credentials_command" {
  value = "gcloud container clusters get-credentials ${google_container_cluster.unified_cluster.name} --region=${var.region} --project=${var.project_id}"
}

output "postgres_connection_name" {
  value = google_sql_database_instance.postgres.connection_name
}

output "postgres_ip" {
  value = google_sql_database_instance.postgres.public_ip_address
}

output "redis_host" {
  value = google_redis_instance.redis.host
}

output "harbor_bucket" {
  value = google_storage_bucket.harbor_registry.name
}

output "harbor_db_password" {
  value     = random_password.db_passwords["harbor"].result
  sensitive = true
}

output "idp_db_password" {
  value     = random_password.db_passwords["june_idp"].result
  sensitive = true
}