# optional overrides; if blank we'll auto-generate secure passwords
variable "kc_admin_password" {
  type      = string
  default   = ""
  sensitive = true
}

variable "kc_db_user" {
  type    = string
  default = "keycloak"
}

variable "kc_db_password" {
  type      = string
  default   = ""
  sensitive = true
}

variable "kc_db_name" {
  type    = string
  default = "keycloak"
}

module "db_vm" {
  source      = "./modules/postgres_vm"
  project_id  = var.project_id
  region      = var.region
  zone        = var.zone

  name        = "pg-keycloak"
  network     = google_compute_network.vpc.self_link
  subnetwork  = google_compute_subnetwork.subnet.self_link

  db_name      = var.kc_db_name
  db_user      = var.kc_db_user
  db_password  = var.kc_db_password != "" ? var.kc_db_password : random_password.kc_db.result
  disk_size_gb = 50
}

# allow internal subnet (nodes/connector) to reach PG
resource "google_compute_firewall" "allow_pg_internal" {
  name    = "allow-pg-5432-internal"
  network = google_compute_network.vpc.name

  allows {
    protocol = "tcp"
    ports    = ["5432"]
  }
  source_ranges = [google_compute_subnetwork.subnet.ip_cidr_range]
  target_tags   = ["postgres"]
}

# allow Pod CIDR to reach PG
locals {
  pods_cidr = one([
    for r in google_compute_subnetwork.subnet.secondary_ip_range :
    r.ip_cidr_range if r.range_name == "pods"
  ])
}

resource "google_compute_firewall" "allow_pg_from_pods" {
  name    = "allow-pg-5432-from-pods"
  network = google_compute_network.vpc.name

  allows {
    protocol = "tcp"
    ports    = ["5432"]
  }
  source_ranges = [local.pods_cidr]
  target_tags   = ["postgres"]
}

# generate secrets if not provided
resource "random_password" "kc_admin" {
  length  = 24
  special = false
}

resource "random_password" "kc_db" {
  length  = 24
  special = false
}

locals {
  kc_hostname                    = "auth.${var.domain}"
  kc_db_url                      = "jdbc:postgresql://${module.db_vm.internal_ip}:5432/${var.kc_db_name}"
  kc_admin_password_effective    = var.kc_admin_password != "" ? var.kc_admin_password : random_password.kc_admin.result
  kc_db_password_effective       = var.kc_db_password    != "" ? var.kc_db_password    : random_password.kc_db.result
}

# Secret Manager copies (handy if anything else wants them)
resource "google_secret_manager_secret" "kc_admin_password" {
  secret_id = "kc-admin-password"
  replication {
    user_managed {
      replicas { location = var.region }
    }
  }
}
resource "google_secret_manager_secret_version" "kc_admin_password_v" {
  secret      = google_secret_manager_secret.kc_admin_password.id
  secret_data = local.kc_admin_password_effective
}

resource "google_secret_manager_secret" "kc_db_password" {
  secret_id = "kc-db-password"
  replication {
    user_managed {
      replicas { location = var.region }
    }
  }
}
resource "google_secret_manager_secret_version" "kc_db_password_v" {
  secret      = google_secret_manager_secret.kc_db_password.id
  secret_data = local.kc_db_password_effective
}
