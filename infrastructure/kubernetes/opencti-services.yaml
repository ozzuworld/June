# OpenCTI Services and Networking Configuration
# Elasticsearch Service
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: opencti
  labels:
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: search-engine
    app.kubernetes.io/part-of: opencti
spec:
  type: ClusterIP
  ports:
  - port: 9200
    targetPort: 9200
    name: http
  - port: 9300
    targetPort: 9300
    name: transport
  selector:
    app.kubernetes.io/name: elasticsearch

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: opencti
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: opencti
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app.kubernetes.io/name: redis

---
# RabbitMQ Service
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: opencti
  labels:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/component: message-queue
    app.kubernetes.io/part-of: opencti
spec:
  type: ClusterIP
  ports:
  - port: 5672
    targetPort: 5672
    name: amqp
  - port: 15672
    targetPort: 15672
    name: management
  selector:
    app.kubernetes.io/name: rabbitmq

---
# MinIO Service
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: opencti
  labels:
    app.kubernetes.io/name: minio
    app.kubernetes.io/component: object-storage
    app.kubernetes.io/part-of: opencti
spec:
  type: ClusterIP
  ports:
  - port: 9000
    targetPort: 9000
    name: api
  - port: 9001
    targetPort: 9001
    name: console
  selector:
    app.kubernetes.io/name: minio

---
# OpenCTI Platform Service
apiVersion: v1
kind: Service
metadata:
  name: opencti-platform
  namespace: opencti
  labels:
    app.kubernetes.io/name: opencti
    app.kubernetes.io/component: platform
    app.kubernetes.io/part-of: opencti
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
    cloud.google.com/backend-config: '{"default":"opencti-backend-config"}'
spec:
  type: ClusterIP
  ports:
  - port: 4000
    targetPort: 4000
    name: http
  selector:
    app.kubernetes.io/name: opencti
    app.kubernetes.io/component: platform

---
# LoadBalancer Service for External Access (Optional)
apiVersion: v1
kind: Service
metadata:
  name: opencti-loadbalancer
  namespace: opencti
  labels:
    app.kubernetes.io/name: opencti
    app.kubernetes.io/component: loadbalancer
  annotations:
    cloud.google.com/load-balancer-type: "External"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 4000
    name: http
  - port: 443
    targetPort: 4000
    name: https
  selector:
    app.kubernetes.io/name: opencti
    app.kubernetes.io/component: platform

---
# Backend Configuration for GKE Ingress
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: opencti-backend-config
  namespace: opencti
  labels:
    app.kubernetes.io/name: opencti
    app.kubernetes.io/component: backend-config
spec:
  timeoutSec: 300  # Extended timeout for OpenCTI operations
  connectionDraining:
    drainingTimeoutSec: 60
  healthCheck:
    checkIntervalSec: 10
    port: 4000
    type: HTTP
    requestPath: /health
  sessionAffinity:
    affinityType: "CLIENT_IP"
    affinityCookieTtlSec: 3600

---
# Ingress for OpenCTI (Optional - for external access)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: opencti-ingress
  namespace: opencti
  labels:
    app.kubernetes.io/name: opencti
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "opencti-ip"
    networking.gke.io/managed-certificates: "opencti-ssl-cert"
    kubernetes.io/ingress.allow-http: "false"
spec:
  rules:
  - host: opencti.yourdomain.com  # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: opencti-platform
            port:
              number: 4000

---
# Managed Certificate for HTTPS (Optional)
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: opencti-ssl-cert
  namespace: opencti
  labels:
    app.kubernetes.io/name: opencti
    app.kubernetes.io/component: certificate
spec:
  domains:
    - opencti.yourdomain.com  # Replace with your domain

---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: opencti-network-policy
  namespace: opencti
  labels:
    app.kubernetes.io/name: opencti
    app.kubernetes.io/component: network-policy
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/part-of: opencti
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from June Dark service
  - from:
    - namespaceSelector:
        matchLabels:
          name: june-services
    - podSelector:
        matchLabels:
          app: june-dark
  # Allow internal OpenCTI traffic
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/part-of: opencti
  # Allow ingress traffic
  - from: []
    ports:
    - protocol: TCP
      port: 4000
  egress:
  # Allow all egress for now (can be restricted based on requirements)
  - {}