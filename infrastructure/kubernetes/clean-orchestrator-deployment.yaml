# Clean Orchestrator Deployment - Fixed with correct endpoints
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-orchestrator
  namespace: june-services
  labels:
    app: june-orchestrator
    version: "2.0.0"
    component: api
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: june-orchestrator
  template:
    metadata:
      labels:
        app: june-orchestrator
        version: "2.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: june-secret-manager
      containers:
        - name: orchestrator
          # ✅ FIXED: Use image built from app_clean.py with correct /v1/chat endpoint
          image: us-central1-docker.pkg.dev/main-buffer-469817-v7/june/june-orchestrator:clean-v2.0.0
          imagePullPolicy: Always  # Always pull latest during development
          ports:
            - name: http
              containerPort: 8000  # Clean orchestrator runs on port 8000
              protocol: TCP
          
          # ✅ MINIMAL ENVIRONMENT - Only what's needed
          env:
            # Authentication
            - name: KEYCLOAK_URL
              value: "https://idp.allsafe.world"
            - name: KEYCLOAK_REALM
              value: "allsafe"
            - name: REQUIRED_AUDIENCE
              value: "june-orchestrator"
            
            # AI Configuration
            - name: GEMINI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: june-secrets
                  key: gemini-api-key
                  optional: true
            
            # Application Configuration
            - name: LOG_LEVEL
              value: "INFO"
            - name: ENVIRONMENT
              value: "production"
          
          # Resource limits optimized for free tier
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
              ephemeral-storage: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
              ephemeral-storage: "1Gi"
          
          # ✅ FIXED: Health checks for correct port and endpoints
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          # Startup probe for slow container startup
          startupProbe:
            httpGet:
              path: /healthz
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 20
      
      # Restart policy and DNS configuration
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      terminationGracePeriodSeconds: 30

---
# ✅ FIXED: Service pointing to correct port
apiVersion: v1
kind: Service
metadata:
  name: june-orchestrator
  namespace: june-services
  labels:
    app: june-orchestrator
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
    cloud.google.com/backend-config: '{"default":"june-backend-config"}'
spec:
  type: ClusterIP
  selector:
    app: june-orchestrator
  ports:
    - name: http
      port: 80          # Service port (what ingress connects to)
      targetPort: 8000  # ✅ FIXED: Clean orchestrator runs on 8000, not 8080
      protocol: TCP

---
# Backend configuration for load balancer
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: june-backend-config
  namespace: june-services
spec:
  timeoutSec: 30
  connectionDraining:
    drainingTimeoutSec: 60
  healthCheck:
    checkIntervalSec: 10
    port: 8000
    type: HTTP
    requestPath: /healthz
  
---
# HorizontalPodAutoscaler for basic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: june-orchestrator-hpa
  namespace: june-services
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: june-orchestrator
  minReplicas: 1
  maxReplicas: 1s
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80