---
# Namespace for June Services
apiVersion: v1
kind: Namespace
metadata:
  name: june-services
  labels:
    name: june-services
    environment: production

---
# ============================================================================
# SECRETS
# ============================================================================

# PostgreSQL Database Secrets
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-db-secret
  namespace: june-services
type: Opaque
stringData:
  username: "keycloak"
  password: "Pokemon123!"  # CHANGE THIS IN PRODUCTION
  database: "keycloak"

---
# Keycloak Admin Secrets
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-admin-secret
  namespace: june-services
type: Opaque
stringData:
  username: "admin"
  password: "Pokemon123!"  # CHANGE THIS IN PRODUCTION

---
# June Secrets (for orchestrator and other services)
apiVersion: v1
kind: Secret
metadata:
  name: june-secrets
  namespace: june-services
type: Opaque
stringData:
  gemini-api-key: "AIzaSyA20vz_9eC0Un6lRrkOKUK5vS-u_zNW1uM"
  keycloak-client-secret: "bAh9Mr5fGJ73JvNhagyIQ8RFwAfjvqnC"

---
# ============================================================================
# POSTGRESQL DATABASE FOR KEYCLOAK
# ============================================================================

# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak-db
  namespace: june-services
  labels:
    app: keycloak-db
    component: database
spec:
  serviceName: keycloak-db
  replicas: 1
  selector:
    matchLabels:
      app: keycloak-db
  template:
    metadata:
      labels:
        app: keycloak-db
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: keycloak-db-secret
              key: database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: keycloak-db-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-db-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: postgres
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - keycloak
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - keycloak
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: standard-rwo
      resources:
        requests:
          storage: 10Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: keycloak-db
  namespace: june-services
  labels:
    app: keycloak-db
    component: database
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: keycloak-db

---
# ============================================================================
# KEYCLOAK (JUNE-IDP) DEPLOYMENT
# ============================================================================

# Keycloak Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-idp
  namespace: june-services
  labels:
    app: june-idp
    component: identity-provider
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: june-idp
  template:
    metadata:
      labels:
        app: june-idp
        component: identity-provider
    spec:
      initContainers:
      - name: wait-for-db
        image: postgres:15-alpine
        command: ['sh', '-c']
        args:
        - |
          echo "⏳ Waiting for PostgreSQL to be ready..."
          until pg_isready -h keycloak-db.june-services.svc.cluster.local -p 5432 -U keycloak; do
            echo "PostgreSQL is unavailable - waiting..."
            sleep 3
          done
          echo "✅ PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-db-secret
              key: password
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:23.0
        args:
        - "start"
        - "--optimized"
        env:
        # Database Configuration
        - name: KC_DB
          value: "postgres"
        - name: KC_DB_URL
          value: "jdbc:postgresql://keycloak-db.june-services.svc.cluster.local:5432/keycloak"
        - name: KC_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: keycloak-db-secret
              key: username
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-db-secret
              key: password
        
        # Admin Configuration
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              name: keycloak-admin-secret
              key: username
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-admin-secret
              key: password
        
        # Hostname Configuration
        - name: KC_HOSTNAME
          value: "idp.allsafe.world"
        - name: KC_HOSTNAME_STRICT
          value: "false"
        - name: KC_HOSTNAME_STRICT_HTTPS
          value: "false"
        
        # HTTP Configuration
        - name: KC_HTTP_ENABLED
          value: "true"
        - name: KC_HTTP_PORT
          value: "8080"
        
        # Proxy Configuration (for LoadBalancer/Ingress)
        - name: KC_PROXY
          value: "edge"
        - name: KC_PROXY_ADDRESS_FORWARDING
          value: "true"
        
        # Health and Metrics
        - name: KC_HEALTH_ENABLED
          value: "true"
        - name: KC_METRICS_ENABLED
          value: "true"
        
        # Logging
        - name: KC_LOG_LEVEL
          value: "INFO"
        
        # Performance - Java heap settings
        - name: JAVA_OPTS_APPEND
          value: >-
            -XX:+UseContainerSupport
            -XX:MaxRAMPercentage=75.0
            -Djava.net.preferIPv4Stack=true
        
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        
        startupProbe:
          httpGet:
            path: /health/started
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 60
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 5
          successThreshold: 1

---
# Keycloak Service
apiVersion: v1
kind: Service
metadata:
  name: june-idp
  namespace: june-services
  labels:
    app: june-idp
    component: identity-provider
spec:
  type: ClusterIP
  sessionAffinity: ClientIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: june-idp

---
# Keycloak VerticalPodAutoscaler
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: june-idp-vpa
  namespace: june-services
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: june-idp
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: keycloak
      minAllowed:
        memory: "512Mi"
        cpu: "250m"
      maxAllowed:
        memory: "4Gi"
        cpu: "2000m"

---
# ============================================================================
# JUNE ORCHESTRATOR DEPLOYMENT
# ============================================================================

# Orchestrator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-orchestrator
  namespace: june-services
  labels:
    app: june-orchestrator
    component: api
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: june-orchestrator
  template:
    metadata:
      labels:
        app: june-orchestrator
        component: api
    spec:
      containers:
      - name: orchestrator
        image: ozzuworld/june-orchestrator:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        
        env:
        # Gemini AI Configuration
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: june-secrets
              key: gemini-api-key
        
        # Keycloak Configuration
        - name: KEYCLOAK_URL
          value: "http://june-idp.june-services.svc.cluster.local:8080"
        - name: EXTERNAL_KEYCLOAK_URL
          value: "https://idp.allsafe.world"
        - name: KEYCLOAK_REALM
          value: "allsafe"
        - name: KEYCLOAK_CLIENT_ID
          value: "june-orchestrator"
        - name: KEYCLOAK_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: june-secrets
              key: keycloak-client-secret
        
        # Service URLs (external services not in this cluster)
        - name: TTS_SERVICE_URL
          value: "https://tts.allsafe.world"
        - name: EXTERNAL_STT_URL
          value: "https://stt.allsafe.world"
        
        # CORS Configuration
        - name: CORS_ALLOW_ORIGINS
          value: "https://allsafe.world,https://api.allsafe.world,https://idp.allsafe.world"
        
        # Application Configuration
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENVIRONMENT
          value: "production"
        - name: PORT
          value: "8080"
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3

---
# Orchestrator Service
apiVersion: v1
kind: Service
metadata:
  name: june-orchestrator
  namespace: june-services
  labels:
    app: june-orchestrator
    component: api
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: june-orchestrator

---
# Orchestrator VerticalPodAutoscaler
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: june-orchestrator-vpa
  namespace: june-services
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: june-orchestrator
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: orchestrator
      minAllowed:
        memory: "256Mi"
        cpu: "100m"
      maxAllowed:
        memory: "2Gi"
        cpu: "1000m"

---
# ============================================================================
# INGRESS CONFIGURATION (GCE Load Balancer)
# ============================================================================

# Global Static IP (create this first via gcloud)
# gcloud compute addresses create june-services-ip --global

# Managed SSL Certificate
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: june-services-cert
  namespace: june-services
spec:
  domains:
  - api.allsafe.world
  - idp.allsafe.world

---
# Ingress with Google Load Balancer
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: june-services-ingress
  namespace: june-services
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "june-services-ip"
    networking.gke.io/managed-certificates: "june-services-cert"
    kubernetes.io/ingress.allow-http: "true"
    # Redirect HTTP to HTTPS
    ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  rules:
  # June Orchestrator API
  - host: api.allsafe.world
    http:
      paths:
      - path: /*
        pathType: ImplementationSpecific
        backend:
          service:
            name: june-orchestrator
            port:
              number: 8080
  
  # Keycloak IDP
  - host: idp.allsafe.world
    http:
      paths:
      - path: /*
        pathType: ImplementationSpecific
        backend:
          service:
            name: june-idp
            port:
              number: 8080

---
# ============================================================================
# NETWORK POLICIES (Security)
# ============================================================================

# Allow Keycloak to access PostgreSQL only
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: keycloak-db-netpol
  namespace: june-services
spec:
  podSelector:
    matchLabels:
      app: keycloak-db
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: june-idp
    ports:
    - protocol: TCP
      port: 5432

---
# Allow Orchestrator to access Keycloak
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: june-idp-netpol
  namespace: june-services
spec:
  podSelector:
    matchLabels:
      app: june-idp
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow from ingress controller
  - from: []
    ports:
    - protocol: TCP
      port: 8080
  # Allow from orchestrator
  - from:
    - podSelector:
        matchLabels:
          app: june-orchestrator
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow DNS
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: UDP
      port: 53
  # Allow PostgreSQL
  - to:
    - podSelector:
        matchLabels:
          app: keycloak-db
    ports:
    - protocol: TCP
      port: 5432
  # Allow HTTPS for external calls
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443

---
# Allow Orchestrator to make external calls
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: june-orchestrator-netpol
  namespace: june-services
spec:
  podSelector:
    matchLabels:
      app: june-orchestrator
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow from ingress controller
  - from: []
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow DNS
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: UDP
      port: 53
  # Allow Keycloak
  - to:
    - podSelector:
        matchLabels:
          app: june-idp
    ports:
    - protocol: TCP
      port: 8080
  # Allow HTTPS for external services (TTS, STT, Gemini)
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443

---
# ============================================================================
# MONITORING (Optional but Recommended)
# ============================================================================

# ServiceMonitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: june-services-metrics
  namespace: june-services
  labels:
    app: june-services
spec:
  selector:
    matchLabels:
      component: identity-provider
  endpoints:
  - port: http
    path: /metrics
    interval: 30s

---
# PodMonitor for Orchestrator
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: june-orchestrator-metrics
  namespace: june-services
  labels:
    app: june-orchestrator
spec:
  selector:
    matchLabels:
      app: june-orchestrator
  podMetricsEndpoints:
  - port: http
    path: /metrics
    interval: 30s