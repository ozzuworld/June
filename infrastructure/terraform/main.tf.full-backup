# Unified June AI Platform Infrastructure
# This file replaces all scattered infrastructure configurations

terraform {
  required_version = ">= 1.0"
  
  backend "gcs" {
    bucket = "june-terraform-state"
    prefix = "infrastructure"
  }
  
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 5.0"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.23"
    }
    helm = {
      source  = "hashicorp/helm"
      version = "~> 2.12"
    }
  }
}

# ============================================================================
# VARIABLES
# ============================================================================

variable "project_id" {
  description = "GCP Project ID"
  type        = string
}

variable "region" {
  description = "GCP Region"
  type        = string
  default     = "us-central1"
}

variable "environment" {
  description = "Environment (dev, staging, prod)"
  type        = string
  default     = "prod"
}

variable "domain" {
  description = "Base domain for June services"
  type        = string
  default     = "allsafe.world"
}

locals {
  cluster_name = "june-${var.environment}"
  
  common_labels = {
    project     = "june-ai-platform"
    environment = var.environment
    managed_by  = "terraform"
  }
  
  services = {
    orchestrator = {
      name = "june-orchestrator"
      port = 8080
      path = "/v1/*"
    }
    idp = {
      name = "june-idp"
      port = 8080
      path = "/auth/*"
    }
    stt = {
      name = "june-stt"
      port = 8080
      path = "/v1/transcribe"
    }
    tts = {
      name = "june-tts"
      port = 8080
      path = "/tts/*"
    }
  }
}

# ============================================================================
# PROVIDERS
# ============================================================================

provider "google" {
  project = var.project_id
  region  = var.region
}

data "google_client_config" "default" {}

provider "kubernetes" {
  host                   = "https://${module.gke.cluster_endpoint}"
  token                  = data.google_client_config.default.access_token
  cluster_ca_certificate = base64decode(module.gke.cluster_ca_certificate)
}

provider "helm" {
  kubernetes {
    host                   = "https://${module.gke.cluster_endpoint}"
    token                  = data.google_client_config.default.access_token
    cluster_ca_certificate = base64decode(module.gke.cluster_ca_certificate)
  }
}

# ============================================================================
# MODULES
# ============================================================================

module "gke" {
  source = "./modules/gke"
  
  project_id     = var.project_id
  region         = var.region
  cluster_name   = local.cluster_name
  environment    = var.environment
  common_labels  = local.common_labels
}

module "networking" {
  source = "./modules/networking"
  
  project_id    = var.project_id
  region        = var.region
  cluster_name  = local.cluster_name
  domain        = var.domain
  services      = local.services
  common_labels = local.common_labels
}

module "security" {
  source = "./modules/security"
  
  project_id    = var.project_id
  cluster_name  = local.cluster_name
  common_labels = local.common_labels
}

module "kubernetes_resources" {
  source = "./modules/kubernetes"
  
  cluster_name     = local.cluster_name
  environment      = var.environment
  services         = local.services
  common_labels    = local.common_labels
  
  depends_on = [module.gke]
}

# ============================================================================
# OUTPUTS
# ============================================================================

output "cluster_info" {
  description = "GKE cluster information"
  value = {
    name               = module.gke.cluster_name
    endpoint           = module.gke.cluster_endpoint
    get_credentials    = module.gke.get_credentials_command
  }
  sensitive = true
}

output "service_urls" {
  description = "External service URLs"
  value = {
    api = "https://api.${var.domain}"
    idp = "https://idp.${var.domain}"
    stt = "https://stt.${var.domain}"
    tts = "https://tts.${var.domain}"
  }
}

output "static_ip" {
  description = "Static IP address for load balancer"
  value       = module.networking.static_ip
}

output "dns_records" {
  description = "Required DNS A records"
  value       = module.networking.dns_records
}

output "deployment_commands" {
  description = "Commands to deploy services"
  value = {
    kubectl_config = module.gke.get_credentials_command
    deploy_services = "kubectl apply -k infrastructure/kubernetes/overlays/${var.environment}"
    check_status = "kubectl get pods -n june-services"
  }
}
module "cloud_build" {
  source = "./modules/cloud-build"
  
  project_id    = var.project_id
  region        = var.region
  cluster_name  = local.cluster_name
  environment   = var.environment
  common_labels = local.common_labels
  
  # GitHub configuration
  github_owner = "ozzuworld"
  github_repo  = "June"
  
  # Service configuration
  services = local.services
  
  depends_on = [module.gke]  # Ensure cluster exists first
}

# Cloud Build module for containerization
module "cloud_build" {
  source = "./modules/cloud-build"
  
  project_id    = var.project_id
  region        = var.region
  cluster_name  = local.cluster_name
  environment   = var.environment
  common_labels = local.common_labels
  
  # GitHub configuration
  github_owner = "ozzuworld"
  github_repo  = "June"
  
  # Service configuration
  services = local.services
  
  depends_on = [module.gke]
}
