# Headscale - Self-hosted Tailscale Control Plane
# Complete deployment with config, service, and ingress (uses org wildcard TLS)
---
apiVersion: v1
kind: Namespace
metadata:
  name: headscale
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: headscale-config
  namespace: headscale
data:
  config.yaml: |
    server_url: https://headscale.ozzu.world

    listen_addr: 0.0.0.0:8080
    metrics_listen_addr: 0.0.0.0:50480

    disable_check_updates: true

    database:
      type: sqlite
      sqlite:
        path: /var/lib/headscale/db.sqlite

    private_key_path: /var/lib/headscale/private.key
    noise:
      private_key_path: /var/lib/headscale/noise_private.key

    prefixes:
      v4: 100.64.0.0/10
      v6: fd7a:115c:a1e0::/48

    dns:
      magic_dns: true
      base_domain: tail.ozzu.world
      override_local_dns: false
      nameservers:
        global:
          - 1.1.1.1
          - 8.8.8.8

    derp:
      urls:
        - https://controlplane.tailscale.com/derpmap/default
      auto_update_enabled: true
      update_frequency: 24h
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: headscale
  namespace: headscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app: headscale
  template:
    metadata:
      labels:
        app: headscale
    spec:
      containers:
      - name: headscale
        image: headscale/headscale:0.25.1
        command: ["headscale"]
        args: ["serve", "--config", "/etc/headscale/config.yaml"]
        ports:
        - name: http
          containerPort: 8080
        - name: metrics
          containerPort: 50480
        volumeMounts:
        - name: config
          mountPath: /etc/headscale
        - name: data
          mountPath: /var/lib/headscale
        env:
        - name: LOG_LEVEL
          value: info
      volumes:
      - name: config
        configMap:
          name: headscale-config
      - name: data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: headscale
  namespace: headscale
spec:
  selector:
    app: headscale
  ports:
  - name: http
    port: 443
    targetPort: 8080
  - name: metrics
    port: 80
    targetPort: 50480
---
apiVersion: batch/v1
kind: Job
metadata:
  name: copy-wildcard-cert
  namespace: headscale
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      serviceAccountName: copy-wildcard-sa
      restartPolicy: OnFailure
      containers:
      - name: kubectl
        # Use registry.k8s.io image as primary, more reliable than bitnami
        image: registry.k8s.io/kubectl:v1.29.0
        command: ["/bin/sh","-c"]
        args:
          - |
            set -e
            echo "Checking for existing wildcard certificate in headscale namespace..."
            if kubectl get secret headscale-wildcard-tls -n headscale >/dev/null 2>&1; then
              echo "Wildcard certificate already present in headscale namespace"
              exit 0
            fi
            echo "Looking for source wildcard certificate in june-services namespace..."
            # Try different possible certificate names
            SOURCE_SECRET=""
            for cert_name in "ozzu-world-wildcard-tls" "wildcard-tls" "ozzu-world-tls"; do
              if kubectl get secret "$cert_name" -n june-services >/dev/null 2>&1; then
                SOURCE_SECRET="$cert_name"
                echo "Found source certificate: $cert_name"
                break
              fi
            done
            if [ -z "$SOURCE_SECRET" ]; then
              echo "No wildcard certificate found in june-services namespace. Available secrets:"
              kubectl get secrets -n june-services
              exit 1
            fi
            echo "Copying certificate from $SOURCE_SECRET to headscale-wildcard-tls..."
            kubectl get secret "$SOURCE_SECRET" -n june-services -o yaml | \
              sed 's/namespace: june-services/namespace: headscale/' | \
              sed "s/name: $SOURCE_SECRET/name: headscale-wildcard-tls/" | \
              kubectl apply -f -
            echo "Certificate copy completed successfully"
      # Add network access and resource limits
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: copy-wildcard-role
  namespace: headscale
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get","create","update","patch","list","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: copy-wildcard-cluster-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get","list"]
  resourceNames: []
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get","list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: copy-wildcard-rb
  namespace: headscale
subjects:
- kind: ServiceAccount
  name: copy-wildcard-sa
  namespace: headscale
roleRef:
  kind: Role
  name: copy-wildcard-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: copy-wildcard-cluster-rb
subjects:
- kind: ServiceAccount
  name: copy-wildcard-sa
  namespace: headscale
roleRef:
  kind: ClusterRole
  name: copy-wildcard-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: copy-wildcard-source-rb
  namespace: june-services
subjects:
- kind: ServiceAccount
  name: copy-wildcard-sa
  namespace: headscale
roleRef:
  kind: Role
  name: copy-wildcard-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: copy-wildcard-role
  namespace: june-services
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get","list"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: copy-wildcard-sa
  namespace: headscale
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: headscale-ingress
  namespace: headscale
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - headscale.ozzu.world
    secretName: headscale-wildcard-tls
  rules:
  - host: headscale.ozzu.world
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: headscale
            port:
              number: 443