# k8s/june-services/phase2-database.yaml
# PostgreSQL database for conversation storage and analytics

apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: june-services
type: Opaque
data:
  # postgres / june_db_pass_2024 (base64 encoded)
  username: cG9zdGdyZXM=
  password: anVuZV9kYl9wYXNzXzIwMjQ=

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: june-services
data:
  init.sql: |
    -- June AI Platform Database Schema
    -- Phase 2: Conversation Management
    
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
    -- Users table (synced with Keycloak)
    CREATE TABLE users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        keycloak_id VARCHAR(255) UNIQUE NOT NULL,
        username VARCHAR(255) NOT NULL,
        email VARCHAR(255),
        display_name VARCHAR(255),
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW(),
        last_active TIMESTAMP DEFAULT NOW(),
        preferences JSONB DEFAULT '{}',
        metadata JSONB DEFAULT '{}'
    );
    
    -- Conversations table
    CREATE TABLE conversations (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        title VARCHAR(255),
        status VARCHAR(50) DEFAULT 'active', -- active, archived, deleted
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW(),
        ended_at TIMESTAMP,
        message_count INTEGER DEFAULT 0,
        total_duration INTEGER DEFAULT 0, -- seconds
        quality_score FLOAT,
        tags TEXT[],
        metadata JSONB DEFAULT '{}',
        summary TEXT,
        
        INDEX idx_conversations_user_id (user_id),
        INDEX idx_conversations_created_at (created_at),
        INDEX idx_conversations_status (status)
    );
    
    -- Messages table (for both text and audio)
    CREATE TABLE messages (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        role VARCHAR(20) NOT NULL, -- user, assistant, system, tool
        content TEXT NOT NULL,
        audio_metadata JSONB DEFAULT '{}', -- file_path, duration, format, size
        created_at TIMESTAMP DEFAULT NOW(),
        sequence_number INTEGER NOT NULL,
        processing_time INTEGER, -- milliseconds
        tokens_used INTEGER,
        model_used VARCHAR(100),
        confidence_score FLOAT,
        metadata JSONB DEFAULT '{}',
        
        INDEX idx_messages_conversation_id (conversation_id),
        INDEX idx_messages_created_at (created_at),
        INDEX idx_messages_role (role)
    );
    
    -- Streaming sessions table
    CREATE TABLE streaming_sessions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        conversation_id UUID REFERENCES conversations(id) ON DELETE CASCADE,
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        session_token VARCHAR(255) NOT NULL,
        status VARCHAR(20) DEFAULT 'active', -- active, completed, failed
        started_at TIMESTAMP DEFAULT NOW(),
        ended_at TIMESTAMP,
        duration INTEGER, -- seconds
        bytes_transmitted BIGINT DEFAULT 0,
        error_message TEXT,
        client_info JSONB DEFAULT '{}',
        
        INDEX idx_streaming_sessions_user_id (user_id),
        INDEX idx_streaming_sessions_token (session_token),
        INDEX idx_streaming_sessions_status (status)
    );
    
    -- Tools registry (for future tool calling)
    CREATE TABLE tools (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        name VARCHAR(100) UNIQUE NOT NULL,
        display_name VARCHAR(255) NOT NULL,
        description TEXT,
        category VARCHAR(100),
        version VARCHAR(20) DEFAULT '1.0.0',
        enabled BOOLEAN DEFAULT true,
        config JSONB DEFAULT '{}',
        schema JSONB NOT NULL, -- JSON schema for parameters
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW(),
        
        INDEX idx_tools_name (name),
        INDEX idx_tools_category (category),
        INDEX idx_tools_enabled (enabled)
    );
    
    -- Tool usage tracking
    CREATE TABLE tool_usage (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        message_id UUID REFERENCES messages(id) ON DELETE CASCADE,
        tool_id UUID REFERENCES tools(id) ON DELETE CASCADE,
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        parameters JSONB NOT NULL,
        result JSONB,
        success BOOLEAN,
        execution_time INTEGER, -- milliseconds
        error_message TEXT,
        created_at TIMESTAMP DEFAULT NOW(),
        
        INDEX idx_tool_usage_tool_id (tool_id),
        INDEX idx_tool_usage_user_id (user_id),
        INDEX idx_tool_usage_created_at (created_at)
    );
    
    -- Conversation analytics (for fine-tuning)
    CREATE TABLE conversation_analytics (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        analytics_date DATE DEFAULT CURRENT_DATE,
        message_count INTEGER DEFAULT 0,
        avg_response_time FLOAT,
        user_satisfaction FLOAT,
        topics JSONB DEFAULT '[]',
        sentiment_scores JSONB DEFAULT '{}',
        tool_usage_count INTEGER DEFAULT 0,
        errors_count INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT NOW(),
        
        UNIQUE(conversation_id, analytics_date),
        INDEX idx_analytics_user_id (user_id),
        INDEX idx_analytics_date (analytics_date)
    );
    
    -- Insert default tools
    INSERT INTO tools (name, display_name, description, category, schema) VALUES
    ('get_current_time', 'Current Time', 'Get the current date and time', 'utility', '{
        "type": "object",
        "properties": {
            "timezone": {"type": "string", "description": "Timezone (default: UTC)"}
        }
    }'),
    ('simple_calculator', 'Calculator', 'Perform basic mathematical calculations', 'utility', '{
        "type": "object",
        "properties": {
            "expression": {"type": "string", "description": "Mathematical expression to evaluate"}
        },
        "required": ["expression"]
    }'),
    ('set_reminder', 'Set Reminder', 'Set a simple reminder', 'productivity', '{
        "type": "object", 
        "properties": {
            "message": {"type": "string", "description": "Reminder message"},
            "duration_minutes": {"type": "integer", "description": "Minutes from now"}
        },
        "required": ["message", "duration_minutes"]
    }');
    
    -- Create indexes for full-text search
    CREATE INDEX idx_messages_content_search ON messages USING GIN (to_tsvector('english', content));
    CREATE INDEX idx_conversations_title_search ON conversations USING GIN (to_tsvector('english', title));
    
    -- Create functions for conversation management
    CREATE OR REPLACE FUNCTION update_conversation_stats()
    RETURNS TRIGGER AS $$
    BEGIN
        UPDATE conversations 
        SET 
            message_count = (SELECT COUNT(*) FROM messages WHERE conversation_id = NEW.conversation_id),
            updated_at = NOW()
        WHERE id = NEW.conversation_id;
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    
    CREATE TRIGGER trigger_update_conversation_stats
        AFTER INSERT ON messages
        FOR EACH ROW
        EXECUTE FUNCTION update_conversation_stats();

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: june-services
  labels:
    app: postgresql
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
        component: database
    spec:
      containers:
      - name: postgresql
        image: postgres:16-alpine
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_DB
          value: june_db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "400m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - june_db
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - june_db
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgresql-config

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: june-services
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard-rwo

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: june-services
  labels:
    app: postgresql
spec:
  type: ClusterIP
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgresql