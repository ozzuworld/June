# k8s/june-services/01-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: june-services
  labels:
    managed-by: terraform

---
# k8s/june-services/02-june-orchestrator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-orchestrator
  namespace: june-services
  labels:
    app: june-orchestrator
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-orchestrator
  template:
    metadata:
      labels:
        app: june-orchestrator
        version: v1
    spec:
      containers:
      - name: june-orchestrator
        image: us-central1-docker.pkg.dev/main-buffer-469817-v7/june/june-orchestrator:latest
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: PORT
          value: "8080"
        - name: LOG_LEVEL
          value: "INFO"
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: june-secrets
              key: GEMINI_API_KEY
              optional: true
        - name: STT_SERVICE_URL
          value: "http://june-stt:8080"
        - name: TTS_SERVICE_URL
          value: "http://june-tts:8080"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
        startupProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 30

---
apiVersion: v1
kind: Service
metadata:
  name: june-orchestrator
  namespace: june-services
  labels:
    app: june-orchestrator
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: june-orchestrator

---
# k8s/june-services/03-june-stt.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-stt
  namespace: june-services
  labels:
    app: june-stt
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-stt
  template:
    metadata:
      labels:
        app: june-stt
        version: v1
    spec:
      containers:
      - name: june-stt
        image: us-central1-docker.pkg.dev/main-buffer-469817-v7/june/june-stt:latest
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: PORT
          value: "8080"
        - name: LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: june-stt
  namespace: june-services
  labels:
    app: june-stt
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: june-stt

---
# k8s/june-services/04-june-tts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-tts
  namespace: june-services
  labels:
    app: june-tts
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-tts
  template:
    metadata:
      labels:
        app: june-tts
        version: v1
    spec:
      containers:
      - name: june-tts
        image: us-central1-docker.pkg.dev/main-buffer-469817-v7/june/june-tts:latest
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: PORT
          value: "8080"
        - name: LOG_LEVEL
          value: "INFO"
        - name: CHATTERBOX_API_KEY
          valueFrom:
            secretKeyRef:
              name: june-secrets
              key: CHATTERBOX_API_KEY
              optional: true
        - name: CHATTERBOX_API_URL
          value: "https://api.chatterboxtts.com"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: june-tts
  namespace: june-services
  labels:
    app: june-tts
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: june-tts

---
# k8s/june-services/05-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: june-ingress
  namespace: june-services
  annotations:
    kubernetes.io/ingress.global-static-ip-name: "june-services-ip"
    networking.gke.io/managed-certificates: "june-ssl-cert"
    kubernetes.io/ingress.class: "gce"
spec:
  rules:
  - host: june-orchestrator.allsafe.world
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-orchestrator
            port:
              number: 8080
  - host: june-stt.allsafe.world
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-stt
            port:
              number: 8080
  - host: june-tts.allsafe.world
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-tts
            port:
              number: 8080

---
# k8s/june-services/06-managed-cert.yaml
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: june-ssl-cert
  namespace: june-services
spec:
  domains:
    - june-orchestrator.allsafe.world
    - june-stt.allsafe.world
    - june-tts.allsafe.world