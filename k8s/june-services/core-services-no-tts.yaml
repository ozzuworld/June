# Core services without internal TTS (using external OpenVoice)
apiVersion: v1
kind: Namespace
metadata:
  name: june-services
  labels:
    managed-by: terraform

---
apiVersion: v1
kind: Secret
metadata:
  name: june-secrets
  namespace: june-services
type: Opaque
data:
  # External TTS URL (base64 encode your OpenVoice service URL)
  EXTERNAL_TTS_URL: ""  # echo -n "https://your-openvoice-service.com" | base64
  
  # API Keys
  GEMINI_API_KEY: ""
  
  # Service authentication (existing IDP clients)
  ORCHESTRATOR_CLIENT_ID: b3JjaGVzdHJhdG9yLWNsaWVudA==
  ORCHESTRATOR_CLIENT_SECRET: b3JjaGVzdHJhdG9yLXNlY3JldC1rZXktMTIzNDU=
  STT_CLIENT_ID: c3R0LWNsaWVudA==
  STT_CLIENT_SECRET: c3R0LXNlY3JldC1rZXktMTIzNDU=

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-orchestrator
  namespace: june-services
  labels:
    app: june-orchestrator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-orchestrator
  template:
    metadata:
      labels:
        app: june-orchestrator
    spec:
      serviceAccountName: june-orchestrator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: june-orchestrator
        image: us-central1-docker.pkg.dev/main-buffer-469817-v7/june/june-orchestrator:latest
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: PORT
          value: "8080"
        - name: LOG_LEVEL
          value: "INFO"
        - name: STT_SERVICE_URL
          value: "http://june-stt:8080"
        # External TTS configuration
        - name: EXTERNAL_TTS_URL
          valueFrom:
            secretKeyRef:
              name: june-secrets
              key: EXTERNAL_TTS_URL
        # IDP configuration
        - name: KC_BASE_URL
          value: "http://june-idp:8080/auth"
        - name: KC_REALM
          value: "june"
        - name: ORCHESTRATOR_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: june-secrets
              key: ORCHESTRATOR_CLIENT_ID
        - name: ORCHESTRATOR_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: june-secrets
              key: ORCHESTRATOR_CLIENT_SECRET
        # AI
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: june-secrets
              key: GEMINI_API_KEY
              optional: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30

---
apiVersion: v1
kind: Service
metadata:
  name: june-orchestrator
  namespace: june-services
  labels:
    app: june-orchestrator
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: june-orchestrator

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-stt
  namespace: june-services
  labels:
    app: june-stt
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-stt
  template:
    metadata:
      labels:
        app: june-stt
    spec:
      serviceAccountName: june-stt
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: june-stt
        image: us-central1-docker.pkg.dev/main-buffer-469817-v7/june/june-stt:latest
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: PORT
          value: "8080"
        - name: LOG_LEVEL
          value: "INFO"
        - name: KC_BASE_URL
          value: "http://june-idp:8080/auth"
        - name: KC_REALM
          value: "june"
        - name: STT_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: june-secrets
              key: STT_CLIENT_ID
        - name: STT_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: june-secrets
              key: STT_CLIENT_SECRET
        # Firebase (optional)
        - name: FIREBASE_PROJECT_ID
          valueFrom:
            secretKeyRef:
              name: firebase-secrets
              key: FIREBASE_PROJECT_ID
              optional: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: june-stt
  namespace: june-services
  labels:
    app: june-stt
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: june-stt

---
# Keep existing Keycloak IDP deployment
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-admin-secret
  namespace: june-services
type: Opaque
data:
  # admin / admin123 (base64 encoded)
  username: YWRtaW4=
  password: YWRtaW4xMjM=

---
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-db-secret
  namespace: june-services
type: Opaque
data:
  # keycloak_db / keycloak_pass_123 (base64 encoded)
  username: a2V5Y2xvYWtfZGI=
  password: a2V5Y2xvYWtfcGFzc18xMjM=

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-realm-config
  namespace: june-services
data:
  june-realm.json: |
    {
      "realm": "june",
      "enabled": true,
      "displayName": "June AI Platform",
      "sslRequired": "external",
      "roles": {
        "realm": [
          {"name": "user", "description": "Default user role"},
          {"name": "admin", "description": "Administrator role"}
        ]
      },
      "clients": [
        {
          "clientId": "orchestrator-client",
          "name": "June Orchestrator Service",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "secret": "orchestrator-secret-key-12345",
          "serviceAccountsEnabled": true,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "protocol": "openid-connect",
          "attributes": {
            "access.token.lifespan": "3600"
          }
        },
        {
          "clientId": "stt-client",
          "name": "June STT Service",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "secret": "stt-secret-key-12345",
          "serviceAccountsEnabled": true,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "protocol": "openid-connect",
          "attributes": {
            "access.token.lifespan": "3600"
          }
        }
      ]
    }

---
# PostgreSQL Database for Keycloak
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak-db
  namespace: june-services
  labels:
    app: keycloak-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak-db
  template:
    metadata:
      labels:
        app: keycloak-db
    spec:
      containers:
      - name: postgres
        image: postgres:16-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: keycloak
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: keycloak-db-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-db-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - keycloak_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - keycloak_db
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        emptyDir:
          sizeLimit: 2Gi

---
apiVersion: v1
kind: Service
metadata:
  name: keycloak-db
  namespace: june-services
  labels:
    app: keycloak-db
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: keycloak-db

---
# Keycloak IDP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-idp
  namespace: june-services
  labels:
    app: june-idp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-idp
  template:
    metadata:
      labels:
        app: june-idp
    spec:
      serviceAccountName: june-idp
      initContainers:
      - name: wait-for-db
        image: postgres:16-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h keycloak-db -p 5432 -U keycloak_db; do
            echo "Waiting for database..."
            sleep 2
          done
          echo "Database is ready!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-db-secret
              key: password
      - name: realm-import-init
        image: quay.io/keycloak/keycloak:26.3.2
        command:
        - /bin/bash
        - -c
        - |
          echo "Preparing realm import..."
          mkdir -p /opt/keycloak/data/import
          cp /tmp/realm/june-realm.json /opt/keycloak/data/import/
          ls -la /opt/keycloak/data/import/
        volumeMounts:
        - name: realm-config
          mountPath: /tmp/realm
        - name: keycloak-data
          mountPath: /opt/keycloak/data
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:26.3.2
        args:
        - start
        - --optimized
        - --import-realm
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: KC_BOOTSTRAP_ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              name: keycloak-admin-secret
              key: username
        - name: KC_BOOTSTRAP_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-admin-secret
              key: password
        - name: KC_DB
          value: "postgres"
        - name: KC_DB_URL_HOST
          value: "keycloak-db"
        - name: KC_DB_URL_DATABASE
          value: "keycloak"
        - name: KC_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: keycloak-db-secret
              key: username
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-db-secret
              key: password
        - name: KC_HOSTNAME_URL
          value: "https://june-idp.allsafe.world"
        - name: KC_HOSTNAME_ADMIN_URL
          value: "https://june-idp.allsafe.world"
        - name: KC_PROXY
          value: "edge"
        - name: KC_HTTP_ENABLED
          value: "true"
        - name: KC_HOSTNAME_STRICT
          value: "false"
        - name: KC_HOSTNAME_STRICT_HTTPS
          value: "false"
        - name: KC_HEALTH_ENABLED
          value: "true"
        - name: KC_METRICS_ENABLED
          value: "true"
        - name: KC_LOG_LEVEL
          value: "INFO"
        - name: JAVA_OPTS_APPEND
          value: "-XX:MaxRAMPercentage=70 -XX:InitialRAMPercentage=50"
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 10
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 20
        volumeMounts:
        - name: keycloak-data
          mountPath: /opt/keycloak/data
      volumes:
      - name: realm-config
        configMap:
          name: keycloak-realm-config
      - name: keycloak-data
        emptyDir:
          sizeLimit: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: june-idp
  namespace: june-services
  labels:
    app: june-idp
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: june-idp

---
# Service Accounts
apiVersion: v1
kind: ServiceAccount
metadata:
  name: june-orchestrator
  namespace: june-services
  annotations:
    iam.gke.io/gcp-service-account: june-orchestrator-gke@main-buffer-469817-v7.iam.gserviceaccount.com

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: june-stt
  namespace: june-services
  annotations:
    iam.gke.io/gcp-service-account: june-stt-gke@main-buffer-469817-v7.iam.gserviceaccount.com

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: june-idp
  namespace: june-services