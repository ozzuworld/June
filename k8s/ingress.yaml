apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: june-ingress
  namespace: june-services
  annotations:
    # Use production Let's Encrypt issuer (not staging)
    cert-manager.io/cluster-issuer: letsencrypt-prod
    
    # Ingress class
    kubernetes.io/ingress.class: nginx
    
    # Force HTTPS redirect
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # CORS support
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Upload size limits
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    
    # Timeout settings
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.allsafe.world
    - idp.allsafe.world
    secretName: allsafe-tls
  rules:
  - host: api.allsafe.world
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-orchestrator
            port:
              number: 8080
  - host: idp.allsafe.world
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-idp
            port:
              number: 8080