---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: june-services
  labels:
    name: june-services

---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: june-config
  namespace: june-services
data:
  APP_ENV: production
  LOG_LEVEL: info
  REGION: us-central1

---
# Secrets (use for non-sensitive defaults, override with actual secrets)
apiVersion: v1
kind: Secret
metadata:
  name: june-secrets
  namespace: june-services
type: Opaque
stringData:
  gemini-api-key: "PLACEHOLDER"
  keycloak-client-secret: "PLACEHOLDER"

---
# June STT Deployment - FIXED with consistent docker.io prefix
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-stt
  namespace: june-services
  labels:
    app: june-stt
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-stt
  template:
    metadata:
      labels:
        app: june-stt
    spec:
      containers:
      - name: stt
        image: docker.io/ozzuworld/june-stt:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        env:
        - name: PORT
          value: "8080"
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  name: june-stt
  namespace: june-services
spec:
  type: ClusterIP
  selector:
    app: june-stt
  ports:
  - port: 8080
    targetPort: 8080
    name: http

---
# June STT Deployment - FIXED with GPU support and proper resources
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-stt
  namespace: june-services
  labels:
    app: june-stt
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-stt
  template:
    metadata:
      labels:
        app: june-stt
    spec:
      nodeSelector:
        gpu: "true"
      
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      
      containers:
      - name: stt
        image: docker.io/ozzuworld/june-stt:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        
        # ✅ FIXED: Proper resources for large-v3 with GPU
        resources:
          requests:
            cpu: "1"
            memory: "6Gi"
            nvidia.com/gpu: 1
          limits:
            cpu: "2"
            memory: "10Gi"
            nvidia.com/gpu: 1
        
        env:
        - name: PORT
          value: "8080"
        - name: WHISPER_MODEL
          value: "large-v3"
        - name: WHISPER_DEVICE
          value: "cuda"
        - name: WHISPER_COMPUTE_TYPE
          value: "float16"
        - name: WHISPER_CACHE_DIR
          value: "/app/models"
        - name: WHISPER_CPU_THREADS
          value: "2"
        - name: WHISPER_NUM_WORKERS
          value: "1"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: PYTORCH_CUDA_ALLOC_CONF
          value: "max_split_size_mb:128,garbage_collection_threshold:0.6"
        
        volumeMounts:
        - name: model-cache
          mountPath: /app/models
        - name: cache
          mountPath: /app/cache
        
        # ✅ FIXED: Extended timeouts for model loading
        startupProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 90
          periodSeconds: 10
          failureThreshold: 90
        
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 10
          failureThreshold: 30
        
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 180
          periodSeconds: 30
          failureThreshold: 3
      
      # ✅ FIXED: EmptyDir volumes (no PVC)
      volumes:
      - name: model-cache
        emptyDir:
          sizeLimit: 10Gi
      - name: cache
        emptyDir:
          sizeLimit: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: june-stt
  namespace: june-services
spec:
  type: ClusterIP
  selector:
    app: june-stt
  ports:
  - port: 8080
    targetPort: 8080
    name: http
---
apiVersion: v1
kind: Service
metadata:
  name: june-tts
  namespace: june-services
spec:
  type: ClusterIP
  selector:
    app: june-tts
  ports:
  - port: 8000
    targetPort: 8000
    name: http

---
# June Orchestrator Deployment - FIXED with consistent docker.io prefix
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-orchestrator
  namespace: june-services
  labels:
    app: june-orchestrator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-orchestrator
  template:
    metadata:
      labels:
        app: june-orchestrator
    spec:
      containers:
      - name: orchestrator
        image: docker.io/ozzuworld/june-orchestrator:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        env:
        - name: PORT
          value: "8080"
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: june-secrets
              key: gemini-api-key
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 15

---
apiVersion: v1
kind: Service
metadata:
  name: june-orchestrator
  namespace: june-services
spec:
  type: ClusterIP
  selector:
    app: june-orchestrator
  ports:
  - port: 8080
    targetPort: 8080
    name: http

---
# June IDP Deployment - FIXED with consistent docker.io prefix
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-idp
  namespace: june-services
  labels:
    app: june-idp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-idp
  template:
    metadata:
      labels:
        app: june-idp
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c']
        args:
        - |
          echo "⏳ Waiting for PostgreSQL..."
          until pg_isready -h postgresql.june-services.svc.cluster.local -p 5432 -U keycloak; do
            sleep 3
          done
          echo "✅ PostgreSQL ready!"
          export PGPASSWORD=Pokemon123!
          until psql -h postgresql.june-services.svc.cluster.local -U keycloak -d keycloak -c "SELECT 1" > /dev/null 2>&1; do
            sleep 3
          done
          echo "✅ Database ready!"
      containers:
      - name: keycloak
        image: docker.io/ozzuworld/june-idp:latest
        command: ["/opt/keycloak/bin/kc.sh"]
        args: ["start", "--optimized"]
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9000
          name: management
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2"
        env:
        # Database Configuration
        - name: KC_DB
          value: postgres
        - name: KC_DB_URL
          value: jdbc:postgresql://postgresql.june-services.svc.cluster.local:5432/keycloak
        - name: KC_DB_USERNAME
          value: keycloak
        - name: KC_DB_PASSWORD
          value: Pokemon123!
        # Admin Configuration
        - name: KEYCLOAK_ADMIN
          value: admin
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: Pokemon123!
        # HTTP Configuration
        - name: KC_HTTP_ENABLED
          value: "true"
        - name: KC_HOSTNAME_STRICT
          value: "false"
        - name: KC_HOSTNAME_STRICT_HTTPS
          value: "false"
        - name: KC_PROXY
          value: edge
        - name: KC_HEALTH_ENABLED
          value: "true"
        - name: KC_METRICS_ENABLED
          value: "true"
        # CORRECTED HEALTH CHECKS - Using port 9000 for Keycloak 26.4.0
        startupProbe:
          httpGet:
            path: /health/started
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 60
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health/live
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 5

---
apiVersion: v1
kind: Service
metadata:
  name: june-idp
  namespace: june-services
spec:
  type: ClusterIP
  selector:
    app: june-idp
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  - port: 9000
    targetPort: 9000
    name: management

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: june-ingress
  namespace: june-services
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: api.allsafe.world
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-orchestrator
            port:
              number: 8080
  - host: idp.allsafe.world
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-idp
            port:
              number: 8080
  - host: stt.allsafe.world
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-stt
            port:
              number: 8080
  - host: tts.allsafe.world
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-tts
            port:
              number: 8000