---
# COMPLETE JUNE SERVICES MANIFEST TEMPLATE
# This template gets processed by generate-manifests.sh to create the final manifest
# 
# Prerequisites (created by install-core-infrastructure.sh):
#   - june-services namespace
#   - local-storage StorageClass  
#   - postgresql-pv PersistentVolume at /opt/june-postgresql-data
#   - GPU Operator with time-slicing (2+ virtual GPUs)
#   - ingress-nginx with hostNetwork
#   - cert-manager with letsencrypt-prod ClusterIssuer
#
# TURN/STUN Prerequisites:
#   - STUNner operator installed (apply stunner-manifests.yaml first)
#   - stunner namespace created
#
# Usage:
#   ./scripts/generate-manifests.sh
#   kubectl apply -f k8s/complete-manifests.yaml

apiVersion: v1
kind: Namespace
metadata:
  name: june-services
  labels:
    name: june-services
    app.kubernetes.io/part-of: june

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: june-config
  namespace: june-services
data:
  APP_ENV: production
  LOG_LEVEL: info
  REGION: us-central1

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: june-webrtc-config
  namespace: june-services
data:
  APP_ENV: production
  LOG_LEVEL: info
  REGION: us-central1
  
  # STUNner Gateway API format - uses dynamic domain
  STUN_SERVER_URL: "stun:turn.{{PRIMARY_DOMAIN}}:3478"
  TURN_SERVER_URL: "turn:turn.{{PRIMARY_DOMAIN}}:3478"
  TURN_USERNAME: "june-user"
  TURN_CREDENTIAL: "Pokemon123!"
  
  # ICE Server Configuration (JSON format for WebRTC clients)
  ICE_SERVERS: |
    [
      {
        "urls": ["stun:turn.{{PRIMARY_DOMAIN}}:3478"]
      },
      {
        "urls": ["turn:turn.{{PRIMARY_DOMAIN}}:3478"],
        "username": "june-user",
        "credential": "Pokemon123!"
      }
    ]
  
  # STUNner Gateway URL (internal cluster communication)
  STUNNER_GATEWAY_URL: "june-stunner-gateway-udp.stunner.svc.cluster.local:3478"
  STUNNER_GATEWAY_SERVICE: "june-stunner-gateway-udp.stunner.svc.cluster.local:3478"

---
apiVersion: v1
kind: Secret
metadata:
  name: june-secrets
  namespace: june-services
type: Opaque
stringData:
  gemini-api-key: "PLACEHOLDER"
  keycloak-client-secret: "PLACEHOLDER"

---
apiVersion: v1
kind: Secret
metadata:
  name: service-auth-secret
  namespace: june-services
type: Opaque
stringData:
  stt-service-token: "stt-service-secure-token-12345"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: june-services
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 10Gi
  selector:
    matchLabels:
      app: postgresql

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: june-services
  labels:
    app: postgresql
spec:
  serviceName: postgresql
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "keycloak"
        - name: POSTGRES_USER
          value: "keycloak"
        - name: POSTGRES_PASSWORD
          value: "Pokemon123!"
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: postgres
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - keycloak
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - keycloak
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgresql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: june-services
  labels:
    app: postgresql
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgresql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-stt
  namespace: june-services
  labels:
    app: june-stt
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  selector:
    matchLabels:
      app: june-stt
  template:
    metadata:
      labels:
        app: june-stt
    spec:
      nodeSelector:
        gpu: "true"
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      terminationGracePeriodSeconds: 30
      containers:
      - name: stt
        image: docker.io/ozzuworld/june-stt:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: "1"
            memory: "6Gi"
            nvidia.com/gpu: 1
          limits:
            cpu: "2"
            memory: "10Gi"
            nvidia.com/gpu: 1
        env:
        - name: PORT
          value: "8080"
        - name: ORCHESTRATOR_URL
          value: "http://june-orchestrator.june-services.svc.cluster.local:8080"
        - name: STT_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              name: service-auth-secret
              key: stt-service-token
        - name: WHISPER_MODEL
          value: "large-v3"
        - name: WHISPER_DEVICE
          value: "cuda"
        - name: WHISPER_COMPUTE_TYPE
          value: "float16"
        - name: WHISPER_CACHE_DIR
          value: "/app/models"
        - name: WHISPER_CPU_THREADS
          value: "2"
        - name: WHISPER_NUM_WORKERS
          value: "1"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: PYTORCH_CUDA_ALLOC_CONF
          value: "max_split_size_mb:128,garbage_collection_threshold:0.6"
        volumeMounts:
        - name: model-cache
          mountPath: /app/models
        - name: cache
          mountPath: /app/cache
        startupProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 90
          periodSeconds: 10
          failureThreshold: 90
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 10
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 180
          periodSeconds: 30
          failureThreshold: 3
      volumes:
      - name: model-cache
        emptyDir:
          sizeLimit: 10Gi
      - name: cache
        emptyDir:
          sizeLimit: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: june-stt
  namespace: june-services
spec:
  type: ClusterIP
  selector:
    app: june-stt
  ports:
  - port: 8080
    targetPort: 8080
    name: http

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-tts
  namespace: june-services
  labels:
    app: june-tts
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  selector:
    matchLabels:
      app: june-tts
  template:
    metadata:
      labels:
        app: june-tts
    spec:
      nodeSelector:
        gpu: "true"
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      terminationGracePeriodSeconds: 30
      containers:
      - name: tts
        image: docker.io/ozzuworld/june-tts:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        resources:
          requests:
            cpu: "1"
            memory: "4Gi"
            nvidia.com/gpu: 1
          limits:
            cpu: "2"
            memory: "6Gi"
            nvidia.com/gpu: 1
        env:
        - name: PORT
          value: "8000"
        - name: OPENVOICE_CHECKPOINTS_V2
          value: "/models/openvoice/checkpoints_v2"
        - name: OPENVOICE_DEVICE
          value: "cuda"
        - name: ENABLE_QUANTIZATION
          value: "false"
        - name: PRELOAD_MODELS
          value: "true"
        - name: TTS_CACHE_SIZE
          value: "100"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: PYTORCH_CUDA_ALLOC_CONF
          value: "max_split_size_mb:256"
        volumeMounts:
        - name: model-cache
          mountPath: /models
        - name: cache
          mountPath: /cache
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 120
          periodSeconds: 10
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 180
          periodSeconds: 30
      volumes:
      - name: model-cache
        emptyDir:
          sizeLimit: 10Gi
      - name: cache
        emptyDir:
          sizeLimit: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: june-tts
  namespace: june-services
spec:
  type: ClusterIP
  selector:
    app: june-tts
  ports:
  - port: 8000
    targetPort: 8000
    name: http

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-orchestrator
  namespace: june-services
  labels:
    app: june-orchestrator
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: june-orchestrator
  template:
    metadata:
      labels:
        app: june-orchestrator
    spec:
      containers:
      - name: orchestrator
        image: docker.io/ozzuworld/june-orchestrator:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        env:
        - name: PORT
          value: "8080"
        - name: VALID_SERVICE_TOKENS
          valueFrom:
            secretKeyRef:
              name: service-auth-secret
              key: stt-service-token
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: june-secrets
              key: gemini-api-key
        - name: KEYCLOAK_URL
          value: "http://june-idp.june-services.svc.cluster.local:8080"
        - name: KEYCLOAK_REALM
          value: "{{KEYCLOAK_REALM}}"
        - name: KEYCLOAK_CLIENT_ID
          value: "june-orchestrator"
        - name: TTS_SERVICE_URL
          value: "http://june-tts.june-services.svc.cluster.local:8000"
        - name: STT_SERVICE_URL
          value: "http://june-stt.june-services.svc.cluster.local:8080"
        
        # WebRTC/STUNner Configuration
        - name: STUN_SERVER_URL
          valueFrom:
            configMapKeyRef:
              name: june-webrtc-config
              key: STUN_SERVER_URL
        - name: TURN_SERVER_URL
          valueFrom:
            configMapKeyRef:
              name: june-webrtc-config
              key: TURN_SERVER_URL
        - name: TURN_USERNAME
          valueFrom:
            configMapKeyRef:
              name: june-webrtc-config
              key: TURN_USERNAME
        - name: TURN_CREDENTIAL
          valueFrom:
            configMapKeyRef:
              name: june-webrtc-config
              key: TURN_CREDENTIAL
        - name: ICE_SERVERS
          valueFrom:
            configMapKeyRef:
              name: june-webrtc-config
              key: ICE_SERVERS
        - name: STUNNER_GATEWAY_URL
          valueFrom:
            configMapKeyRef:
              name: june-webrtc-config
              key: STUNNER_GATEWAY_URL
        
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 15

---
apiVersion: v1
kind: Service
metadata:
  name: june-orchestrator
  namespace: june-services
spec:
  type: ClusterIP
  selector:
    app: june-orchestrator
  ports:
  - port: 8080
    targetPort: 8080
    name: http

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-idp
  namespace: june-services
  labels:
    app: june-idp
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: june-idp
  template:
    metadata:
      labels:
        app: june-idp
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          echo "⏳ Waiting for PostgreSQL..."
          until pg_isready -h postgresql.june-services.svc.cluster.local -p 5432 -U keycloak; do
            sleep 3
          done
          echo "✅ PostgreSQL ready!"
          export PGPASSWORD=Pokemon123!
          until psql -h postgresql.june-services.svc.cluster.local -U keycloak -d keycloak -c "SELECT 1" > /dev/null 2>&1; do
            sleep 3
          done
          echo "✅ Database ready!"
      containers:
      - name: keycloak
        image: docker.io/ozzuworld/june-idp:latest
        imagePullPolicy: Always
        command:
        - /opt/keycloak/bin/kc.sh
        args:
        - start
        - --optimized
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9000
          name: management
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2"
        env:
        - name: KC_DB
          value: postgres
        - name: KC_DB_URL
          value: jdbc:postgresql://postgresql.june-services.svc.cluster.local:5432/keycloak
        - name: KC_DB_USERNAME
          value: keycloak
        - name: KC_DB_PASSWORD
          value: Pokemon123!
        - name: KC_BOOTSTRAP_ADMIN_USERNAME
          value: admin
        - name: KC_BOOTSTRAP_ADMIN_PASSWORD
          value: Pokemon123!
        - name: KC_HTTP_ENABLED
          value: "true"
        - name: KC_HOSTNAME
          value: "{{IDP_DOMAIN}}"
        - name: KC_HOSTNAME_STRICT
          value: "false"
        - name: KC_HOSTNAME_STRICT_HTTPS
          value: "false"
        - name: KC_PROXY_HEADERS
          value: "xforwarded"
        - name: KC_HEALTH_ENABLED
          value: "true"
        - name: KC_METRICS_ENABLED
          value: "true"
        - name: KC_LOG_LEVEL
          value: "INFO"
        startupProbe:
          httpGet:
            path: /health/started
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 60
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health/live
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 5

---
apiVersion: v1
kind: Service
metadata:
  name: june-idp
  namespace: june-services
spec:
  type: ClusterIP
  selector:
    app: june-idp
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  - port: 9000
    targetPort: 9000
    name: management

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: june-ingress
  namespace: june-services
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - "{{WILDCARD_DOMAIN}}"
    - "{{PRIMARY_DOMAIN}}"
    secretName: {{CERT_SECRET_NAME}}
  rules:
  - host: {{API_DOMAIN}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-orchestrator
            port:
              number: 8080
  - host: {{IDP_DOMAIN}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-idp
            port:
              number: 8080
  - host: {{STT_DOMAIN}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-stt
            port:
              number: 8080
  - host: {{TTS_DOMAIN}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-tts
            port:
              number: 8000
