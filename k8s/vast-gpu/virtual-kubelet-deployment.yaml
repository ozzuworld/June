# Virtual Kubelet deployment for Vast.ai integration - With CLI Query Fix
# TEMPORARY: Includes initContainer shim to fix broken Vast.ai CLI query formatting
apiVersion: apps/v1
kind: Deployment
metadata:
  name: virtual-kubelet-vast
  namespace: kube-system
  labels:
    app: virtual-kubelet-vast
    region: north-america
spec:
  replicas: 1
  selector:
    matchLabels:
      app: virtual-kubelet-vast
  template:
    metadata:
      labels:
        app: virtual-kubelet-vast
        region: north-america
    spec:
      serviceAccountName: virtual-kubelet-vast
      nodeSelector:
        kubernetes.io/arch: amd64
      
      # TEMP FIX: Shim to fix Vast.ai CLI query formatting bug
      # The Python code passes query params as separate args instead of single quoted string
      # This initContainer creates a wrapper that fixes the command format
      initContainers:
      - name: vastai-cli-shim
        image: busybox:1.36
        command: ["sh", "-c"]
        args:
        - |
          echo "Installing Vast.ai CLI shim to fix query formatting..."
          
          # Backup original vastai binary
          if [ -x /usr/local/bin/vastai ]; then
            cp /usr/local/bin/vastai /usr/local/bin/vastai.real
            echo "Backed up original vastai to vastai.real"
            
            # Create wrapper script that fixes query formatting
            cat > /usr/local/bin/vastai << 'EOF'
          #!/bin/sh
          # Vast.ai CLI wrapper to fix query formatting bug
          # The Python VirtualKubelet passes query params as separate args,
          # but the CLI expects them as a single quoted string
          
          if [ "$1" = "search" ] && [ "$2" = "offers" ]; then
            # This is a search offers call - need to fix query formatting
            RAW_FLAG=""
            ORDER_FLAG=""
            QUERY_PARTS=""
            
            # Parse arguments and reconstruct properly
            shift 2  # skip 'search offers'
            while [ $# -gt 0 ]; do
              case "$1" in
                --raw)
                  RAW_FLAG="--raw"
                  shift
                  ;;
                -o|--order)
                  ORDER_FLAG="$1 $2"
                  shift 2
                  ;;
                --no-default)
                  # Skip this flag, we'll use explicit filters
                  shift
                  ;;
                *)
                  # This is part of the query - add to query string
                  if [ -z "$QUERY_PARTS" ]; then
                    QUERY_PARTS="$1"
                  else
                    QUERY_PARTS="$QUERY_PARTS $1"
                  fi
                  shift
                  ;;
              esac
            done
            
            # Execute with properly formatted query
            echo "Fixed CLI call: vastai.real search offers $RAW_FLAG '$QUERY_PARTS' $ORDER_FLAG" >&2
            exec /usr/local/bin/vastai.real search offers $RAW_FLAG "$QUERY_PARTS" $ORDER_FLAG
          else
            # Not a search offers call - pass through unchanged
            exec /usr/local/bin/vastai.real "$@"
          fi
          EOF
            
            chmod +x /usr/local/bin/vastai
            echo "Created vastai CLI shim wrapper"
            
            # Test the wrapper
            echo "Testing wrapper..."
            /usr/local/bin/vastai --version || echo "Version check failed, but wrapper installed"
            
          else
            echo "WARNING: vastai binary not found, shim not installed"
          fi
          
          echo "Shim installation complete"
        volumeMounts:
        - name: usr-local-bin
          mountPath: /usr/local/bin
        securityContext:
          runAsUser: 0  # Need root to modify /usr/local/bin
          
      containers:
      - name: virtual-kubelet
        image: ozzuworld/virtual-kubelet-vast-python:latest
        imagePullPolicy: Always  # Force pull latest image
        env:
        # Kubelet configuration - FIXED HEALTH CHECK PORT
        - name: KUBELET_PORT
          value: "10250"
        - name: KUBELET_HEALTH_PORT  # Add explicit health port
          value: "10255"
        - name: NODENAME
          value: "vast-gpu-node-python"

        # Vast.ai API configuration
        - name: VAST_API_KEY
          valueFrom:
            secretKeyRef:
              name: vast-api-secret
              key: VAST_API_KEY
              optional: false
        - name: VAST_API_URL
          value: "https://console.vast.ai/api/v0"

        # INCREASED TIMEOUT CONFIGURATION FOR TROUBLESHOOTING
        - name: VAST_STARTUP_TIMEOUT
          value: "1800"  # 30 minutes instead of 15
        - name: VAST_HEALTH_CHECK_TIMEOUT
          value: "1200"  # 20 minutes instead of 10
        - name: VAST_INSTANCE_READY_TIMEOUT
          value: "1800"  # 30 minutes instead of 15
        - name: VAST_DEBUG_MODE
          value: "true"
        
        # Add retry configuration for 409 conflicts
        - name: VAST_NODE_UPDATE_RETRY_COUNT
          value: "10"
        - name: VAST_NODE_UPDATE_RETRY_DELAY
          value: "30"
        - name: VAST_NODE_LEASE_DURATION
          value: "40"  # Increase lease duration

        # Relaxed requirements for troubleshooting
        - name: VAST_PREFERRED_REGIONS
          value: "US,CA,EU"  # Allow more regions
        - name: VAST_PRIMARY_REGION
          value: "US"
        - name: VAST_FALLBACK_REGIONS
          value: "CA,EU,MX"
        - name: VAST_BLOCKED_REGIONS
          value: "RU,CN,KP"

        # Relaxed performance requirements
        - name: VAST_LATENCY_CHECK_ENABLED
          value: "false"  # Disable for troubleshooting
        - name: VAST_MAX_LATENCY_MS
          value: "300"  # Increased from 100
        - name: VAST_BANDWIDTH_MIN_MBPS
          value: "25"   # Reduced from 50
        - name: VAST_MIN_RELIABILITY
          value: "0.80"  # Reduced from 0.95
        - name: VAST_MAX_PRICE_PER_HOUR
          value: "1.00"  # Increased budget
        
        # GPU configuration - Match the config map
        - name: VAST_GPU_TYPE
          value: "RTX_4060,RTX_3060,RTX_3080,RTX_4090"  # Multiple options
        - name: VAST_MIN_GPU_MEMORY
          value: "8"  # Reduced from 12GB

        # Template configuration
        - name: VAST_CONTAINER_IMAGE
          value: "ozzuworld/june-gpu-multi:latest"
        - name: VAST_DOCKER_OPTIONS
          value: "-p 8000:8000 -p 8001:8001 --gpus all --restart unless-stopped"

        ports:
        - containerPort: 10250
          name: kubelet
        - containerPort: 10255
          name: kubelet-read

        volumeMounts:
        - name: provider-config
          mountPath: /etc/vast-config
          readOnly: true
        - name: usr-local-bin
          mountPath: /usr/local/bin
          readOnly: false  # Need write access for shim

        resources:
          requests:
            cpu: 200m      # Increased from 100m
            memory: 512Mi  # Increased from 256Mi
          limits:
            cpu: 2000m     # Increased from 1000m
            memory: 2Gi    # Increased from 1Gi

        # RELAXED PROBES FOR TROUBLESHOOTING
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10255
          initialDelaySeconds: 120  # Increased from 60
          periodSeconds: 60         # Increased from 30
          timeoutSeconds: 30        # Increased from 10
          failureThreshold: 10      # Increased from 5
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /readyz
            port: 10255
          initialDelaySeconds: 60   # Increased from 30
          periodSeconds: 45         # Increased from 20
          timeoutSeconds: 30        # Increased from 10
          failureThreshold: 10      # Increased from 5
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /healthz
            port: 10255
          initialDelaySeconds: 30   # Increased from 10
          periodSeconds: 30         # Increased from 10
          timeoutSeconds: 15        # Increased from 5
          failureThreshold: 60      # Increased significantly from 30
          successThreshold: 1
          
        securityContext:
          runAsUser: 0  # Temporary: need root for shim to work
          readOnlyRootFilesystem: false  # Temporary: shim needs write access

      volumes:
      - name: provider-config
        configMap:
          name: vast-provider-config
      - name: usr-local-bin
        emptyDir: {}  # Shared volume for shim binary

      tolerations:
      - key: node.alpha.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 60  # Increased from 0
      - key: node.alpha.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 60  # Increased from 0

      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists

      restartPolicy: Always