# Virtual Kubelet deployment for Vast.ai integration - WITH CLI Query Fix v2
# Switch from /usr/local/bin shadowing to PATH-prepend shim to avoid hiding original binary
apiVersion: apps/v1
kind: Deployment
metadata:
  name: virtual-kubelet-vast
  namespace: kube-system
  labels:
    app: virtual-kubelet-vast
    region: north-america
spec:
  replicas: 1
  selector:
    matchLabels:
      app: virtual-kubelet-vast
  template:
    metadata:
      labels:
        app: virtual-kubelet-vast
        region: north-america
    spec:
      serviceAccountName: virtual-kubelet-vast
      nodeSelector:
        kubernetes.io/arch: amd64

      # TEMP FIX v2: PATH-prepend shim that does NOT shadow existing /usr/local/bin
      initContainers:
      - name: vastai-cli-shim
        image: busybox:1.36
        command: ["sh", "-c"]
        args:
        - |
          echo "Installing PATH-prepend Vast.ai CLI shim...";
          mkdir -p /shim/bin;
          cat > /shim/bin/vastai << 'EOF'
          #!/bin/sh
          # Vast.ai CLI wrapper to fix query formatting bug
          if [ "$1" = "search" ] && [ "$2" = "offers" ]; then
            RAW_FLAG=""; ORDER_FLAG=""; QUERY_PARTS="";
            shift 2
            while [ $# -gt 0 ]; do
              case "$1" in
                --raw) RAW_FLAG="--raw"; shift;;
                -o|--order) ORDER_FLAG="$1 $2"; shift 2;;
                --no-default) shift;;
                *) if [ -z "$QUERY_PARTS" ]; then QUERY_PARTS="$1"; else QUERY_PARTS="$QUERY_PARTS $1"; fi; shift;;
              esac
            done
            echo "Fixed CLI call -> vastai (real) search offers $RAW_FLAG '$QUERY_PARTS' $ORDER_FLAG" >&2
            # Exec the real binary via absolute path
            if command -v /usr/local/bin/vastai >/dev/null 2>&1; then
              exec /usr/local/bin/vastai search offers $RAW_FLAG "$QUERY_PARTS" $ORDER_FLAG
            else
              # fallback to PATH search
              exec $(command -v vastai) search offers $RAW_FLAG "$QUERY_PARTS" $ORDER_FLAG
            fi
          else
            if command -v /usr/local/bin/vastai >/dev/null 2>&1; then exec /usr/local/bin/vastai "$@"; else exec $(command -v vastai) "$@"; fi
          fi
          EOF
          chmod +x /shim/bin/vastai;
          echo "Shim installed to /shim/bin";
        volumeMounts:
        - name: vastai-shim
          mountPath: /shim

      containers:
      - name: virtual-kubelet
        image: ozzuworld/virtual-kubelet-vast-python:latest
        imagePullPolicy: Always
        env:
        - name: PATH
          value: "/shim/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"  # Prepend shim

        # Kubelet configuration
        - name: KUBELET_PORT
          value: "10250"
        - name: KUBELET_HEALTH_PORT
          value: "10255"
        - name: NODENAME
          value: "vast-gpu-node-python"

        # Vast.ai API configuration
        - name: VAST_API_KEY
          valueFrom:
            secretKeyRef:
              name: vast-api-secret
              key: VAST_API_KEY
              optional: false
        - name: VAST_API_URL
          value: "https://console.vast.ai/api/v0"

        # Timeouts and debug
        - name: VAST_STARTUP_TIMEOUT
          value: "1800"
        - name: VAST_HEALTH_CHECK_TIMEOUT
          value: "1200"
        - name: VAST_INSTANCE_READY_TIMEOUT
          value: "1800"
        - name: VAST_DEBUG_MODE
          value: "true"

        # Retry config
        - name: VAST_NODE_UPDATE_RETRY_COUNT
          value: "10"
        - name: VAST_NODE_UPDATE_RETRY_DELAY
          value: "30"
        - name: VAST_NODE_LEASE_DURATION
          value: "40"

        # Requirements (relaxed)
        - name: VAST_PREFERRED_REGIONS
          value: "US,CA,EU"
        - name: VAST_PRIMARY_REGION
          value: "US"
        - name: VAST_FALLBACK_REGIONS
          value: "CA,EU,MX"
        - name: VAST_BLOCKED_REGIONS
          value: "RU,CN,KP"
        - name: VAST_LATENCY_CHECK_ENABLED
          value: "false"
        - name: VAST_MAX_LATENCY_MS
          value: "300"
        - name: VAST_BANDWIDTH_MIN_MBPS
          value: "25"
        - name: VAST_MIN_RELIABILITY
          value: "0.80"
        - name: VAST_MAX_PRICE_PER_HOUR
          value: "1.00"
        - name: VAST_GPU_TYPE
          value: "RTX_4060,RTX_3060,RTX_3080,RTX_4090"
        - name: VAST_MIN_GPU_MEMORY
          value: "8"

        - name: VAST_CONTAINER_IMAGE
          value: "ozzuworld/june-gpu-multi:latest"
        - name: VAST_DOCKER_OPTIONS
          value: "-p 8000:8000 -p 8001:8001 --gpus all --restart unless-stopped"

        ports:
        - containerPort: 10250
          name: kubelet
        - containerPort: 10255
          name: kubelet-read

        volumeMounts:
        - name: provider-config
          mountPath: /etc/vast-config
          readOnly: true
        - name: vastai-shim
          mountPath: /shim
          readOnly: true

        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi

        livenessProbe:
          httpGet:
            path: /healthz
            port: 10255
          initialDelaySeconds: 120
          periodSeconds: 60
          timeoutSeconds: 30
          failureThreshold: 10
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /readyz
            port: 10255
          initialDelaySeconds: 60
          periodSeconds: 45
          timeoutSeconds: 30
          failureThreshold: 10
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /healthz
            port: 10255
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 60
          successThreshold: 1

      volumes:
      - name: provider-config
        configMap:
          name: vast-provider-config
      - name: vastai-shim
        emptyDir: {}

      tolerations:
      - key: node.alpha.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 60
      - key: node.alpha.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 60

      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists

      restartPolicy: Always
