#!/bin/bash
# Simple Manifest Generator for June Platform
set -e

# Load configuration
if [ -f ".env" ]; then
    source .env
else
    echo "❌ .env file not found. Please create it first."
    exit 1
fi

# Validate required variables
REQUIRED_VARS=("PRIMARY_DOMAIN" "LETSENCRYPT_EMAIL")
for var in "${REQUIRED_VARS[@]}"; do
    if [ -z "${!var}" ]; then
        echo "❌ Required variable $var is not set in .env"
        exit 1
    fi
done

# Generate derived values
API_DOMAIN="api.${PRIMARY_DOMAIN}"
IDP_DOMAIN="idp.${PRIMARY_DOMAIN}"
STT_DOMAIN="stt.${PRIMARY_DOMAIN}"
TTS_DOMAIN="tts.${PRIMARY_DOMAIN}"
CERT_NAME="${PRIMARY_DOMAIN//./-}-wildcard"
CERT_SECRET_NAME="${CERT_NAME}-tls"

echo "🔧 Generating manifests for domain: $PRIMARY_DOMAIN"

# Generate the manifest
cat > k8s/june-manifests.yaml << EOF
---
apiVersion: v1
kind: Namespace
metadata:
  name: june-services
  labels:
    name: june-services
    app.kubernetes.io/part-of: june

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: june-config
  namespace: june-services
data:
  APP_ENV: production
  LOG_LEVEL: info
  REGION: us-central1

---
apiVersion: v1
kind: Secret
metadata:
  name: june-secrets
  namespace: june-services
type: Opaque
stringData:
  gemini-api-key: "${GEMINI_API_KEY:-PLACEHOLDER}"
  keycloak-client-secret: "PLACEHOLDER"

---
apiVersion: v1
kind: Secret
metadata:
  name: service-auth-secret
  namespace: june-services
type: Opaque
stringData:
  stt-service-token: "stt-service-secure-token-12345"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: june-services
spec:
  accessModes: [ReadWriteOnce]
  storageClassName: local-storage
  resources:
    requests:
      storage: 10Gi
  selector:
    matchLabels:
      app: postgresql

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: june-services
spec:
  serviceName: postgresql
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "keycloak"
        - name: POSTGRES_USER
          value: "keycloak"
        - name: POSTGRES_PASSWORD
          value: "${POSTGRES_PASSWORD:-Pokemon123!}"
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command: [pg_isready, -U, keycloak]
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command: [pg_isready, -U, keycloak]
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgresql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: june-services
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgresql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-stt
  namespace: june-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-stt
  template:
    metadata:
      labels:
        app: june-stt
    spec:
      nodeSelector:
        gpu: "true"
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      containers:
      - name: stt
        image: docker.io/ozzuworld/june-stt:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: "1"
            memory: "6Gi"
            nvidia.com/gpu: 1
          limits:
            cpu: "2"
            memory: "10Gi"
            nvidia.com/gpu: 1
        env:
        - name: PORT
          value: "8080"
        - name: ORCHESTRATOR_URL
          value: "http://june-orchestrator.june-services.svc.cluster.local:8080"
        - name: STT_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              name: service-auth-secret
              key: stt-service-token
        volumeMounts:
        - name: model-cache
          mountPath: /app/models
        startupProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 90
          periodSeconds: 10
          failureThreshold: 90
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 180
          periodSeconds: 30
      volumes:
      - name: model-cache
        emptyDir:
          sizeLimit: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: june-stt
  namespace: june-services
spec:
  selector:
    app: june-stt
  ports:
  - port: 8080
    targetPort: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-tts
  namespace: june-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-tts
  template:
    metadata:
      labels:
        app: june-tts
    spec:
      nodeSelector:
        gpu: "true"
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      containers:
      - name: tts
        image: docker.io/ozzuworld/june-tts:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        resources:
          requests:
            cpu: "1"
            memory: "4Gi"
            nvidia.com/gpu: 1
          limits:
            cpu: "2"
            memory: "6Gi"
            nvidia.com/gpu: 1
        env:
        - name: PORT
          value: "8000"
        volumeMounts:
        - name: model-cache
          mountPath: /models
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 120
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 180
          periodSeconds: 30
      volumes:
      - name: model-cache
        emptyDir:
          sizeLimit: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: june-tts
  namespace: june-services
spec:
  selector:
    app: june-tts
  ports:
  - port: 8000
    targetPort: 8000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-orchestrator
  namespace: june-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-orchestrator
  template:
    metadata:
      labels:
        app: june-orchestrator
    spec:
      containers:
      - name: orchestrator
        image: docker.io/ozzuworld/june-orchestrator:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        env:
        - name: PORT
          value: "8080"
        - name: VALID_SERVICE_TOKENS
          valueFrom:
            secretKeyRef:
              name: service-auth-secret
              key: stt-service-token
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: june-secrets
              key: gemini-api-key
        - name: KEYCLOAK_URL
          value: "http://june-idp.june-services.svc.cluster.local:8080"
        - name: TTS_SERVICE_URL
          value: "http://june-tts.june-services.svc.cluster.local:8000"
        - name: STT_SERVICE_URL
          value: "http://june-stt.june-services.svc.cluster.local:8080"
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 15

---
apiVersion: v1
kind: Service
metadata:
  name: june-orchestrator
  namespace: june-services
spec:
  selector:
    app: june-orchestrator
  ports:
  - port: 8080
    targetPort: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: june-idp
  namespace: june-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: june-idp
  template:
    metadata:
      labels:
        app: june-idp
    spec:
      containers:
      - name: keycloak
        image: docker.io/ozzuworld/june-idp:latest
        imagePullPolicy: Always
        command: [/opt/keycloak/bin/kc.sh]
        args: [start, --optimized]
        ports:
        - containerPort: 8080
        - containerPort: 9000
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2"
        env:
        - name: KC_DB
          value: postgres
        - name: KC_DB_URL
          value: jdbc:postgresql://postgresql.june-services.svc.cluster.local:5432/keycloak
        - name: KC_DB_USERNAME
          value: keycloak
        - name: KC_DB_PASSWORD
          value: "${POSTGRES_PASSWORD:-Pokemon123!}"
        - name: KC_BOOTSTRAP_ADMIN_USERNAME
          value: admin
        - name: KC_BOOTSTRAP_ADMIN_PASSWORD
          value: "${KEYCLOAK_ADMIN_PASSWORD:-Pokemon123!}"
        - name: KC_HTTP_ENABLED
          value: "true"
        - name: KC_HOSTNAME
          value: "$IDP_DOMAIN"
        - name: KC_PROXY_HEADERS
          value: xforwarded
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 9000
          initialDelaySeconds: 60
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health/live
            port: 9000
          initialDelaySeconds: 90
          periodSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  name: june-idp
  namespace: june-services
spec:
  selector:
    app: june-idp
  ports:
  - port: 8080
    targetPort: 8080

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: $CERT_NAME
  namespace: june-services
spec:
  secretName: $CERT_SECRET_NAME
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: "$PRIMARY_DOMAIN"
  dnsNames:
  - "$PRIMARY_DOMAIN"
  - "*.$PRIMARY_DOMAIN"

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: june-ingress
  namespace: june-services
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - "*.$PRIMARY_DOMAIN"
    - "$PRIMARY_DOMAIN"
    secretName: $CERT_SECRET_NAME
  rules:
  - host: $API_DOMAIN
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-orchestrator
            port:
              number: 8080
  - host: $IDP_DOMAIN
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-idp
            port:
              number: 8080
  - host: $STT_DOMAIN
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-stt
            port:
              number: 8080
  - host: $TTS_DOMAIN
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: june-tts
            port:
              number: 8000
EOF

echo "✅ Manifests generated successfully!"
echo "📋 Configuration:"
echo "  Domain: $PRIMARY_DOMAIN"
echo "  API: $API_DOMAIN"
echo "  IDP: $IDP_DOMAIN"
echo "  STT: $STT_DOMAIN"
echo "  TTS: $TTS_DOMAIN"
echo "  Certificate: $CERT_SECRET_NAME"
